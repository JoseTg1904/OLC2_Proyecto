{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/paginas/bnf/bnf.component.html","./src/app/paginas/grafico/grafico.component.html","./src/app/paginas/principal/home.component.html","./src/app/paginas/tabla-xml/tabla-xml.component.html","./src/analizadorXML/AST/CST.ts","./src/analizadorXML/AST/Entorno.ts","./src/analizadorXML/AST/GramaticaBNF.ts","./src/analizadorXML/AST/SalidaGramatica.ts","./src/analizadorXML/AST/TablaSimbolos.ts","./src/analizadorXML/Expresiones/Atributo.ts","./src/analizadorXML/Expresiones/Objeto.ts","./src/analizadorXML/Expresiones/tError.ts","./src/analizadorXML/Gramatica/gramatica.js","./src/analizadorXML/Gramatica/gramaticaDesc.js","./src/analizadorXML/index.ts","./src/analizadorXML/indexDesc.ts","./src/analizadores/AST/Arbol.ts","./src/analizadores/AST/GramaticaBNF.ts","./src/analizadores/AST/SalidaGramatica.ts","./src/analizadores/Expresiones/Nodo.ts","./src/analizadores/Expresiones/Predicate.ts","./src/analizadores/Expresiones/Primitivo.ts","./src/analizadores/Operaciones/Aritmeticas.ts","./src/analizadores/Operaciones/Logica.ts","./src/analizadores/Operaciones/Relacional.ts","./src/analizadores/index.ts","./src/analizadores/indexDesc.ts","./src/analizadores/xpathAsc.js","./src/analizadores/xpathDesc.js","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/paginas/bnf/bnf.component.css","./src/app/paginas/bnf/bnf.component.ts","./src/app/paginas/grafico/grafico.component.css","./src/app/paginas/grafico/grafico.component.ts","./src/app/paginas/principal/home.component.css","./src/app/paginas/principal/home.component.ts","./src/app/paginas/tabla-xml/tabla-xml.component.css","./src/app/paginas/tabla-xml/tabla-xml.component.ts","./src/app/reporte.service.ts","./src/environments/environment.ts","./src/main.ts","webpack:///fs (ignored)?18df","webpack:///path (ignored)?420a","fs (ignored)","path (ignored)"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAe,gGAAiC,E;;;;;;;;;;;;ACAhD;AAAe,6cAA8Y,YAAY,0NAA0N,oBAAoB,oNAAoN,gBAAgB,wIAAwI,2BAA2B,mBAAmB,E;;;;;;;;;;;;ACAjjC;AAAe,yFAA0B,E;;;;;;;;;;;;ACAzC;AAAe,+lGAAgiG,E;;;;;;;;;;;;ACA/iG;AAAe,6cAA8Y,YAAY,kNAAkN,gBAAgB,gNAAgN,cAAc,kNAAkN,eAAe,4LAA4L,gBAAgB,wMAAwM,sBAAsB,wLAAwL,eAAe,8LAA8L,iBAAiB,wIAAwI,2BAA2B,mBAAmB,E;;;;;;;;;;;;ACGhkE;AAAA;AAAO,MAAM,GAAG;IAKZ,YAAY,OAAY;QAHxB,cAAS,GAAW,EAAE,CAAC;QAInB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED,eAAe,CAAC,OAAY;QACxB,IAAI,GAAG,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,iBAAiB,CAAC;QACnC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,EAAE;YAC5B,GAAG,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;YAChE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YAC5D,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC;QAC1B,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,iBAAiB,CAAC,MAAW,EAAE,GAAQ,EAAE,KAAU;QAC/C,IAAI,EAAE,GAAW,MAAM,CAAC,aAAa,CAAC;QACtC,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B,IAAI,IAAI,GAAG,OAAO,GAAG;;EAE3B,EAAE,QAAQ,CAAC;QACL,IAAI,KAAK,KAAK,IAAI,EAAE;YAChB,IAAI,IAAI,OAAO,KAAK,WAAW,GAAG,IAAI,CAAC;SAC1C;QACD,IAAI,MAAM,CAAC,KAAK,KAAK,EAAE,EAAE;YACrB,IAAI,KAAK,GAAI,MAAM,CAAC,KAAK,CAAC;YAC1B,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;YACjC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;YACjC,IAAI,IAAI,OAAO,GAAG,gBAAgB,KAAK,QAAQ,CAAC;YAChD,IAAI,IAAI,OAAO,GAAG,WAAW,GAAG,sBAAsB,CAAC;SAC1D;QAED,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,QAAa,EAAE,EAAE;YAC5C,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;YACxE,IAAI,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,GAAQ,EAAE,EAAE;YACrC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC9D,IAAI,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,mBAAmB,CAAC,MAAW,EAAE,GAAQ,EAAE,KAAU;QACjD,IAAI,EAAE,GAAI,MAAM,CAAC,aAAa,CAAC;QAC/B,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B,IAAI,KAAK,GAAI,MAAM,CAAC,KAAK,CAAC;QAC1B,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;QACjC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;QACjC,IAAI,IAAI,GAAG,OAAO,GAAG;;EAE3B,EAAE,OAAO;QACH,IAAI,IAAI,OAAO,KAAK,WAAW,GAAG,IAAI,CAAC;QACvC,IAAI,IAAI,OAAO,GAAG,aAAa,KAAK,KAAK,CAAC;QAC1C,IAAI,IAAI,OAAO,GAAG,WAAW,GAAG,wBAAwB,CAAC;QACzD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;;;;;;;;;;;;;AClED;AAAA;AAAO,MAAM,OAAO;IAIhB,YAAY,QAAY;QACpB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,EAAS,EAAE,OAAe;QAC9B,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;QACtB,OAAO,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;QAC9D,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,EAAS;QACd,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,GAAW,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EACpD;YACI,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;YACzB,IAAI,KAAK,KAAG,SAAS,EACrB;gBACI,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACnB,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,EAAS;QACZ,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,GAAW,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EACpD;YACI,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;YACzB,IAAI,KAAK,KAAG,SAAS,EACrB;gBACI,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,cAAc,CAAC,EAAS;QACpB,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;QACtB,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAG,SAAS,EAC9B;YACI,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,UAAU,CAAC,EAAS;QAChB,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,GAAW,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EACpD;YACI,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAG,SAAS,EAC3B;gBACI,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aACtB;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,UAAU,CAAC,EAAS,EAAE,UAAkB;QACpC,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,GAAW,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EACpD;YACI,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;YACzB,IAAI,KAAK,KAAG,SAAS,EACrB;gBACI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC;aAC5B;SACJ;IACL,CAAC;CAEJ;;;;;;;;;;;;;ACxED;AAAA;AAAO,MAAM,YAAY;IAKrB,YAAY,IAAS,EAAE,KAAU;QAC7B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,YAAY;QACR,IAAI,GAAG,GAAiB,EAAE,CAAC;QAE3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAC3E;QAED,OAAO,GAAG;IACd,CAAC;IAED,kBAAkB,CAAC,MAAW,EAAE,OAAY,EAAE,QAAgB;QAC1D,IAAI,IAAI,GAAe;YACnB,EAAE,EAAE,QAAQ;YACZ,UAAU,EAAE,MAAM;YAClB,MAAM,EAAE,OAAO;SAClB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CAEJ;;;;;;;;;;;;;ACjCD;AAAA;AAAO,MAAM,eAAe;IAQxB,YAAY,OAAY,EAAE,OAAY,EAAE,QAAa,EAAE,QAAa,EAAE,MAAW;QAC7E,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;IAC3B,CAAC;CACJ;;;;;;;;;;;;;ACFD;AAAA;AAAO,MAAM,aAAa;IAGtB;QAFA,aAAQ,GAAW,CAAC,CAAC;QAEL,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IAAA,CAAC;IAEnC,0BAA0B,CAAC,OAAY;QACnC,IAAI,WAAW,GAAoB,EAAE,CAAC;QACtC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,EAAE;YAC5B,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QACH,OAAO,WAAW,CAAC;IACvB,CAAC;IAED,iBAAiB,CAAC,MAAW,EAAE,MAAW,EAAE,IAAS,EAAE,KAA2B;QAC9E,IAAI,KAAU,CAAC;QACf,MAAM,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAErE,IAAI,cAAmB,CAAC;QACxB,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,cAAc,GAAG,MAAM;QAErE,IAAI,OAAY,CAAC;QACjB,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,GAAG,QAAQ;QAE9D,IAAI,IAAI,GAAkB,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ;YACxC,MAAM,EAAE,MAAM,CAAC,aAAa;YAC5B,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;YACZ,YAAY,EAAE,OAAO;YACrB,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,MAAM,EAAE,cAAc;SACzB;QACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QAEhB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,QAAa,EAAE,EAAE;YAC5C,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,MAAM,CAAC,aAAa,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,QAAa,EAAE,EAAE;YAC1C,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,aAAa,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IAGP,CAAC;IAED,mBAAmB,CAAC,MAAW,EAAE,MAAW,EAAE,IAAS,EAAE,KAA2B;QAChF,IAAI,IAAI,GAAkB;YACtB,EAAE,EAAE,IAAI,CAAC,QAAQ;YACjB,MAAM,EAAE,MAAM,CAAC,aAAa;YAC5B,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,YAAY,EAAE,WAAW;YACzB,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,MAAM,EAAE,MAAM;SACjB;QACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QAChB,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpB,CAAC;CACJ;;;;;;;;;;;;;AC3ED;AAAA;AAAO,MAAM,QAAQ;IAMjB,YAAY,EAAS,EAAE,KAAY,EAAE,KAAY,EAAE,OAAc;QAC7D,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CACJ;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAyC;AAGlC,MAAM,MAAM;IAWf,YAAY,EAAS,EAAE,KAAY,EAAE,KAAY,EAAE,OAAc,EAAE,cAA8B,EAAE,MAAoB,EAC3G,QAAe,EAAE,MAAa;QACtC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,oDAAO,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAI,MAAM,CAAC;IAC1B,CAAC;CACJ;;;;;;;;;;;;;AC1BD;AAAA;AAAO,MAAM,MAAM;IAOf;;;;;;OAMG;IACH,YAAY,IAAS,EAAE,KAAa,EAAE,KAAa,EAAE,OAAe;QAChE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;CACJ;;;;;;;;;;;;ACpBD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,eAAe,kCAAkC;AACjD,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mJAAmJ;AACnJ,SAAS;;AAET;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,YAAY,IAAI,WAAW,SAAS;AACvE,cAAc,0BAA0B,EAAE;AAC1C,MAAM;AACN,WAAW,2oBAA2oB;AACtpB,aAAa,4cAA4c;AACzd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qB;AACA;AACA;;AAEA,2EAA2E,OAAO;;AAElF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qIAAqI,OAAO;AAC5I;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sEAAsE;;AAEtE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qGAAqG,OAAO;AAC5G;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qFAAqF,OAAO;AAC5F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,SAAS,wBAAwB,EAAE,MAAM,EAAE,0BAA0B,EAAE,SAAS,EAAE,UAAU,EAAE,gCAAgC,4BAA4B,OAAO,EAAE,OAAO,EAAE,SAAS,eAAe,QAAQ,4BAA4B,+BAA+B,iBAAiB,UAAU,EAAE,oBAAoB,eAAe,mBAAmB,iBAAiB,UAAU,EAAE,mBAAmB,EAAE,UAAU,EAAE,qQAAqQ,EAAE,UAAU,gBAAgB,UAAU,8BAA8B,UAAU,EAAE,qBAAqB,EAAE,sPAAsP,wCAAwC,OAAO,8dAA8d,UAAU,EAAE,iBAAiB,gBAAgB,UAAU,2BAA2B,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,0BAA0B,UAAU;AAC9sD,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;AAChE,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,WAAW,OAAO,GAAG,mBAAO,CAAC,wEAAuB;AACpD,WAAW,SAAS,GAAG,mBAAO,CAAC,4EAAyB;AACxD,WAAW,gBAAgB,GAAG,mBAAO,CAAC,0EAAwB;AAC9D,WAAW,OAAO,GAAG,mBAAO,CAAC,wEAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,WAAW;AAChF;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,+EAA+E,aAAa,cAAc,eAAe,eAAe,uRAAuR,sDAAsD,WAAW;AAChe,aAAa,WAAW,iKAAiK,YAAY;AACrM,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,oDAAoD;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;ACt8BA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,eAAe,kCAAkC;AACjD,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mJAAmJ;AACnJ,SAAS;;AAET;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,YAAY,IAAI,WAAW,SAAS;AACvE,cAAc,0BAA0B,EAAE;AAC1C,MAAM;AACN,WAAW,ipBAAipB;AAC5pB,aAAa,4cAA4c;AACzd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4D;AACA,8B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;;AAEA;AACA;;AAEA;AACA,8CAA8C,oDAAoD;AAClG,sBAAsB;;AAEtB;AACA;;AAEA;AACA,0CAA0C,wDAAwD;AAClG,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D,uEAAuE;AACjI,kCAAkC;AAClC,qBAAqB;AACrB,yFAAyF,kBAAkB,oEAAoE;AAC/K;AACA,kCAAkC;AAClC;AACA,iBAAiB,4B;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,SAAS,gBAAgB,EAAE,MAAM,EAAE,qBAAqB,EAAE,QAAQ,EAAE,QAAQ,EAAE,qBAAqB,EAAE,aAAa,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,yBAAyB,mBAAmB,GAAG,UAAU,EAAE,0BAA0B,YAAY,mBAAmB,GAAG,UAAU,EAAE,UAAU,eAAe,gPAAgP,EAAE,UAAU,gBAAgB,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,gPAAgP,oeAAoe,UAAU,EAAE,0BAA0B,EAAE,SAAS,EAAE,UAAU,eAAe,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,0BAA0B,EAAE,SAAS,6BAA6B,UAAU;AACv/C,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,OAAO,GAAG,mBAAO,CAAC,wEAAuB;AACpD,WAAW,SAAS,GAAG,mBAAO,CAAC,4EAAyB;AACxD,WAAW,gBAAgB,GAAG,mBAAO,CAAC,0EAAwB;;AAE9D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,UAAU,wBAAwB;AAClaAAa,cAAc,eAAe,eAAe,uRAAuR,sDAAsD,WAAW;AAChe,aAAa,WAAW,iKAAiK,YAAY;AACrM,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI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Aa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,kBAAkB,GAAG,mBAAO,CAAC,wEAAuB;AAC/D,WAAW,OAAO,GAAG,mBAAO,CAAC,kEAAoB;AACjD,sBAAsB,mBAAO,CAAC,4EAAyB;AACvD,uBAAuB,mBAAO,CAAC,gFAA2B;AAC1D,uBAAuB,mBAAO,CAAC,8EAA0B;AACzD,mBAAmB,mBAAO,CAAC,sEAAsB,E;AACjD,WAAW,YAAY,GAAG,mBAAO,CAAC,4EAAyB;AAC3D,aAAa,WAAW;;AAExB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,aAAa,WAAW;AACxB,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;ACnhCA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,eAAe,kCAAkC;AACjD,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mJAAmJ;AACnJ,SAAS;;AAET;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,YAAY,IAAI,WAAW,SAAS;AACvE,cAAc,0BAA0B,EAAE;AAC1C,MAAM;AACN,WAAW,y6BAAy6B;AACp7B,aAAa,mrBAAmrB;AAChsB;AACA;AACA;;AAEA;AACA;AACA;;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2E,aAAa,2EAA2E,aAAa,2EAA2E,aAAa,2EAA2E,aAAa,2EAA2E,aAAa,2EAA2E,aAAa,2EAA2E,aAAa,2EAA2E,iBAAiB,WAAW,EAAE,WAAW,EAAE,sGAAsG,yBAAyB,cAAc,GAAG,WAAW,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,YAAY,oBAAoB,0DAA0D,cAAc,gBAAgB,cAAc,uBAAuB,oFAAoF,gBAAgB,4BAA4B,gBAAgB,4BAA4B,gBAAgB,4BAA4B,gBAAgB,4BAA4B,iBAAiB,wDAAwD,iBAAiB,wDAAwD,0BAA0B,6EAA6E,6BAA6B,sEAAsE,iGAAiG,cAAc,GAAG,WAAW,YAAY,cAAc,GAAG,WAAW,wLAAwL,WAAW,gBAAgB,WAAW,YAAY,cAAc;AAC3iK,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,kBAAkB,GAAG,mBAAO,CAAC,wEAAuB;AAC/D,WAAW,OAAO,GAAG,mBAAO,CAAC,kEAAoB;AACjD,sBAAsB,mBAAO,CAAC,4EAAyB;AACvD,uBAAuB,mBAAO,CAAC,gFAA2B;AAC1D,uBAAuB,mBAAO,CAAC,8EAA0B;AACzD,mBAAmB,mBAAO,CAAC,sEAAsB,E;AACjD,WAAW,YAAY,GAAG,mBAAO,CAAC,4EAAyB;AAC3D,aAAa,WAAW;;AAExB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"main-es2017.d94c7f0010244e79b58f.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<router-outlet></router-outlet>\";","export default \"<table mat-table [dataSource]=\\\"simbolos\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <!--- Note that these columns can be defined in any order.\\n    The actual rendered columns are set as a property on the row definition\\\" -->\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"no\\\">\\n      <th mat-header-cell *matHeaderCellDef> No. </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.no}} </td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"produccion\\\">\\n      <th mat-header-cell *matHeaderCellDef> Produccion </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.produccion}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"accion\\\">\\n      <th mat-header-cell *matHeaderCellDef> Accion </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.accion}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\";","export default \"<div id = \\\"vis\\\"></div>\";","export default \"<div id = \\\"barra\\\">\\n  <mat-toolbar color = \\\"warn\\\">\\n    <span>Tytus X</span>\\n\\n    <div class = \\\"spacer\\\"></div>\\n\\n    <button mat-raised-button color = \\\"accent\\\" [matMenuTriggerFor] = \\\"archivo\\\">Archivo</button>\\n    <mat-menu #archivo = \\\"matMenu\\\">\\n        <button mat-menu-item>\\n            <mat-icon>attach_file</mat-icon>\\n            <label for = \\\"file\\\">Abrir XML</label>\\n            <input type = \\\"file\\\"\\n            id = \\\"file\\\"\\n            class = \\\"hidend\\\"\\n            (change) = \\\"abrirXML($event.target.files)\\\">\\n        </button>\\n        <button mat-menu-item>\\n            <mat-icon>attach_file</mat-icon>\\n            <span>Abrir XPath</span>\\n        </button>\\n        <button mat-menu-item>\\n            <mat-icon>delete</mat-icon>\\n            <span>Limpiar</span>\\n        </button>\\n    </mat-menu>\\n\\n    <button mat-raised-button color = \\\"accent\\\" [matMenuTriggerFor] = \\\"ejecutar\\\">Ejecutar</button>\\n    <mat-menu #ejecutar = \\\"matMenu\\\">\\n        <button mat-menu-item (click) = \\\"ejecutarAscendente()\\\">\\n            <mat-icon>keyboard_arrow_up</mat-icon>\\n            <span>Ascendete</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"ejecutarDescendente()\\\"> \\n            <mat-icon>keyboard_arrow_down</mat-icon>\\n            <span>Descendente</span>\\n        </button>\\n    </mat-menu>\\n\\n    <button mat-raised-button color = \\\"accent\\\" [matMenuTriggerFor] = \\\"reporte\\\">Reportes</button>\\n    <mat-menu #reporte = \\\"matMenu\\\">\\n        <button mat-menu-item (click) = \\\"reporteTablaSimbolosXML()\\\">\\n            <span>Tabla de simbolos XML</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteCSTXML()\\\">\\n          <span>CST XML</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteASTXPATH()\\\">\\n          <span>AST XPATH</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteCSTXPATH()\\\">\\n          <span>CST XPATH</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteBNFXML()\\\">\\n          <span>BNF XML</span>\\n        </button>  \\n        <button mat-menu-item (click) = \\\"reporteBNFXPATH()\\\">\\n          <span>BNF XPATH</span>\\n        </button>  \\n      </mat-menu>\\n</mat-toolbar>\\n</div>\\n\\n<div id = \\\"superior\\\">\\n  <ngx-codemirror\\n    [options] = \\\"editorQueryOptions\\\"\\n    [(ngModel)] = \\\"querys\\\">\\n  </ngx-codemirror>\\n</div>\\n\\n<div id = \\\"separador1\\\"></div>\\n\\n<div id = \\\"inferior\\\">\\n  <div id = \\\"izquierda\\\">\\n    <ngx-codemirror\\n      [options] = \\\"editorXMLEntradaOptions\\\"\\n      [(ngModel)] = \\\"xmlEntrada\\\">\\n    </ngx-codemirror>\\n  </div>\\n  <div id = \\\"separador2\\\"></div>\\n  <div id = \\\"derecha\\\">\\n    <ngx-codemirror\\n      [options] = \\\"editorXMLSalidaOptions\\\"\\n      [(ngModel)] = \\\"xmlSalida\\\">\\n    </ngx-codemirror>\\n  </div> \\n</div>\\n\\n<div id = \\\"grafo\\\" *ngIf=\\\"grafo == true\\\">\\n  <app-grafico></app-grafico>\\n</div>\\n\\n<div id = \\\"tablaS\\\" *ngIf = \\\"tabla == true\\\">\\n  <app-tabla-xml></app-tabla-xml>\\n</div>\\n\\n<div id = \\\"bnf\\\" *ngIf = \\\"bnf == true\\\">\\n  <app-bnf></app-bnf>\\n</div>\";","export default \"<table mat-table [dataSource]=\\\"simbolos\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <!--- Note that these columns can be defined in any order.\\n    The actual rendered columns are set as a property on the row definition\\\" -->\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"no\\\">\\n      <th mat-header-cell *matHeaderCellDef> No. </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.no}} </td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"nombre\\\">\\n      <th mat-header-cell *matHeaderCellDef> Nombre </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.nombre}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"tipo\\\">\\n      <th mat-header-cell *matHeaderCellDef> Tipo </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.tipo}} </td>\\n    </ng-container>\\n\\n    <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"valor\\\">\\n      <th mat-header-cell *matHeaderCellDef> Valor </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.valor}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"ambito\\\">\\n        <th mat-header-cell *matHeaderCellDef> Ambito </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.ambito}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"tipoEtiqueta\\\">\\n      <th mat-header-cell *matHeaderCellDef> Tipo de etiqueta </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.tipoEtiqueta}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"fila\\\">\\n        <th mat-header-cell *matHeaderCellDef> Fila </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.linea}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"columna\\\">\\n        <th mat-header-cell *matHeaderCellDef> Columna </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.columna}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\";","import { Atributo } from './../Expresiones/Atributo';\nimport { Objeto } from './../Expresiones/Objeto';\n\nexport class CST {\n\n    cuerpoDot: string = '';\n    public objetos: any;\n\n    constructor(objetos: any) {\n        this.objetos = objetos;\n    }\n\n    generarArbolCST(objetos: any): string {\n        var num;\n        this.cuerpoDot = 'digraph D { \\n ';\n        objetos.forEach((object: any) => {\n            num = `${object.linea.toString()}_${object.columna.toString()}`;\n            this.cuerpoDot += this.generarNodoObjeto(object, num, null);\n            num = num + 1000;\n        });\n        this.cuerpoDot += '} \\n ';\n        return this.cuerpoDot;\n    }\n\n    generarNodoObjeto(objeto: any, pos: any, padre: any): string {\n        let id:string =  objeto.identificador;\n        id = id.replace(/\\'/gi, \"\")\n        id = id.replace(/\\\"/gi, \"\")\n        var nodo = `nodo${pos} [label = \n        \\\"ETIQUETA\n${id}\\\" ]\\n`;\n        if (padre !== null) {\n            nodo += `nodo${padre} -> nodo${pos}\\n`;\n        }\n        if (objeto.texto !== '') {\n            let texto =  objeto.texto;\n            texto = texto.replace(/\\'/gi, \"\")\n            texto = texto.replace(/\\\"/gi, \"\")\n            nodo += `nodo${pos}_t [label =\\\"${texto}\\\" ]\\n`;\n            nodo += `nodo${pos} -> nodo${pos}_t [label=\\\"txt\\\"]\\n`;\n        }\n\n        objeto.listaAtributos.forEach((atribute: any) => {\n            var num = `${atribute.linea.toString()}_${atribute.columna.toString()}`;\n            nodo += this.generarNodoAtributo(atribute, num, pos);\n        });\n        objeto.listaObjetos.forEach((obj: any) => {\n            var num = `${obj.linea.toString()}_${obj.columna.toString()}`;\n            nodo += this.generarNodoObjeto(obj, num, pos);\n        });\n\n        return nodo;\n    }\n\n    generarNodoAtributo(objeto: any, pos: any, padre: any): string {\n        let id =  objeto.identificador;\n        id = id.replace(/\\'/gi, \"\")\n        id = id.replace(/\\\"/gi, \"\")\n        let valor =  objeto.valor;\n        valor = valor.replace(/\\'/gi, \"\")\n        valor = valor.replace(/\\\"/gi, \"\")\n        var nodo = `nodo${pos} [label =\n        \\\"ATRIBUTO\n${id}\\\"]\\n`\n        nodo += `nodo${padre} -> nodo${pos}\\n`;\n        nodo += `nodo${pos}_a [label=${valor}]\\n`;\n        nodo += `nodo${pos} -> nodo${pos}_a [label=\\\"valor\\\"]\\n`;\n        return nodo;\n    }\n}\n","import { Simbolo } from \"./Simbolo\";\n\n\nexport class Entorno{\n    private anterior:Entorno;\n    private tabla:{[id:string] : Simbolo};\n\n    constructor(anterior:any){\n        this.tabla = {};\n        this.anterior = anterior;\n    }\n\n    agregar(id:string, simbolo:Simbolo){\n        id = id.toLowerCase();\n        simbolo.indentificador = simbolo.indentificador.toLowerCase();\n        this.tabla[id] = simbolo;\n    }\n\n    eliminar(id:string):boolean{\n        id = id.toLowerCase();\n        for (let e:Entorno = this; e != null; e = e.anterior)\n        {   \n            const value = e.tabla[id]\n            if (value!==undefined)\n            {\n                delete e.tabla[id];\n                return true;\n            }\n        }\n        return false;\n    }\n\n    existe(id:string):boolean{\n        id = id.toLowerCase();\n        for (let e:Entorno = this; e != null; e = e.anterior)\n        {\n            const value = e.tabla[id]\n            if (value!==undefined)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    existeEnActual(id:string):boolean{\n        id = id.toLowerCase();\n        if (this.tabla[id]!==undefined)\n        {\n            return true;\n        }\n        return false;\n    }\n\n    getSimbolo(id:string):any{\n        id = id.toLowerCase();\n        for (let e:Entorno = this; e != null; e = e.anterior)\n        {\n            if (e.tabla[id]!==undefined)\n            {\n                return e.tabla[id];\n            }\n        }\n        return null;\n    }\n\n    reemplazar(id:string, nuevoValor:Simbolo){\n        id = id.toLowerCase();\n        for (let e:Entorno = this; e != null; e = e.anterior)\n        {\n            const value = e.tabla[id]\n            if (value!==undefined)\n            {\n                e.tabla[id] = nuevoValor;\n            }\n        }\n    }\n\n}","interface retornoBNF {\n    no: number,\n    produccion: string\n    accion: string\n}\n\nexport class GramaticaBNF {\n\n    public reporte: any;\n    public reporte2: any;\n\n    constructor(repo: any, repo2: any) {\n        this.reporte = repo;\n        this.reporte2 = repo2;\n    }\n\n    getBNFReport(): retornoBNF[] {\n        let ret: retornoBNF[] = [];\n\n        for (let i = 0; i < this.reporte.length; i++) {\n            ret.push(this.generarBodyReporte(this.reporte[i], this.reporte2[i], i));\n        }\n\n        return ret\n    }\n\n    generarBodyReporte(object: any, object2: any, iterator: number): retornoBNF {\n        var fila: retornoBNF = {\n            no: iterator,\n            produccion: object,\n            accion: object2\n        }\n        return fila;\n    }\n\n}\n\n","import {tError} from '../Expresiones/tError';\n\nexport class SalidaGramatica {\n\n    public objetos: any;\n    public reporteBNF: any;\n    public reporteBNF2: any;\n    public encoding: any;\n    public lErrores: any;\n\n    constructor(objetos: any, reporte: any, reporte2: any, encoding: any, lError: any) {\n        this.objetos = objetos;\n        this.reporteBNF = reporte;\n        this.reporteBNF2 = reporte2;\n        this.encoding = encoding;\n        this.lErrores = lError;\n    }\n}\n\n","import { ArrayType, ThisReceiver } from \"@angular/compiler\";\nimport { ObjectUnsubscribedError } from \"rxjs\";\nimport { Objeto } from \"../Expresiones/Objeto\";\n\ninterface elementoTabla {\n    no: number,\n    nombre: string,\n    tipo: string,\n    valor: string,\n    tipoEtiqueta: any,\n    linea: number,\n    columna: number,\n    ambito: string\n}\n\nexport class TablaSimbolos {\n    contador: number = 1;\n\n    constructor() { this.contador = 1;}\n\n    generarReporteTablaObjetos(objetos: any): elementoTabla[] {\n        var arrayCuerpo: elementoTabla[] = [];\n        objetos.forEach((object: any) => {\n            this.generarFilaObjeto(object, null, 'Etiqueta', arrayCuerpo);\n        });\n        return arrayCuerpo;\n    }\n\n    generarFilaObjeto(objeto: any, ambito: any, tipo: any, array: Array<elementoTabla>) {\n        let valor: any;\n        objeto.texto === '' ? valor = \"Etiqueta raiz\" : valor = objeto.texto;\n    \n        let ambitoElemento: any;\n        ambito === null ? ambitoElemento = \"Global\" : ambitoElemento = ambito\n\n        let tipoEti: any;\n        objeto.completa === 1 ? tipoEti = \"Doble\" : tipoEti = \"Simple\" \n\n        let fila: elementoTabla = {no: this.contador,\n            nombre: objeto.identificador,\n            tipo: tipo,\n            valor: valor,\n            tipoEtiqueta: tipoEti,\n            linea: objeto.linea,\n            columna: objeto.columna,\n            ambito: ambitoElemento\n        }\n        array.push(fila)\n\n        this.contador++;\n\n        objeto.listaAtributos.forEach((atribute: any) => {\n            this.generarFilaAtributo(atribute, objeto.identificador, 'Atributo', array);\n        });\n        objeto.listaObjetos.forEach((atribute: any) => {\n            this.generarFilaObjeto(atribute, objeto.identificador, 'Etiqueta', array);\n        });\n\n\n    }\n\n    generarFilaAtributo(objeto: any, ambito: any, tipo: any, array: Array<elementoTabla>) {\n        let fila: elementoTabla = {\n            no: this.contador,\n            nombre: objeto.identificador,\n            tipo: tipo,\n            valor: objeto.valor,\n            tipoEtiqueta: \"No aplica\",\n            linea: objeto.linea,\n            columna: objeto.columna,\n            ambito: ambito\n        }\n        array.push(fila)\n        this.contador++;\n    }\n}","export class Atributo{\n    identificador:string;\n    valor:string;\n    linea: number;\n    columna: number;\n\n    constructor(id:string, valor:string, linea:number, columna:number){\n        this.identificador = id;\n        this.valor = valor;\n        this.linea = linea;\n        this.columna = columna;\n    }\n}","import { Entorno } from \"../AST/Entorno\";\nimport { Atributo } from \"./Atributo\";\n\nexport class Objeto{\n    identificador:string;\n    texto:string;\n    listaAtributos:Array<Atributo>;\n    listaObjetos: Array<Objeto>;\n    linea: number;\n    columna: number;\n    entorno: Entorno;\n    completa: number;\n    cierre: string;\n\n    constructor(id:string, texto:string, linea:number, columna:number, listaAtributos:Array<Atributo>, listaO:Array<Objeto>,\n                completa:number, cierre:string){\n        this.identificador = id;\n        this.texto = texto;\n        this.linea = linea;\n        this.columna = columna;\n        this.listaAtributos = listaAtributos;\n        this.listaObjetos = listaO;\n        this.entorno = new Entorno(null);\n        this.completa = completa;\n        this.cierre =  cierre;\n    }\n}","export class tError {\n\n    public tipo: any;\n    public texto: string;\n    public linea: number;\n    public columna: number;\n\n    /**\n     * @constructor creamos un nuevo primitivo\n     * @param tipo hace referencia al tipo de error\n     * @param texto hace referencia al contenido del mensaje del error\n     * @param linea idica la linea donde se encuentra\n     * @param columna indica la columna donde se encuentra\n     */\n    constructor(tipo: any, texto: string, linea: number, columna: number) {\n        this.columna = columna;\n        this.linea = linea;\n        this.texto = texto;\n        this.tipo = tipo;\n    }\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar gramatica = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,8],$V2=[2,6,7],$V3=[1,14],$V4=[1,15],$V5=[2,7],$V6=[14,20],$V7=[1,21],$V8=[1,20],$V9=[2,14,17,20],$Va=[1,40],$Vb=[1,47],$Vc=[1,38],$Vd=[1,37],$Ve=[1,45],$Vf=[1,35],$Vg=[1,36],$Vh=[1,39],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,46],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[1,62],$VB=[1,63],$VC=[1,64],$VD=[1,65],$VE=[1,66],$VF=[2,7,9,11,12,17,20,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],$VG=[2,29];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"START\":3,\"ENCODING\":4,\"RAICES\":5,\"EOF\":6,\"lt\":7,\"interC\":8,\"xml\":9,\"version\":10,\"asig\":11,\"StringLiteral\":12,\"encoding\":13,\"gt\":14,\"RAIZ\":15,\"OBJETO\":16,\"identifier\":17,\"LATRIBUTOS\":18,\"OBJETOS\":19,\"div\":20,\"LISTA_ID_OBJETO\":21,\"ATRIBUTOS\":22,\"ATRIBUTO\":23,\"LISTA_VALORES\":24,\"IntegerLiteral\":25,\"DoubleLiteral\":26,\"CharLiteral\":27,\"CARACTERES\":28,\"plus\":29,\"minus\":30,\"times\":31,\"mod\":32,\"equal\":33,\"nequal\":34,\"and\":35,\"or\":36,\"not\":37,\"semicolon\":38,\"lparen\":39,\"rparen\":40,\"lcurly\":41,\"rcurly\":42,\"lbracket\":43,\"rbracket\":44,\"period\":45,\"coma\":46,\"lesst\":47,\"greatert\":48,\"ampersand\":49,\"apostro\":50,\"quotation\":51,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",6:\"EOF\",7:\"lt\",8:\"interC\",9:\"xml\",10:\"version\",11:\"asig\",12:\"StringLiteral\",13:\"encoding\",14:\"gt\",17:\"identifier\",20:\"div\",25:\"IntegerLiteral\",26:\"DoubleLiteral\",27:\"CharLiteral\",29:\"plus\",30:\"minus\",31:\"times\",32:\"mod\",33:\"equal\",34:\"nequal\",35:\"and\",36:\"or\",37:\"not\",38:\"semicolon\",39:\"lparen\",40:\"rparen\",41:\"lcurly\",42:\"rcurly\",43:\"lbracket\",44:\"rbracket\",45:\"period\",46:\"coma\",47:\"lesst\",48:\"greatert\",49:\"ampersand\",50:\"apostro\",51:\"quotation\"},\nproductions_: [0,[3,3],[4,11],[4,2],[5,2],[5,1],[15,1],[16,9],[16,9],[16,5],[16,2],[18,1],[18,0],[22,2],[22,1],[23,3],[23,2],[23,2],[19,2],[19,1],[21,2],[21,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n   \n                                        reportBNF.push(`<START> ::= <RAICES> EOF`);\n                                        reportBNF2.push('Start.val = Raiz.val. // Fin del documento');\n                                        this.$ = $$[$0-1];\n                                        return new SalidaGramatica(this.$, reportBNF, reportBNF2, $$[$0-2], listaErrores);\n                                    \nbreak;\ncase 2:\n   this.$ = $$[$0-2]; \nbreak;\ncase 3:\n\n            listaErrores.push(new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0-1].first_line,_$[$0-1].first_column));\n        \nbreak;\ncase 4:\n   \n                                reportBNF.push('<RAICES> ::= <RAICES> <RAIZ>');\n                                reportBNF2.push('Raices.val = Raices.push(Raiz)');\n                                $$[$0-1].push($$[$0]);\n                                this.$ = $$[$0-1];\n                            \nbreak;\ncase 5:\n \n                                reportBNF.push('<RAICES> ::= <RAIZ>');\n                                reportBNF2.push('Raices.val = Raiz.val');\n                                this.$ = [$$[$0]];\n                            \nbreak;\ncase 6:\n \n                                reportBNF.push('<RAIZ> ::= <OBJETO>');\n                                reportBNF2.push('Raiz.val = Objeto.val');\n                                this.$ = $$[$0];\n                            \nbreak;\ncase 7:\n \n                                                                                    reportBNF.push('<OBJETO> ::= lt identifier <LATRIBUTOS> gt <OBJETOS> lt div identifier gt');\n                                                                                    reportBNF2.push('Objeto = new Objeto(id,\\'\\',linea, columna, atributos, objetos)');\n                                                                                    this.$ = new Objeto($$[$0-7],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6],$$[$0-4],1,$$[$0-1]);\n                                                                                \nbreak;\ncase 8:\n \n                                                                                    reportBNF.push('<OBJETO> ::= lt identifier <LATRIBUTOS> gt <LISTA_ID_OBJETO> lt div identifier gt');\n                                                                                    reportBNF2.push('Objeto = new Objeto(id,texto,linea, columna,atributos,[])');\n                                                                                    this.$ = new Objeto($$[$0-7],$$[$0-4],_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6],[],1,$$[$0-1]);\n                                                                                \nbreak;\ncase 9:\n \n                                                                                    reportBNF.push('<OBJETO> ::= lt identifier <LATRIBUTOS> div gt');\n                                                                                    reportBNF2.push('Objeto = new Objeto(id,\\'\\',linea, columna,atributos,[])');\n                                                                                    this.$ = new Objeto($$[$0-3],'',_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2],[],0,'');\n                                                                                \nbreak;\ncase 10:\n   listaErrores.push(\n                                                                                        new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0-1].first_line,_$[$0-1].first_column )\n                                                                                    );\n                                                                                \nbreak;\ncase 11:\n \n                                                    reportBNF.push('<LATRIBUTOS> ::= <ATRIBUTOS>');\n                                                    reportBNF2.push('Lista_Atributos.val = Atributos.val');\n                                                    this.$ = $$[$0];\n                                                \nbreak;\ncase 12:\n \n                                                    reportBNF.push('<LATRIBUTOS> ::= /*vacio*/');\n                                                    reportBNF2.push('Lista_Atributos.val = [] ');\n                                                    this.$ = [];\n                                                \nbreak;\ncase 13:\n   \n                                                    reportBNF.push('<ATRIBUTOS> ::= <ATRIBUTOS> <ATRIBUTO>');\n                                                    reportBNF2.push('Atributos.val = Atributos.push(Atributo)');\n                                                    $$[$0-1].push($$[$0]);\n                                                    this.$ = $$[$0-1];/*revisar*/\n                                                \nbreak;\ncase 14:\n \n                                                    reportBNF.push('<ATRIBUTOS> ::= <ATRIBUTO>');\n                                                    reportBNF2.push('Atributos.val = Atributo.val');\n                                                    this.$ = [$$[$0]];\n                                                \nbreak;\ncase 15:\n   \n                                                    reportBNF.push('<ATRIBUTO> ::= identifier asig StringLiteral');\n                                                    reportBNF2.push('Atributo = new Atributo(id, valor, fila, columna)');\n                                                    this.$ = new Atributo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n                                                \nbreak;\ncase 16: case 17:\n   listaErrores.push(\n                                                        new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0-1].first_line,_$[$0-1].first_column )\n                                                    );\n                                                \nbreak;\ncase 18:\n   reportBNF.push('<OBJETOS> ::= <OBJETOS> <OBJETO>');\n                                reportBNF2.push('Objetos.val = Objetos.push(Objeto)');\n                                $$[$0-1].push($$[$0]);\n                                this.$ = $$[$0-1];\n                            \nbreak;\ncase 19:\n \n                                reportBNF.push('<OBJETOS> ::= <OBJETO>');\n                                reportBNF2.push('Objetos.val = Objeto.val');\n                                this.$ = [$$[$0]];\n                            \nbreak;\ncase 20:\n \n                                                        reportBNF.push('<LISTA_ID_OBJETO> ::= <LISTA_ID_OBJETO> <LISTA_VALORES>');\n                                                        reportBNF2.push('Lista_Id_Objeto.val = Lista_Id_Objeto.val + \\' \\' + Lista_Id_Objeto.val');\n                                                        this.$ = $$[$0-1] + ' ' + $$[$0];\n                                                    \nbreak;\ncase 21:\n   \n                                                        reportBNF.push('<LISTA_ID_OBJETO> ::= <LISTA_VALORES>');\n                                                        reportBNF2.push('Lista_Id_Objeto.val = Lista_valores.val');\n                                                        this.$ = $$[$0];\n                                                    \nbreak;\ncase 22: case 23: case 24: case 25: case 26: case 27: case 28:\n\n                                    this.$ = $$[$0];\n                                \nbreak;\ncase 29:\n   listaErrores.push(\n                                        new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0].first_line,_$[$0].first_column )\n                                    );\n                                \nbreak;\ncase 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49:\n this.$ = $$[$0];\nbreak;\ncase 50:\n this.$ = '<';\nbreak;\ncase 51:\n this.$ = '>';\nbreak;\ncase 52:\n this.$ = '&';\nbreak;\ncase 53:\n this.$ = '\\'';\nbreak;\ncase 54:\n this.$ = '\"';\nbreak;\n}\n},\ntable: [{2:[1,4],3:1,4:2,7:[1,3]},{1:[3]},{2:$V0,5:5,7:$V1,15:6,16:7},{8:[1,10]},{14:[1,11]},{2:$V0,6:[1,12],7:$V1,15:13,16:7},o($V2,[2,5]),o($V2,[2,6]),{17:$V3},{14:$V4},{9:[1,16]},o($V5,[2,3]),{1:[2,1]},o($V2,[2,4]),o($V6,[2,12],{18:17,22:18,23:19,2:$V7,17:$V8}),o($V2,[2,10]),{10:[1,22]},{14:[1,23],20:[1,24]},o($V6,[2,11],{23:25,2:$V7,17:$V8}),o($V9,[2,14]),{11:[1,26]},{7:[1,28],14:[1,27]},{11:[1,29]},{2:[1,34],7:$V1,9:$Va,11:$Vb,12:$Vc,16:32,17:$Vd,19:30,20:$Ve,21:31,24:33,25:$Vf,26:$Vg,27:$Vh,28:41,29:$Vi,30:$Vj,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE},{14:[1,67]},o($V9,[2,13]),{12:[1,68]},o($V9,[2,16]),o($V9,[2,17]),{12:[1,69]},{2:$V0,7:[1,70],16:71},{2:[1,74],7:[1,72],9:$Va,11:$Vb,12:$Vc,17:$Vd,20:$Ve,24:73,25:$Vf,26:$Vg,27:$Vh,28:41,29:$Vi,30:$Vj,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE},o($V5,[2,19]),o($VF,[2,21]),o($VF,$VG,{14:$V4}),o($VF,[2,22]),o($VF,[2,23]),o($VF,[2,24]),o($VF,[2,25]),o($VF,[2,26]),o($VF,[2,27]),o($VF,[2,28]),o($VF,[2,30]),o($VF,[2,31]),o($VF,[2,32]),o($VF,[2,33]),o($VF,[2,34]),o($VF,[2,35]),o($VF,[2,36]),o($VF,[2,37]),o($VF,[2,38]),o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),o($VF,[2,52]),o($VF,[2,53]),o($VF,[2,54]),o($V2,[2,9]),o($V9,[2,15]),{13:[1,75]},{17:$V3,20:[1,76]},o($V5,[2,18]),{20:[1,77]},o($VF,[2,20]),o($VF,$VG),{11:[1,78]},{17:[1,79]},{17:[1,80]},{12:[1,81]},{14:[1,82]},{14:[1,83]},{8:[1,84]},o($V2,$V5),o($V2,[2,8]),{14:[1,85]},o($V5,[2,2])],\ndefaultActions: {12:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\n    const {Objeto} = require(\"../Expresiones/Objeto\");\n    const {Atributo} = require(\"../Expresiones/Atributo\");\n    const {SalidaGramatica} = require(\"../AST/SalidaGramatica\");\n    const {tError} = require(\"../Expresiones/tError\");\n    var listaErrores = [];\n    var reportBNF = [];\n    var reportBNF2 = [];\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip comments */\nbreak;\ncase 1:this.begin('comment');\nbreak;\ncase 2:this.popState();\nbreak;\ncase 3:/* skip comment content*/\nbreak;\ncase 4:/* skip whitespace */\nbreak;\ncase 5:return 47\nbreak;\ncase 6:return 48\nbreak;\ncase 7:return 49\nbreak;\ncase 8:return 50\nbreak;\ncase 9:return 51\nbreak;\ncase 10:return 'null';\nbreak;\ncase 11:return 'true';\nbreak;\ncase 12:return 'false';\nbreak;\ncase 13:return 9;\nbreak;\ncase 14:return 10;\nbreak;\ncase 15:return 13;\nbreak;\ncase 16:return 29;\nbreak;\ncase 17:return 30;\nbreak;\ncase 18:return 31;\nbreak;\ncase 19:return 20;\nbreak;\ncase 20:return 32;\nbreak;\ncase 21:return 'lte';\nbreak;\ncase 22:return 'gte';\nbreak;\ncase 23:return 7;\nbreak;\ncase 24:return 14;\nbreak;\ncase 25:return 11;\nbreak;\ncase 26:return 33;\nbreak;\ncase 27:return 34;\nbreak;\ncase 28:return 35;\nbreak;\ncase 29:return 36;\nbreak;\ncase 30:return 37;\nbreak;\ncase 31:return 8;\nbreak;\ncase 32:return 38;\nbreak;\ncase 33:return 46;\nbreak;\ncase 34:return 45;\nbreak;\ncase 35:return 39;\nbreak;\ncase 36:return 40;\nbreak;\ncase 37:return 41;\nbreak;\ncase 38:return 42;\nbreak;\ncase 39:return 43;\nbreak;\ncase 40:return 44;\nbreak;\ncase 41:return 26;\nbreak;\ncase 42:return 25;\nbreak;\ncase 43:return 17;\nbreak;\ncase 44:return 12;\nbreak;\ncase 45:return 27;\nbreak;\ncase 46:\n        listaErrores.push(new tError('Léxico',`Simbolo inesperado: ${yy_.yytext}`,yy_.yylloc.first_line,yy_.yylloc.first_column ));\n        //console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);\n    \nbreak;\ncase 47:return 6\nbreak;\n}\n},\nrules: [/^(?:\\/\\/.*)/i,/^(?:<!--)/i,/^(?:-->)/i,/^(?:.)/i,/^(?:\\s+)/i,/^(?:&lt;)/i,/^(?:&gt;)/i,/^(?:&amp;)/i,/^(?:&apos;)/i,/^(?:&quot;)/i,/^(?:null\\b)/i,/^(?:true\\b)/i,/^(?:false\\b)/i,/^(?:xml\\b)/i,/^(?:version\\b)/i,/^(?:encoding\\b)/i,/^(?:\\+)/i,/^(?:-)/i,/^(?:\\*)/i,/^(?:\\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\\|\\|)/i,/^(?:!)/i,/^(?:\\?)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\\.)/i,/^(?:\\()/i,/^(?:\\))/i,/^(?:\\{)/i,/^(?:\\})/i,/^(?:\\[)/i,/^(?:\\])/i,/^(?:(([0-9]+\\.[0-9]*)|(\\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_ñÑáÁéÉíÍóÓ][a-zA-Z0-9_ñÑáÁéÉíÍóÓ]*)/i,/^(?:(\"((\\\\([\\'\\\"\\\\bfnrtv]))|([^\\\"\\\\]+))*\"))/i,/^(?:('((\\\\([\\'\\\"\\\\bfnrtv]))|([^\\'\\\\]))'))/i,/^(?:.)/i,/^(?:$)/i],\nconditions: {\"comment\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true},\"INITIAL\":{\"rules\":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = gramatica;\nexports.Parser = gramatica.Parser;\nexports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar gramaticaDesc = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,6],$V2=[1,11],$V3=[6,7],$V4=[14,22],$V5=[2,12],$V6=[1,15],$V7=[2,15],$V8=[1,30],$V9=[1,37],$Va=[1,28],$Vb=[1,27],$Vc=[1,35],$Vd=[1,25],$Ve=[1,26],$Vf=[1,29],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[1,36],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[1,50],$Vx=[1,51],$Vy=[1,52],$Vz=[1,53],$VA=[1,54],$VB=[1,55],$VC=[1,56],$VD=[7,9,11,12,17,22,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],$VE=[1,64];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"START\":3,\"ENCODING\":4,\"RAIZ\":5,\"EOF\":6,\"lt\":7,\"interC\":8,\"xml\":9,\"version\":10,\"asig\":11,\"StringLiteral\":12,\"encoding\":13,\"gt\":14,\"OBJETO\":15,\"OBJETOPRIN\":16,\"identifier\":17,\"LATRIBUTOS\":18,\"OBJETOSEC\":19,\"LISTA_ID_OBJETO\":20,\"OBJETOTER\":21,\"div\":22,\"ATRIBUTO\":23,\"LISTA_VALORES\":24,\"IntegerLiteral\":25,\"DoubleLiteral\":26,\"CharLiteral\":27,\"CARACTERES\":28,\"plus\":29,\"minus\":30,\"times\":31,\"mod\":32,\"equal\":33,\"nequal\":34,\"and\":35,\"or\":36,\"not\":37,\"semicolon\":38,\"lparen\":39,\"rparen\":40,\"lcurly\":41,\"rcurly\":42,\"lbracket\":43,\"rbracket\":44,\"period\":45,\"coma\":46,\"lesst\":47,\"greatert\":48,\"ampersand\":49,\"apostro\":50,\"quotation\":51,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",6:\"EOF\",7:\"lt\",8:\"interC\",9:\"xml\",10:\"version\",11:\"asig\",12:\"StringLiteral\",13:\"encoding\",14:\"gt\",17:\"identifier\",22:\"div\",25:\"IntegerLiteral\",26:\"DoubleLiteral\",27:\"CharLiteral\",29:\"plus\",30:\"minus\",31:\"times\",32:\"mod\",33:\"equal\",34:\"nequal\",35:\"and\",36:\"or\",37:\"not\",38:\"semicolon\",39:\"lparen\",40:\"rparen\",41:\"lcurly\",42:\"rcurly\",43:\"lbracket\",44:\"rbracket\",45:\"period\",46:\"coma\",47:\"lesst\",48:\"greatert\",49:\"ampersand\",50:\"apostro\",51:\"quotation\"},\nproductions_: [0,[3,3],[4,11],[5,2],[5,0],[15,2],[16,3],[19,4],[19,2],[21,3],[21,3],[18,2],[18,0],[23,3],[20,2],[20,0],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n   \n            reportBNF.push(`<START> ::= <ENCODING> <RAIZ> EOF`);\n            reportBNF2.push('Start.val = Raiz.val. // Fin del documento');\n            this.$ = $$[$0-1];\n            return new SalidaGramatica(this.$, reportBNF, reportBNF2, $$[$0-2]);\n        \nbreak;\ncase 2:\n\n            reportBNF.push(`<ENCODING> ::= lt interC xml version asig StringLiteral encoding asig StringLiteral interC gt`);\n            reportBNF2.push('Encoding.val = StringLiteral'); \n            this.$ = $$[$0-2]; \n        \nbreak;\ncase 3:\n \n            reportBNF.push('<RAIZ> ::= <OBJETO> <RAIZ>');\n            reportBNF2.push('Raiz.val = Objeto.val.Concatenar(Raiz.Val])');\n            this.$ = $$[$0-1].concat($$[$0]);\n        \nbreak;\ncase 4:\n this.$ = [] \nbreak;\ncase 5:\n \n            reportBNF.push('<OBJETO> ::= lt <OBJETOPRIN>');\n            reportBNF2.push('OBJETO.val = [Objetoprin.val]');\n            this.$ = [$$[$0]] \n        \nbreak;\ncase 6:\n\n            let nuevo = null;\n            if ($$[$0].tipo === 0){\n                nuevo = new Objeto($$[$0-2], '', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], [], 0, $$[$0].id)\n            }else if ($$[$0].id !== \"\"){\n                if ($$[$0].lista !== null){\n                    nuevo = new Objeto($$[$0-2], '', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0].lista, 1, $$[$0].id)\n                }else if ($$[$0].texto !== \"\"){\n                    nuevo = new Objeto($$[$0-2], $$[$0].texto, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], [], 1, $$[$0].id)\n                }else{\n                    nuevo = new Objeto($$[$0-2], '', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], [], 1, $$[$0].id)\n                }\n                \n            }\n            reportBNF.push('<OBJETOPRIN> ::= identifier <LATRIBUTOS> <OBJETOSEC>')\n            reportBNF2.push('Objetoprin.val = new Objeto(id, texto, linea, columna, atributos, objetos, completo, cierre)')\n            this.$ = nuevo\n        \nbreak;\ncase 7:\n\n            reportBNF.push('<OBJETOSEC> ::= gt <LISTA_ID_OBJETO> lt <OBJETOTER>')\n            reportBNF2.push('Objetosec.val = Objetoter.val')\n            if ($$[$0].id !== \"\"){\n                if($$[$0-2] !== \"\") { $$[$0].texto = $$[$0-2] }\n                this.$ = $$[$0]\n            }\n        \nbreak;\ncase 8:\n\n            reportBNF.push('<OBJETOSEC> ::= div gt')\n            reportBNF2.push('Objetosec.val = {texto: vacio, lista: vacia: id: vacio, tipo: simple}')\n            this.$ = {texto: '', lista: null, id: '', tipo: 0}\n        \nbreak;\ncase 9:\n\n            reportBNF.push('<OBJETOTER> ::= div identifier gt')\n            reportBNF2.push('Objetoter = {texto: vacio, lista: vacia, id: identifier, tipo: doble}')\n            this.$ = {texto: '', lista: null, id: $$[$0-1], tipo: 1}\n        \nbreak;\ncase 10:\n\n            reportBNF.push('<OBJETOTER> ::= <OBJETOPRIN> lt <OBJETOTER>')\n            if($$[$0].id !== \"\"){\n                if ($$[$0-2] instanceof Objeto){\n                    if ($$[$0].lista === null){\n                        reportBNF2.push('Objetoter.val = {texto: vacio, lista: [Objetoprin.val], id: Objetoter.val, tipo: doble}}')\n                        this.$ = {texto: '', lista: [$$[$0-2]], id: $$[$0].id, tipo: 1}\n                    }else{\n                        reportBNF2.push('Objetoter.lista.agregarAlInicio(Objetoprin.val); Objetoter.val = {texto: vacio, lista: Objetoter.val, id: Objetoter.val, tipo: doble}}')\n                        $$[$0].lista.unshift($$[$0-2])\n                        this.$ = {texto: '', lista: $$[$0].lista, id: $$[$0].id, tipo: 1}\n                    }\n                }else if($$[$0-2] === null) { \n                    reportBNF2.push('Objetoter.val = Objetoter.val')\n                    this.$ === $$[$0] \n                }\n            }\n        \nbreak;\ncase 11:\n \n            reportBNF.push('<LATRIBUTOS> ::= <ATRIBUTOS> <LATRIBUTOS>');\n            reportBNF2.push('Latributos.val.agregar(Atributo.val)');\n            this.$ = $$[$0-1].concat($$[$0])\n        \nbreak;\ncase 12:\n \n            reportBNF.push('<LATRIBUTOS> ::= epsilon');\n            reportBNF2.push('Latributos.val = [] ');\n            this.$ = [];\n        \nbreak;\ncase 13:\n   \n            reportBNF.push('<ATRIBUTO> ::= identifier asig StringLiteral');\n            reportBNF2.push('Atributo.val = [new Atributo(id, valor, fila, columna)]');\n            this.$ = [new Atributo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)]\n        \nbreak;\ncase 14:\n\n            reportBNF.push('<LISTA_ID_OBJETO> ::= <LISTA_VALORES> <LISTA_ID_OBJETO>');\n            reportBNF2.push('Lista_id_objeto.val = Lista_valores.val + \\\" \\\" + Lista_id_objeto.val');\n            this.$ = $$[$0-1] + \" \" +  $$[$0];\n        \nbreak;\ncase 15:\n   \n            reportBNF.push('<LISTA_ID_OBJETO> ::= epsilon');\n            reportBNF2.push('Lista_id_objeto.val = \\\"\\\"');\n            this.$ = \"\";\n        \nbreak;\ncase 16:\n\n            reportBNF.push('<LISTA_VALORES> ::= IntegerLiteral');\n            reportBNF2.push('Lista_valores.val = IntegerLiteral');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 17:\n \n            reportBNF.push('<LISTA_VALORES> ::= DoubleLiteral');\n            reportBNF2.push('Lista_valores.val = DoubleLiteral');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 18:\n \n            reportBNF.push('<LISTA_VALORES> ::= identifier');\n            reportBNF2.push('Lista_valores.val = identifier');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 19:\n \n            reportBNF.push('<LISTA_VALORES> ::= StringLiteral');\n            reportBNF2.push('Lista_valores.val = StringLiteral');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 20:\n \n            reportBNF.push('<LISTA_VALORES> ::= CharLiteral');\n            reportBNF2.push('Lista_valores.val = CharLiteral');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 21:\n \n            reportBNF.push('<LISTA_VALORES> ::= xml');\n            reportBNF2.push('Lista_valores.val = xml');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 22:\n \n            reportBNF.push('<LISTA_VALORES> ::= <CARACTERES>');\n            reportBNF2.push('Lista_valores.val = Caracteres.val');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 23: case 24:\n \n            reportBNF.push('<CARACTERES> ::= plus');\n            reportBNF2.push('Caracteres.val = plus');\n            this.$ = $$[$0];\n        \nbreak;\ncase 25:\n \n            reportBNF.push('<CARACTERES> ::= times');\n            reportBNF2.push('Caracteres.val = times');\n            this.$ = $$[$0];\n        \nbreak;\ncase 26:\n \n            reportBNF.push('<CARACTERES> ::= div');\n            reportBNF2.push('Caracteres.val = div');\n            this.$ = $$[$0];\n        \nbreak;\ncase 27:\n \n            reportBNF.push('<CARACTERES> ::= mod');\n            reportBNF2.push('Caracteres.val = mod');\n            this.$ = $$[$0];\n        \nbreak;\ncase 28:\n \n            reportBNF.push('<CARACTERES> ::= asign');\n            reportBNF2.push('Caracteres.val = asign');\n            this.$ = $$[$0];\n        \nbreak;\ncase 29:\n \n            reportBNF.push('<CARACTERES> ::= equal');\n            reportBNF2.push('Caracteres.val = equal');\n            this.$ = $$[$0];\n        \nbreak;\ncase 30:\n \n            reportBNF.push('<CARACTERES> ::= nequal');\n            reportBNF2.push('Caracteres.val = nequal');\n            this.$ = $$[$0];\n        \nbreak;\ncase 31:\n \n            reportBNF.push('<CARACTERES> ::= and');\n            reportBNF2.push('Caracteres.val = and');\n            this.$ = $$[$0];\n        \nbreak;\ncase 32:\n \n            reportBNF.push('<CARACTERES> ::= or');\n            reportBNF2.push('Caracteres.val = or');\n            this.$ = $$[$0];\n        \nbreak;\ncase 33:\n \n            reportBNF.push('<CARACTERES> ::= not');\n            reportBNF2.push('Caracteres.val = not');\n            this.$ = $$[$0];\n        \nbreak;\ncase 34:\n \n            reportBNF.push('<CARACTERES> ::= semicolon');\n            reportBNF2.push('Caracteres.val = semicolon');\n            this.$ = $$[$0];\n        \nbreak;\ncase 35:\n \n            reportBNF.push('<CARACTERES> ::= lparen');\n            reportBNF2.push('Caracteres.val = lparen');\n            this.$ = $$[$0];\n        \nbreak;\ncase 36:\n \n            reportBNF.push('<CARACTERES> ::= rparen');\n            reportBNF2.push('Caracteres.val = rparen');\n            this.$ = $$[$0];\n        \nbreak;\ncase 37:\n \n            reportBNF.push('<CARACTERES> ::= lcurly');\n            reportBNF2.push('Caracteres.val = lcurly');\n            this.$ = $$[$0];\n        \nbreak;\ncase 38:\n \n            reportBNF.push('<CARACTERES> ::= rcurly');\n            reportBNF2.push('Caracteres.val = rcurly');\n            this.$ = $$[$0];\n        \nbreak;\ncase 39:\n \n            reportBNF.push('<CARACTERES> ::= lbracket');\n            reportBNF2.push('Caracteres.val = lbracket');\n            this.$ = $$[$0];\n        \nbreak;\ncase 40:\n \n            reportBNF.push('<CARACTERES> ::= rbracket');\n            reportBNF2.push('Caracteres.val = rbracket');\n            this.$ = $$[$0];\n        \nbreak;\ncase 41:\n \n            reportBNF.push('<CARACTERES> ::= period');\n            reportBNF2.push('Caracteres.val = period');\n            this.$ = $$[$0];\n        \nbreak;\ncase 42:\n \n            reportBNF.push('<CARACTERES> ::= coma');\n            reportBNF2.push('Caracteres.val = coma');\n            this.$ = $$[$0];\n        \nbreak;\ncase 43:\n \n            reportBNF.push('<CARACTERES> ::= lesst');\n            reportBNF2.push('Caracteres.val = >');\n            this.$ = '<';\n        \nbreak;\ncase 44:\n \n            reportBNF.push('<CARACTERES> ::= greatert');\n            reportBNF2.push('Caracteres.val = >');\n            this.$ = '>';\n        \nbreak;\ncase 45:\n \n            reportBNF.push('<CARACTERES> ::= ampersand');\n            reportBNF2.push('Caracteres.val = &');\n            this.$ = '&';\n        \nbreak;\ncase 46:\n \n            reportBNF.push('<CARACTERES> ::= apostro');\n            reportBNF2.push('Caracteres.val = \\'');\n            this.$ = '\\'';\n        \nbreak;\ncase 47:\n \n            reportBNF.push('<CARACTERES> ::= quotation');\n            reportBNF2.push('Caracteres.val = \\\"');\n            this.$ = '\"';\n        \nbreak;\n}\n},\ntable: [{3:1,4:2,7:[1,3]},{1:[3]},{5:4,6:$V0,7:$V1,15:5},{8:[1,7]},{6:[1,8]},{5:9,6:$V0,7:$V1,15:5},{16:10,17:$V2},{9:[1,12]},{1:[2,1]},{6:[2,3]},o($V3,[2,5]),o($V4,$V5,{18:13,23:14,17:$V6}),{10:[1,16]},{14:[1,18],19:17,22:[1,19]},o($V4,$V5,{23:14,18:20,17:$V6}),{11:[1,21]},{11:[1,22]},o($V3,[2,6]),{7:$V7,9:$V8,11:$V9,12:$Va,17:$Vb,20:23,22:$Vc,24:24,25:$Vd,26:$Ve,27:$Vf,28:31,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC},{14:[1,57]},o($V4,[2,11]),{12:[1,58]},{12:[1,59]},{7:[1,60]},{7:$V7,9:$V8,11:$V9,12:$Va,17:$Vb,20:61,22:$Vc,24:24,25:$Vd,26:$Ve,27:$Vf,28:31,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC},o($VD,[2,16]),o($VD,[2,17]),o($VD,[2,18]),o($VD,[2,19]),o($VD,[2,20]),o($VD,[2,21]),o($VD,[2,22]),o($VD,[2,23]),o($VD,[2,24]),o($VD,[2,25]),o($VD,[2,26]),o($VD,[2,27]),o($VD,[2,28]),o($VD,[2,29]),o($VD,[2,30]),o($VD,[2,31]),o($VD,[2,32]),o($VD,[2,33]),o($VD,[2,34]),o($VD,[2,35]),o($VD,[2,36]),o($VD,[2,37]),o($VD,[2,38]),o($VD,[2,39]),o($VD,[2,40]),o($VD,[2,41]),o($VD,[2,42]),o($VD,[2,43]),o($VD,[2,44]),o($VD,[2,45]),o($VD,[2,46]),o($VD,[2,47]),o($V3,[2,8]),o([14,17,22],[2,13]),{13:[1,62]},{16:65,17:$V2,21:63,22:$VE},{7:[2,14]},{11:[1,66]},o($V3,[2,7]),{17:[1,67]},{7:[1,68]},{12:[1,69]},{14:[1,70]},{16:65,17:$V2,21:71,22:$VE},{8:[1,72]},o($V3,[2,9]),o($V3,[2,10]),{14:[1,73]},o($V3,[2,2])],\ndefaultActions: {8:[2,1],9:[2,3],61:[2,14]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n    const {Objeto} = require(\"../Expresiones/Objeto\");\n    const {Atributo} = require(\"../Expresiones/Atributo\");\n    const {SalidaGramatica} = require(\"../AST/SalidaGramatica\");\n\n    var reportBNF = [];\n    var reportBNF2 = [];\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip comments */\nbreak;\ncase 1:this.begin('comment');\nbreak;\ncase 2:this.popState();\nbreak;\ncase 3:/* skip comment content*/\nbreak;\ncase 4:/* skip whitespace */\nbreak;\ncase 5:return 47\nbreak;\ncase 6:return 48\nbreak;\ncase 7:return 49\nbreak;\ncase 8:return 50\nbreak;\ncase 9:return 51\nbreak;\ncase 10:return 'null';\nbreak;\ncase 11:return 'true';\nbreak;\ncase 12:return 'false';\nbreak;\ncase 13:return 9;\nbreak;\ncase 14:return 10;\nbreak;\ncase 15:return 13;\nbreak;\ncase 16:return 29;\nbreak;\ncase 17:return 30;\nbreak;\ncase 18:return 31;\nbreak;\ncase 19:return 22;\nbreak;\ncase 20:return 32;\nbreak;\ncase 21:return 'lte';\nbreak;\ncase 22:return 'gte';\nbreak;\ncase 23:return 7;\nbreak;\ncase 24:return 14;\nbreak;\ncase 25:return 11;\nbreak;\ncase 26:return 33;\nbreak;\ncase 27:return 34;\nbreak;\ncase 28:return 35;\nbreak;\ncase 29:return 36;\nbreak;\ncase 30:return 37;\nbreak;\ncase 31:return 8;\nbreak;\ncase 32:return 38;\nbreak;\ncase 33:return 46;\nbreak;\ncase 34:return 45;\nbreak;\ncase 35:return 39;\nbreak;\ncase 36:return 40;\nbreak;\ncase 37:return 41;\nbreak;\ncase 38:return 42;\nbreak;\ncase 39:return 43;\nbreak;\ncase 40:return 44;\nbreak;\ncase 41:return 26;\nbreak;\ncase 42:return 25;\nbreak;\ncase 43:return 17;\nbreak;\ncase 44:return 12;\nbreak;\ncase 45:return 27;\nbreak;\ncase 46:\n        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);\n    \nbreak;\ncase 47:return 6\nbreak;\n}\n},\nrules: [/^(?:\\/\\/.*)/i,/^(?:<!--)/i,/^(?:-->)/i,/^(?:.)/i,/^(?:\\s+)/i,/^(?:&lt;)/i,/^(?:&gt;)/i,/^(?:&amp;)/i,/^(?:&apos;)/i,/^(?:&quot;)/i,/^(?:null\\b)/i,/^(?:true\\b)/i,/^(?:false\\b)/i,/^(?:xml\\b)/i,/^(?:version\\b)/i,/^(?:encoding\\b)/i,/^(?:\\+)/i,/^(?:-)/i,/^(?:\\*)/i,/^(?:\\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\\|\\|)/i,/^(?:!)/i,/^(?:\\?)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\\.)/i,/^(?:\\()/i,/^(?:\\))/i,/^(?:\\{)/i,/^(?:\\})/i,/^(?:\\[)/i,/^(?:\\])/i,/^(?:(([0-9]+\\.[0-9]*)|(\\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_áÁéÉíÍóÓ][a-zA-Z0-9_ñÑ]*)/i,/^(?:(\"((\\\\([\\'\\\"\\\\bfnrtv]))|([^\\\"\\\\]+))*\"))/i,/^(?:('((\\\\([\\'\\\"\\\\bfnrtv]))|([^\\'\\\\]))'))/i,/^(?:.)/i,/^(?:$)/i],\nconditions: {\"comment\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true},\"INITIAL\":{\"rules\":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = gramaticaDesc;\nexports.Parser = gramaticaDesc.Parser;\nexports.parse = function () { return gramaticaDesc.parse.apply(gramaticaDesc, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","import { AST } from './AST/AST';\nimport { CST } from './AST/CST';\nimport { Entorno } from './AST/Entorno';\nimport { GramaticaBNF } from './AST/GramaticaBNF';\nimport { TablaSimbolos } from './AST/TablaSimbolos';\nimport { SalidaGramatica } from './AST/SalidaGramatica';\nimport { tError } from './Expresiones/tError';\n\nimport * as gramatica from './Gramatica/gramatica';\n\ninterface retorno {\n    tablaRep: any,\n    bnfRep: any,\n    cstRep: any,\n    encoding: any\n}\n\nexport class AnalizadorASCXML  {\n\n    public ejecutarCodigo(entrada: string): retorno {\n        const tabla: TablaSimbolos = new TablaSimbolos();\n        const salidaG = gramatica.parse(entrada);\n        const arbolCST = new CST(salidaG.objetos);\n\n        // TABLA SIMBOLOS\n        let reporteTabla = tabla.generarReporteTablaObjetos(salidaG.objetos); \n        // BNF\n        let gramBnf = new GramaticaBNF(salidaG.reporteBNF, salidaG.reporteBNF2);\n        let reporteBNF = gramBnf.getBNFReport();\n        // DOT CST\n        let reporteCST = arbolCST.generarArbolCST(salidaG.objetos); \n\n        let ret: retorno = {\n            tablaRep: reporteTabla,\n            bnfRep: reporteBNF,\n            cstRep: reporteCST,\n            encoding: salidaG.encoding\n        };\n\n        return ret;\n    }\n}","import { AST } from './AST/AST';\nimport { CST } from './AST/CST';\nimport { Entorno } from './AST/Entorno';\nimport { GramaticaBNF } from './AST/GramaticaBNF';\nimport { TablaSimbolos } from './AST/TablaSimbolos';\nimport { SalidaGramatica } from './AST/SalidaGramatica';\n\nimport * as gramatica from './Gramatica/gramaticaDesc';\nimport { RepositionScrollStrategy } from '@angular/cdk/overlay';\nimport { emitWarning } from 'process';\n\ninterface retorno {\n    tablaRep: any,\n    bnfRep: any,\n    cstRep: any,\n    encoding: any\n}\n\nexport class AnalizadorASCXML  {\n\n    public ejecutarCodigo(entrada: string): retorno {\n        const tabla: TablaSimbolos = new TablaSimbolos();\n        const salidaG = gramatica.parse(entrada);\n        const arbolCST = new CST(salidaG.objetos);\n\n        // TABLA SIMBOLOS\n        let reporteTabla = tabla.generarReporteTablaObjetos(salidaG.objetos); \n        // BNF\n        let gramBnf = new GramaticaBNF(salidaG.reporteBNF, salidaG.reporteBNF2);\n        let reporteBNF = gramBnf.getBNFReport();\n        // DOT CST\n        let reporteCST = arbolCST.generarArbolCST(salidaG.objetos); \n\n        let ret: retorno = {\n            tablaRep: reporteTabla,\n            bnfRep: reporteBNF,\n            cstRep: reporteCST,\n            encoding: salidaG.encoding\n        };\n\n        return ret;\n    }\n}","import Primitivo from \"../Expresiones/Primitivo\";\nimport Aritmetica from \"../Operaciones/Aritmeticas\";\nimport Logica from \"../Operaciones/Logica\";\n\ninterface ayudaGrafico {\n    valor: string\n    padre: string\n}\n\ninterface predicadoAyuda {\n    ex1: any,\n    ex2: any\n}\n\nexport class Arbol {\n\n    dot: string = \"\";\n    objetos: any = [];\n\n    constructor(objetos: any) {\n        this.objetos = objetos\n        this.dot = \"\";\n    }\n\n    crearGrafoAST(): string {\n        this.dot = \"digraph AST{\\n\";\n        this.dot += \"\\\"raiz\\\" [label = \\\"Raiz\\\"]\\n\";\n        \n        if(this.objetos.length > 1){\n            let i = 0;\n            while ( i < this.objetos.length ){\n                this.dot += `\\\"${i}\\\" [label = \\\"|\\\"]\\n`\n                this.dot += `\\\"raiz\\\" -> \\\"${i}\\\"\\n`;\n                this.dot += this.generarNodoAST(this.objetos[i], `${i}`); \n                if (i + 1 < this.objetos.length ) {\n                this.dot += this.generarNodoAST(this.objetos[i+1], `${i}`);\n                }\n                i += 2\n            }\n        }else{\n            this.objetos.forEach((objeto: any) => {\n                this.dot += this.generarNodoAST(objeto, 'raiz');\n            });\n        }\n        \n        this.dot += \"}\";\n        console.log(this.dot)\n        return this.dot;\n    }\n\n    generarNodoAST(objeto: any, padre: any): string {\n        var aux:string = \"\";\n        var izqID = `${objeto.linea.toString()}_${objeto.columna.toString()}I`;\n        var derID = `${objeto.linea.toString()}_${objeto.columna.toString()}D`;\n        \n        aux = `\\\"${izqID}\\\" [label = \\\"${objeto.estado}\\\"]\\n`;\n        aux += `\\\"${derID}\\\" [label = \\\"${objeto.identificador}\\\"]\\n`;\n\n        aux += `\\\"${padre}\\\" -> \\\"${izqID}\\\"\\n`;\n        aux += `\\\"${padre}\\\" -> \\\"${derID}\\\"\\n`;\n        \n        if (objeto.nodos.length > 0){\n            aux += this.generarNodoAST(objeto.nodos[0], izqID);\n        }\n\n        return aux;\n    }\n\n    crearGrafoCST():string {\n        this.dot = \"digraph AST {\\n\";\n        this.dot += \"\\\"raiz\\\" [label = \\\"Raiz\\\"]\\n\";\n        \n        if(this.objetos.length > 1){\n            let i = 0;\n            while ( i < this.objetos.length ){\n                this.dot += `\\\"${i}S\\\" [label = \\\"Separador\\\"]\\n`\n                this.dot += `\\\"${i}\\\" [label = \\\"|\\\"]\\n`\n                this.dot += `\\\"raiz\\\" -> \\\"${i}S\\\"\\n`;\n                this.dot += `\\\"${i}S\\\" -> \\\"${i}\\\"\\n`;\n                this.dot += this.generarNodoCST(this.objetos[i], `${i}`); \n                if (i + 1 < this.objetos.length ) {\n                this.dot += this.generarNodoCST(this.objetos[i+1], `${i}`);\n                }\n                i += 2\n            }\n        }else{\n            this.objetos.forEach((objeto: any) => {\n                this.dot += this.generarNodoCST(objeto, 'raiz');\n            });\n        }\n        this.dot += \"}\";\n        return this.dot;\n    }\n\n    generarNodoCST(objeto: any, padre: string):string {\n        var aux:string = \"\";\n        var izqID = `${objeto.linea.toString()}_${objeto.columna.toString()}I`;\n        var derID = `${objeto.linea.toString()}_${objeto.columna.toString()}D`;\n        var centroID = `${objeto.linea.toString()}_${objeto.columna.toString()}C`;\n\n        aux = `\\\"${izqID}\\\" [label = \\\"${objeto.estado}\\\"]\\n`;\n        aux += `\\\"${derID}\\\" [label = \\\"${objeto.identificador}\\\"]\\n`;\n        aux += `\\\"${centroID}\\\" [label = \\\"Nodo\\\"]\\n`;\n\n        aux += `\\\"${centroID}\\\" -> \\\"${izqID}\\\"\\n`;\n        aux += `\\\"${centroID}\\\" -> \\\"${derID}\\\"\\n`;\n        aux += `\\\"${padre}\\\" -> \\\"${centroID}\\\"\\n`;\n\n        if (objeto.nodos.length > 0){\n            aux += this.generarNodoCST(objeto.nodos[0], izqID);\n        }\n\n        return aux;\n    }\n\n    ejecutarArbol():string {\n        this.dot = \"\";\n        \n        if(this.objetos.length > 1){\n            for (let i = 0; i < this.objetos.length; i++){\n                this.dot += this.ejecutarNodoArbol(this.objetos[i]);\n                if (i != this.objetos.length - 1) { this.dot += \"|\"; }\n            }\n        }else{\n            this.dot += this.ejecutarNodoArbol(this.objetos[0])\n        }\n        \n        console.log(this.dot)\n        return this.dot\n    }\n\n    ejecutarNodoArbol(objeto: any):string {\n        var aux:string = objeto.estado + objeto.identificador;\n        \n        if (objeto.nodos.length > 0){\n            aux += this.ejecutarNodoArbol(objeto.nodos[0]);\n        }\n        \n        /*if (objeto.predicado !== null){\n            let ret = this.ejecutarPredicado(objeto.predicado.expresion)\n            aux += \"[\" + ret.ex1 + ret.ex2 + \"]\";\n        }*/\n\n        return aux\n    }\n\n    /*ejecutarPredicado(objeto: any):predicadoAyuda {\n        var expre1: any, expre2: any;\n        if (objeto.exp1 instanceof Primitivo) {\n            expre1 = this.ejecutarIzquierdo(objeto.exp1);\n            console.log(expre1)\n        }\n        if (objeto.exp2 instanceof Primitivo) {\n            expre2 = this.ejecutarDerecho(objeto.exp2);\n            console.log(expre2)\n        }\n        if (objeto.exp1 instanceof Primitivo == false && objeto.exp2 instanceof Primitivo == false) {\n            expre1 = this.ejecutarPredicado(objeto.exp1).ex1\n            expre2 = this.ejecutarPredicado(objeto.exp2).ex2\n            expre1 = expre1.getValor();\n            expre2 = expre2.getValor();\n            console.log(expre1)\n            console.log(expre2)\n        }\n\n        return {ex1: expre1, ex2: expre2}\n    }   \n\n    ejecutarIzquierdo(objeto: any): any {\n        return objeto.getValor();\n    }\n\n    ejecutarDerecho(objeto: any): any {\n        return objeto.getValor();\n    }\n\n    ejecutarAritmetica(objeto: any):any {\n\n    }*/\n}","interface retornoBNF {\n    no: number,\n    produccion: string\n    accion: string\n}\n\nexport class GramaticaBNF {\n\n    public reporte: any;\n    public reporte2: any;\n\n    constructor(repo: any, repo2: any) {\n        this.reporte = repo;\n        this.reporte2 = repo2;\n    }\n\n    getBNFReport(): retornoBNF[] {\n        let ret: retornoBNF[] = [];\n\n        for (let i = 0; i < this.reporte.length; i++) {\n            ret.push(this.generarBodyReporte(this.reporte[i], this.reporte2[i], i));\n        }\n\n        return ret\n    }\n\n    generarBodyReporte(object: any, object2: any, iterator: number): retornoBNF {\n        var fila: retornoBNF = {\n            no: iterator,\n            produccion: object,\n            accion: object2\n        }\n        return fila;\n    }\n\n}\n\n","export class SalidaGramatica {\n\n    public objetos: any;\n    public reporteBNF: any;\n    public reporteBNF2: any;\n\n    constructor(objetos: any, reporte: any, reporte2: any) {\n        this.objetos = objetos;\n        this.reporteBNF = reporte;\n        this.reporteBNF2 = reporte2;\n    }\n}","import { Predicate } from \"./Predicate\";\n\nexport class Nodo{\n\n    estado: string;\n    identificador:any;\n    predicado: Predicate;\n    nodos: Array<Nodo>;\n    linea: number;\n    columna: number;\n\n    constructor(estado:string, identificador:any, predicado: Predicate, nodos:Array<Nodo>, linea:number, columna:number) {\n        this.estado = estado;\n        this.identificador = identificador;\n        this.predicado = predicado;\n        this.nodos = nodos;\n        this.linea = linea;\n        this.columna = columna;\n    }\n}","import { Expresion } from \"../Operaciones/InterfazExpresion\";\n\nexport class Predicate {\n\n    expresion: Expresion; \n    linea: number;\n    columna: number;\n\n    constructor(expresion: Expresion, linea:number, columna:number) {\n        this.expresion = expresion;\n        this.linea = linea;\n        this.columna = columna;\n    }\n}","import { Expresion } from '../Operaciones/InterfazExpresion';\n\nexport default class Primitivo implements Expresion{\n\n    public primitivo: any; \n    public linea: number;\n    public columna: number;\n\n    /**\n     * @constructor creamos un nuevo primitivo\n     * @param primitivo hace referencia a los valores enteros, dobles, cadenas, caracteres, booleanos\n     * @param linea idica la linea donde se encuentra\n     * @param columna indica la columna donde se encuentra\n     */\n    constructor(primitivo: any, linea: number, columna: number) {\n        this.columna = columna;\n        this.linea = linea;\n        this.primitivo = primitivo;\n    }\n\n    getTipo() :any {\n        let valor = this.getValor();\n\n        if(typeof valor === 'number'){   \n            return \"numero\";\n        }else if(typeof valor === 'string'){\n            return \"string\";\n        }\n    }\n\n    /**\n     * @returns retorna el valor exacto del primitivo \n     */\n    getValor(): any {\n        return this.primitivo;\n    }\n}","import { Expresion } from '../Operaciones/InterfazExpresion';\n\nexport default class Aritmetica implements Expresion {\n\n    public exp1: Expresion;\n    public operador: string;\n    public exp2: Expresion;\n    public linea: any;\n    public columna: any;\n\n    public constructor(exp1, operador, exp2, linea, columna) {\n        this.exp1 = exp1;\n        this.operador = operador;\n        this.exp2 = exp2;\n        this.linea = linea;\n        this.columna = columna;\n    }\n\n    getTipo() : any{\n        let valor = this.getValor();\n\n        if(typeof valor === 'number'){   \n            return \"numero\";\n        }else if(typeof valor === 'string'){\n            return \"string\";\n        }\n    }\n\n    getValor():any { \n        let valor_exp1 = this.exp1.getValor();\n        let valor_exp2 = this.exp2.getValor();\n\n\n        switch (this.operador) {\n            case \"+\":\n                if(typeof valor_exp1 === 'number'){\n                    if(typeof valor_exp2 === 'number'){\n                        return valor_exp1 + valor_exp2;\n                    }\n                }\n                break;\n            case \"-\":\n                if(typeof valor_exp1 == 'number'){\n                    if (typeof valor_exp2 == \"number\"){\n                        return valor_exp1 - valor_exp2;\n                    }\n                }\n                break;\n            case \"*\":\n                if(typeof valor_exp1 === 'number'){\n                    if(typeof valor_exp2 === 'number'){\n                        return valor_exp1 * valor_exp2;\n                    }\n                }\n                break;\n            case \"/\":\n                    if(typeof valor_exp1 === 'number'){\n                        if(typeof valor_exp2 === 'number'){\n                            if (valor_exp2 != 0){\n                                return valor_exp1 / valor_exp2;\n                            }\n                        }\n                    }\n                    break;  \n            case \"%\":\n                if(typeof valor_exp1 === 'number'){\n                    if(typeof valor_exp2 === 'number'){\n                        if (valor_exp2 != 0){\n                            return valor_exp1 % valor_exp2;\n                        }\n                    }\n                }\n                break;  \n            default:\n                return \"\";\n                break;\n        }\n    }\n}","import { Expresion } from \"../Operaciones/InterfazExpresion\";\n\nexport default class Logica /*extends Operacion*/ implements Expresion{\n    \n    public exp1: Expresion;\n    public operador: string;\n    public exp2: Expresion;\n    public linea: any;\n    public columna: any;\n\n    public constructor(exp1: Expresion, operador: string, exp2: Expresion, linea: number, columna:number) {\n        this.exp1 = exp1;\n        this.operador = operador;\n        this.exp2 = exp2;\n        this.linea = linea;\n        this.columna = columna;\n    }\n\n    getTipo(/*controlador: Controlador, ts: TablaSimbolos*/) : any{\n        return \"\"\n    }\n    \n    getValor(/*Controlador: Controlador, TablaSimbolos: TablaSimbolos*/): any {\n        return this.exp1.getValor() + \" \" + this.operador + \" \" + this.exp2.getValor();\n    }\n    \n\n    /*\n    recorrer(): Nodo {\n        throw new Error(\"Method not implemented.\");\n    }*/\n    \n}","import { Expresion } from \"../Operaciones/InterfazExpresion\";\n\nexport default class Relacional /*extends Operacion*/ implements Expresion{\n    \n    public exp1: Expresion;\n    public operador: string;\n    public exp2: Expresion;\n    public linea: any;\n    public columna: any;\n\n    public constructor(exp1: Expresion, operador: string, exp2: Expresion, linea: number, columna:number) {\n        this.exp1 = exp1;\n        this.operador = operador;\n        this.exp2 = exp2;\n        this.linea = linea;\n        this.columna = columna;\n    }\n\n    getTipo(/*controlador: Controlador, ts: TablaSimbolos*/) : any{\n        return \"\"\n    }\n    \n    getValor(/*Controlador: Controlador, TablaSimbolos: TablaSimbolos*/): any {\n        return this.exp1.getValor() + \" \" + this.operador + \" \" + this.exp2.getValor();\n    }\n    \n\n    /*\n    recorrer(): Nodo {\n        throw new Error(\"Method not implemented.\");\n    }*/\n    \n}","import { SalidaGramatica } from './AST/SalidaGramatica';\nimport { Nodo } from './Expresiones/Nodo';\nimport { GramaticaBNF } from './AST/GramaticaBNF';\nimport { Arbol } from './AST/Arbol';\nimport Primitivo from './Expresiones/Primitivo';\nimport Aritmetica from './Operaciones/Aritmeticas';\nimport Relacional from './Operaciones/Relacional';\nimport Logica from './Operaciones/Logica';\n\nimport * as gramatica from './xpathAsc';\n\ninterface retorno {\n    objetos: Nodo[],\n    bnfRep: any,\n    astRep: any,\n    cstRep: any,\n    ejecutado: any\n}\n\nexport class AnalizadosAscXpath {\n    \n    public ejecutarCodigo(entrada: string): retorno {\n\n        const salidaG = gramatica.parse(entrada);\n        const gramBnf = new GramaticaBNF(salidaG.reporteBNF, salidaG.reporteBNF2);\n        const arbol = new Arbol(salidaG.objetos);\n\n        console.log(salidaG.objetos)\n\n        let reporteBNF = gramBnf.getBNFReport();\n        let reporteAST = arbol.crearGrafoAST();\n        let reporteCST = arbol.crearGrafoCST();\n        let resultado = arbol.ejecutarArbol();\n\n        return {\n            objetos: salidaG.objetos,\n            bnfRep: reporteBNF,\n            astRep: reporteAST,\n            cstRep: reporteCST,\n            ejecutado: resultado\n        };\n    }\n}","import { SalidaGramatica } from './AST/SalidaGramatica';\nimport { Nodo } from './Expresiones/Nodo';\nimport { GramaticaBNF } from './AST/GramaticaBNF';\nimport { Arbol } from './AST/Arbol';\nimport Primitivo from './Expresiones/Primitivo';\nimport Aritmetica from './Operaciones/Aritmeticas';\nimport Relacional from './Operaciones/Relacional';\nimport Logica from './Operaciones/Logica';\n\nimport * as gramatica from './xpathDesc';\n\ninterface retorno {\n    objetos: Nodo[],\n    bnfRep: any,\n    astRep: any,\n    cstRep: any,\n    ejecutado: any\n}\n\nexport class AnalizadosAscXpath {\n    public ejecutarCodigo(entrada: string): retorno {\n\n        const salidaG = gramatica.parse(entrada);\n        const gramBnf = new GramaticaBNF(salidaG.reporteBNF, salidaG.reporteBNF2);\n        const arbol = new Arbol(salidaG.objetos);\n\n        console.log(salidaG.objetos)\n\n        let reporteBNF = gramBnf.getBNFReport();\n        let reporteAST = arbol.crearGrafoAST();\n        let reporteCST = arbol.crearGrafoCST();\n        let resultado = arbol.ejecutarArbol();\n\n        return {\n            objetos: salidaG.objetos,\n            bnfRep: reporteBNF,\n            astRep: reporteAST,\n            cstRep: reporteCST,\n            ejecutado: resultado\n        };\n    }\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar xpathAsc = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[5,6],$V6=[1,12],$V7=[5,6,14],$V8=[2,39],$V9=[1,14],$Va=[1,17],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,24],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[1,35],$Vr=[8,12,16,17,20,23,26,27,28,29,30,31,32,33,34,35,36],$Vs=[2,13],$Vt=[1,47],$Vu=[1,51],$Vv=[1,46],$Vw=[1,44],$Vx=[1,45],$Vy=[1,48],$Vz=[1,49],$VA=[1,50],$VB=[1,60],$VC=[1,59],$VD=[1,61],$VE=[1,81],$VF=[1,79],$VG=[1,80],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[16,19,40,41,42,43,44,45,46,47,48,49,50,51,52],$VS=[5,6,14,16,19,40,41,42,43,44,45,46,47,48,49,50,51,52],$VT=[1,134],$VU=[1,132],$VV=[1,133],$VW=[1,135],$VX=[16,19,40,43,44,45,46,47,48,49,50,51,52],$VY=[19,40,44,45,46,47,48,49,50,51,52],$VZ=[19,40,44,49,50,51,52];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"INICIOPURO\":3,\"INICIO\":4,\"EOF\":5,\"tk_barra\":6,\"INICIALES\":7,\"tk_punto\":8,\"DIAGONALES\":9,\"DERIVADOSLIMITADO\":10,\"DERIVACIONDIAGONAL\":11,\"tk_identificador\":12,\"PREDICATE\":13,\"tk_diagonal\":14,\"DERIVADOS\":15,\"tk_asterisco\":16,\"tk_node\":17,\"tk_parA\":18,\"tk_parC\":19,\"tk_arroba\":20,\"ATRIBUTO\":21,\"AXES\":22,\"tk_child\":23,\"tk_dosPuntos\":24,\"NODETEST\":25,\"tk_descendant\":26,\"tk_descendatOr\":27,\"tk_ancestor\":28,\"tk_ancestorOr\":29,\"tk_attribute\":30,\"tk_following\":31,\"tk_followingSi\":32,\"tk_parent\":33,\"tk_preceding\":34,\"tk_precedingSi\":35,\"tk_self\":36,\"tk_text\":37,\"tk_llaveA\":38,\"EXPRESION\":39,\"tk_llaveC\":40,\"tk_mas\":41,\"tk_menos\":42,\"tk_div\":43,\"tk_mod\":44,\"tk_menor\":45,\"tk_mayor\":46,\"tk_menorIgual\":47,\"tk_mayorIgual\":48,\"tk_igual\":49,\"tk_distinto\":50,\"tk_or\":51,\"tk_and\":52,\"tk_entero\":53,\"tk_decimal\":54,\"tk_position\":55,\"tk_last\":56,\"tk_stringTexto\":57,\"tk_ParC\":58,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",6:\"tk_barra\",8:\"tk_punto\",12:\"tk_identificador\",14:\"tk_diagonal\",16:\"tk_asterisco\",17:\"tk_node\",18:\"tk_parA\",19:\"tk_parC\",20:\"tk_arroba\",23:\"tk_child\",24:\"tk_dosPuntos\",26:\"tk_descendant\",27:\"tk_descendatOr\",28:\"tk_ancestor\",29:\"tk_ancestorOr\",30:\"tk_attribute\",31:\"tk_following\",32:\"tk_followingSi\",33:\"tk_parent\",34:\"tk_preceding\",35:\"tk_precedingSi\",36:\"tk_self\",37:\"tk_text\",38:\"tk_llaveA\",40:\"tk_llaveC\",41:\"tk_mas\",42:\"tk_menos\",43:\"tk_div\",44:\"tk_mod\",45:\"tk_menor\",46:\"tk_mayor\",47:\"tk_menorIgual\",48:\"tk_mayorIgual\",49:\"tk_igual\",50:\"tk_distinto\",51:\"tk_or\",52:\"tk_and\",53:\"tk_entero\",54:\"tk_decimal\",55:\"tk_position\",56:\"tk_last\",57:\"tk_stringTexto\",58:\"tk_ParC\"},\nproductions_: [0,[3,2],[4,3],[4,1],[7,4],[7,3],[7,3],[7,4],[7,3],[7,5],[9,1],[9,2],[11,3],[11,0],[10,2],[10,2],[10,4],[10,2],[10,1],[15,1],[15,2],[15,1],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[25,2],[25,4],[25,2],[25,3],[13,3],[13,0],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,1],[39,1],[39,2],[39,1],[39,3],[39,3],[39,1],[39,3],[21,1],[21,1],[21,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n            produccion.push('<INICIOPURO> ::= <INICIO> EOF');\n            accion.push('INICIOPURO.Val = INICIO.val //fin del documento');\n            return new SalidaGramatica($$[$0-1], produccion, accion);\n        \nbreak;\ncase 2:\n \n            produccion.push('<INICIO> ::= <INICIO> | <INICIALES>');\n            accion.push('INICIO.Val = INICIO.push(INICIALES)');\n            //this.$ = new Array();\n            this.$.push($$[$0]); \n        \nbreak;\ncase 3:\n\n            produccion.push('<INICIO> ::= <INICIALES>');\n            accion.push('INICIO.Val = INICIALES.Val');\n            this.$ = [$$[$0]]; \n        \nbreak;\ncase 4:\n\n            produccion.push(`<INICIALES> ::= punto <DIAGONALES> <DERIVADOSLIMITADO> <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", \".\", null, [new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-3].first_line, _$[$0-3].first_column)], _$[$0-3].first_line, _$[$0-3].first_column);\n        \nbreak;\ncase 5:\n\n            produccion.push(`<INICIALES> ::= identificador <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo(\"\", $$[$0-2], $$[$0-1], [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 6:\n\n            produccion.push(`<INICIALES> ::= / <DERIVADOS> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 7:\n\n            produccion.push('<INICIALES> ::= // <DERIVADOS> <DERIVACIONDIAGONAL>');\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo(\"//\", $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-3].first_line, _$[$0-3].first_column)\n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 8:\n\n            produccion.push(`<INICIALES> ::= asterisco <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo(\"\", $$[$0-2], $$[$0-1], [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 9:\n\n            produccion.push(`<INICIALES> ::= node() <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo(\"\", \"node()\", $$[$0-1], [...$$[$0-2]], _$[$0-4].first_line, _$[$0-4].first_column)\n            //this.$.push(...$$[$0-2])\n        \nbreak;\ncase 10:\n\n            produccion.push('<DIAGONALES> ::= /');\n            accion.push('DIAGONALES.Val = \\\"/\\\"'); \n            this.$ = $$[$0] \n        \nbreak;\ncase 11:\n\n            produccion.push(`<DIAGONALES> ::= //`);\n            accion.push('DIAGONALES.Val = \\\"//\\\"'); \n            this.$ = \"//\" \n        \nbreak;\ncase 12:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= <DIAGONALES> <DERIVADOS> <DERIVACIONDIAGONAL>`);\n            accion.push('DERIVACIONDIAGONAL.Val = []; DERIVACIONDIAGONAL.Val.push(new Nodo(tipo, id, predicado, fila, columna)); DERIVACIONDIAGONAL.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Array();\n            this.$.push(new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)) \n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 13:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= epsilon`);\n            accion.push('DERIVACIONDIAGONAL.Val = [/*Vacio*/]');\n            this.$ = [];\n        \nbreak;\ncase 14:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= identificador <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = identificador + PREDICATE.Val'); \n            this.$ = {val: $$[$0-1], pre: $$[$0]};\n        \nbreak;\ncase 15:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= asterisco <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"*\\\" + PREDICATE.Val'); \n            this.$ = {val: $$[$0-1], pre: $$[$0]};\n        \nbreak;\ncase 16:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= node() <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: \"node()\", pre: $$[$0]}\n        \nbreak;\ncase 17:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= arroba <ATRIBUTO>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: $$[$0-1] + \"\" + $$[$0], pre: null}; \n        \nbreak;\ncase 18:\n\n            produccion.push(`<DERIVADOSLIMITADO> ::= <AXES>`);\n            accion.push('DERIVADOSLIMITADO.Val = AXES.Val'); \n            this.$ = {val: $$[$0], pre: null}\n        \nbreak;\ncase 19:\n \n            produccion.push(`<DERIVADOS> ::= punto`);\n            accion.push(\"DERIVADOS.Val = \\\".\\\" \");\n            this.$ = {val: $$[$0], pre: null}; \n        \nbreak;\ncase 20:\n\n            produccion.push(`<DERIVADOS> ::= doblePunto`);\n            accion.push('DERIVADOS.Val = \\\"..\\\"');\n            this.$ = {val: \"..\", pre: null}; \n        \nbreak;\ncase 21:\n \n            produccion.push(`<DERIVADOS> ::= <DERIVADOSLIMITADO>`);\n            accion.push('DERIVADOS.Val = DERIVADOSLIMITADO.Val'); \n            this.$ = $$[$0]; \n        \nbreak;\ncase 38:\n\n            produccion.push(`<PREDICATE> ::= llaveA <EXPRESION> llaveC`);\n            accion.push('PREDICATE.Val = EXPRESION.Val');\n            this.$ = new Predicate($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 39:\n\n            produccion.push(`<PREDICATE> ::= epsilon`);\n            accion.push('PREDICATE.Val = /*vacio*/');\n            this.$ = null; \n        \nbreak;\ncase 40:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> mas <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 41:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> menos <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val - EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 42:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> asterisco <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val * EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 43:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> div <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val / EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 44:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> mod <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val % EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 45:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> menor <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"<\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 46:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> mayor <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\">\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 47:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> menorIgual <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"<=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 48:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> mayorIgual <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\">=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 49:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> igual <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 50:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> distinto <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \"\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 51:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> or <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"or\\\" + EXPRESION.Val');\n            this.$ = new Logica.default($$[$0-2], 'or', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 52:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> and <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"and\\\" + EXPRESION.Val');\n            this.$ = new Logica.default($$[$0-2], 'and', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 53:\n\n            produccion.push(`<EXPRESION> ::= entero`);\n            accion.push('EXPRESION.Val = \\\"entero\\\"');\n            this.$ = new Primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 54:\n\n            produccion.push(`<EXPRESION> ::= decimal`);\n            accion.push('EXPRESION.Val = \\\"decimal\\\"');\n            this.$ = new Primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 55:\n\n            produccion.push(`<EXPRESION> ::= arroba <ATRIBUTO>`);\n            accion.push('EXPRESION.Val = \\\"@\\\" + ATRIBUTO.Val');\n            this.$ = new Primitivo.default(`this._${$$[$0]}`, _$[$0-1].first_line, _$[$0-1].first_column)\n        \nbreak;\ncase 56:\n\n            produccion.push(`<EXPRESION> ::= identificador`);\n            accion.push('EXPRESION.Val = \\\"identificador\\\"');\n            this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 57:\n\n            produccion.push(`<EXPRESION> ::= position()`);\n            accion.push('EXPRESION.Val = \\\"position()\\\"');\n            this.$ = new Primitivo.default(\"position()\", _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 58:\n\n            produccion.push(`<EXPRESION> ::= last()`);\n            accion.push('EXPRESION.Val = \\\"last()\\\"');\n            this.$ = new Primitivo.default(\"last()\", _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 59:\n\n            produccion.push(`<EXPRESION> ::= texto`);\n            accion.push('EXPRESION.Val = \\\"texto\\\"');\n            this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 60:\n\n            produccion.push(`<EXPRESION> ::= ( <EXPRESION> )`);\n            accion.push('EXPRESION.Val = EXPRESION1.Val');\n            this.$ = new Primitivo.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 61:\n\n            produccion.push(`<ATRIBUTO> ::= asterisco`);\n            accion.push('ATRIBUTO.Val = \\\"*\\\"'); \n            this.$ = $$[$0]; \n        \nbreak;\ncase 62:\n\n            produccion.push(`<ATRIBUTO> ::= identificador`);\n            accion.push('ATRIBUTO.Val = identificador');  \n            this.$ = $$[$0] \nbreak;\ncase 63:\n\n            produccion.push(`<ATRIBUTO> ::= node`);\n            accion.push('ATRIBUTO.Val = \\\"node()\\\"'); \n            this.$ = \"node()\"\n        \nbreak;\n}\n},\ntable: [{3:1,4:2,7:3,8:$V0,12:$V1,14:$V2,16:$V3,17:$V4},{1:[3]},{5:[1,9],6:[1,10]},o($V5,[2,3]),{9:11,14:$V6},o($V7,$V8,{13:13,38:$V9}),{8:$Va,10:18,12:$Vb,14:[1,16],15:15,16:$Vc,17:$Vd,20:$Ve,22:23,23:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},o($V7,$V8,{13:36,38:$V9}),{18:[1,37]},{1:[2,1]},{7:38,8:$V0,12:$V1,14:$V2,16:$V3,17:$V4},{10:39,12:$Vb,16:$Vc,17:$Vd,20:$Ve,22:23,23:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},o($Vr,[2,10],{14:[1,40]}),o($V5,$Vs,{11:41,9:42,14:$V6}),{12:$Vt,18:$Vu,20:$Vv,39:43,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},o($V5,$Vs,{9:42,11:52,14:$V6}),{8:$Va,10:18,12:$Vb,15:53,16:$Vc,17:$Vd,20:$Ve,22:23,23:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},o($V7,[2,19],{8:[1,54]}),o($V7,[2,21]),o($V7,$V8,{13:55,38:$V9}),o($V7,$V8,{13:56,38:$V9}),{18:[1,57]},{12:$VB,16:$VC,17:$VD,21:58},o($V7,[2,18]),{24:[1,62]},{24:[1,63]},{24:[1,64]},{24:[1,65]},{24:[1,66]},{24:[1,67]},{24:[1,68]},{24:[1,69]},{24:[1,70]},{24:[1,71]},{24:[1,72]},{24:[1,73]},o($V5,$Vs,{9:42,11:74,14:$V6}),{19:[1,75]},o($V5,[2,2]),o($V5,$Vs,{9:42,11:76,14:$V6}),o($Vr,[2,11]),o($V5,[2,5]),{8:$Va,10:18,12:$Vb,15:77,16:$Vc,17:$Vd,20:$Ve,22:23,23:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{16:$VE,40:[1,78],41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ},o($VR,[2,53]),o($VR,[2,54]),{12:$VB,16:$VC,17:$VD,21:92},o($VR,[2,56]),{18:[1,93]},{18:[1,94]},o($VR,[2,59]),{12:$Vt,18:$Vu,20:$Vv,39:95,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},o($V5,[2,6]),o($V5,$Vs,{9:42,11:96,14:$V6}),o($V7,[2,20]),o($V7,[2,14]),o($V7,[2,15]),{19:[1,97]},o($V7,[2,17]),o($VS,[2,61]),o($VS,[2,62]),{18:[1,98]},{24:[1,99]},{24:[1,100]},{24:[1,101]},{24:[1,102]},{24:[1,103]},{24:[1,104]},{24:[1,105]},{24:[1,106]},{24:[1,107]},{24:[1,108]},{24:[1,109]},{24:[1,110]},o($V5,[2,8]),o($V7,$V8,{13:111,38:$V9}),o($V5,[2,4]),o($V5,$Vs,{9:42,11:112,14:$V6}),o($V7,[2,38]),{12:$Vt,18:$Vu,20:$Vv,39:113,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:114,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:115,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:116,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:117,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:118,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:119,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:120,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:121,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:122,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:123,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:124,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{12:$Vt,18:$Vu,20:$Vv,39:125,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},o($VR,[2,55]),{19:[1,126]},{19:[1,127]},{16:$VE,19:[1,128],41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ},o($V5,[2,7]),o($V7,$V8,{13:129,38:$V9}),{58:[1,130]},{12:$VT,16:$VU,17:$VV,25:131,37:$VW},{12:$VT,16:$VU,17:$VV,25:136,37:$VW},{12:$VT,16:$VU,17:$VV,25:137,37:$VW},{12:$VT,16:$VU,17:$VV,25:138,37:$VW},{12:$VT,16:$VU,17:$VV,25:139,37:$VW},{12:$VT,16:$VU,17:$VV,25:140,37:$VW},{12:$VT,16:$VU,17:$VV,25:141,37:$VW},{12:$VT,16:$VU,17:$VV,25:142,37:$VW},{12:$VT,16:$VU,17:$VV,25:143,37:$VW},{12:$VT,16:$VU,17:$VV,25:144,37:$VW},{12:$VT,16:$VU,17:$VV,25:145,37:$VW},{12:$VT,16:$VU,17:$VV,25:146,37:$VW},o($V5,$Vs,{9:42,11:147,14:$V6}),o($V5,[2,12]),o($VR,[2,40]),o($VR,[2,41]),o($VX,[2,42],{41:$VF,42:$VG}),o($VX,[2,43],{41:$VF,42:$VG}),o([19,40,44],[2,44],{16:$VE,41:$VF,42:$VG,43:$VH,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ}),o($VY,[2,45],{16:$VE,41:$VF,42:$VG,43:$VH}),o($VY,[2,46],{16:$VE,41:$VF,42:$VG,43:$VH}),o($VY,[2,47],{16:$VE,41:$VF,42:$VG,43:$VH}),o($VY,[2,48],{16:$VE,41:$VF,42:$VG,43:$VH}),o($VZ,[2,49],{16:$VE,41:$VF,42:$VG,43:$VH,45:$VJ,46:$VK,47:$VL,48:$VM}),o($VZ,[2,50],{16:$VE,41:$VF,42:$VG,43:$VH,45:$VJ,46:$VK,47:$VL,48:$VM}),o([19,40,44,51],[2,51],{16:$VE,41:$VF,42:$VG,43:$VH,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,52:$VQ}),o([19,40,44,51,52],[2,52],{16:$VE,41:$VF,42:$VG,43:$VH,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO}),o($VR,[2,57]),o($VR,[2,58]),o($VR,[2,60]),o($V7,[2,16]),o($VS,[2,63]),o($V7,[2,22]),o($V7,$V8,{13:148,38:$V9}),{18:[1,149]},o($V7,$V8,{13:150,38:$V9}),{18:[1,151]},o($V7,[2,23]),o($V7,[2,24]),o($V7,[2,25]),o($V7,[2,26]),o($V7,[2,27]),o($V7,[2,28]),o($V7,[2,29]),o($V7,[2,30]),o($V7,[2,31]),o($V7,[2,32]),o($V7,[2,33]),o($V5,[2,9]),o($V7,[2,34]),{19:[1,152]},o($V7,[2,36]),{19:[1,153]},o($V7,$V8,{13:154,38:$V9}),o($V7,[2,37]),o($V7,[2,35])],\ndefaultActions: {9:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n    const { SalidaGramatica } = require(\"./AST/SalidaGramatica\");\n    const { Nodo } = require('./Expresiones/Nodo');\n    const Primitivo = require('./Expresiones/Primitivo');\n    const Aritmetica = require('./Operaciones/Aritmeticas')\n    const Relacional = require('./Operaciones/Relacional');\n    const Logica = require('./Operaciones/Logica'); \n    const { Predicate } = require('./Expresiones/Predicate');\n    //const { Atributo } = require('./Expresiones/Atributo');\n\n    var produccion = [];\n    var accion = [];\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return \"tk_decimal\";\nbreak;\ncase 1:return \"tk_entero\";\nbreak;\ncase 2:return \"tk_node\";\nbreak;\ncase 3:return \"tk_child\";\nbreak;\ncase 4:return \"tk_descendant\";\nbreak;\ncase 5:return \"tk_descendatOr\"\nbreak;\ncase 6:return \"tk_ancestor\";\nbreak;\ncase 7:return \"tk_ancestorOr\";\nbreak;\ncase 8:return \"tk_attribute\";\nbreak;\ncase 9:return \"tk_following\";\nbreak;\ncase 10:return \"tk_followingSi\"\nbreak;\ncase 11:return \"tk_parent\"\nbreak;\ncase 12:return \"tk_preceding\"\nbreak;\ncase 13:return \"tk_precedingSi\"\nbreak;\ncase 14:return \"tk_self\"\nbreak;\ncase 15:return \"tk_text\"\nbreak;\ncase 16:return \"tk_position\"\nbreak;\ncase 17:return \"tk_last\"\nbreak;\ncase 18:return \"tk_div\"\nbreak;\ncase 19:return \"tk_and\"\nbreak;\ncase 20:return \"tk_or\"\nbreak;\ncase 21:return \"tk_mod\"\nbreak;\ncase 22:return \"tk_barra\"\nbreak;\ncase 23:return \"tk_punto\"\nbreak;\ncase 24:return \"tk_diagonal\"\nbreak;\ncase 25:return \"tk_asterisco\"\nbreak;\ncase 26:return \"tk_dosPuntos\"\nbreak;\ncase 27:return \"tk_mas\"\nbreak;\ncase 28:return \"tk_menos\"\nbreak;\ncase 29:return \"tk_menorIgual\"\nbreak;\ncase 30:return \"tk_mayorIgual\"\nbreak;\ncase 31:return \"tk_menor\"\nbreak;\ncase 32:return \"tk_mayor\"\nbreak;\ncase 33:return \"tk_distinto\"\nbreak;\ncase 34:return \"tk_igual\"\nbreak;\ncase 35:return \"tk_llaveA\"\nbreak;\ncase 36:return \"tk_llaveC\"\nbreak;\ncase 37:return \"tk_arroba\"\nbreak;\ncase 38:return \"tk_parA\"\nbreak;\ncase 39:return \"tk_parC\"\nbreak;\ncase 40:return \"tk_stringTexto\";\nbreak;\ncase 41:return \"tk_stringTexto\";\nbreak;\ncase 42:return \"tk_stringTexto\";\nbreak;\ncase 43:return \"tk_stringTexto\";\nbreak;\ncase 44:return \"tk_identificador\";\nbreak;\ncase 45:return \"EOF\";\nbreak;\ncase 46:\nbreak;\ncase 47:\nbreak;\n}\n},\nrules: [/^(?:[0-9]+(\\.[0-9]+)\\b)/,/^(?:[0-9]+\\b)/,/^(?:node\\b)/,/^(?:child\\b)/,/^(?:descendant\\b)/,/^(?:descendant-or-self\\b)/,/^(?:ancestor\\b)/,/^(?:ancestor-or-self\\b)/,/^(?:attribute\\b)/,/^(?:following\\b)/,/^(?:following-sibling\\b)/,/^(?:parent\\b)/,/^(?:preceding\\b)/,/^(?:preceding-sibling\\b)/,/^(?:self\\b)/,/^(?:text\\b)/,/^(?:position\\b)/,/^(?:last\\b)/,/^(?:div\\b)/,/^(?:and\\b)/,/^(?:or\\b)/,/^(?:mod\\b)/,/^(?:\\|)/,/^(?:\\.)/,/^(?:\\/)/,/^(?:\\*)/,/^(?::)/,/^(?:\\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\\[)/,/^(?:\\])/,/^(?:@)/,/^(?:\\()/,/^(?:\\))/,/^(?:\"[^\\\"]*\")/,/^(?:“[^\\“]*“)/,/^(?:'[^\\']*')/,/^(?:‘[^\\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \\t\\r\\n\\f])/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = xpathAsc;\nexports.Parser = xpathAsc.Parser;\nexports.parse = function () { return xpathAsc.parse.apply(xpathAsc, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar xpathDesc = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[2,4],$V6=[1,11],$V7=[1,13],$V8=[5,8,15],$V9=[2,40],$Va=[1,15],$Vb=[1,18],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[1,35],$Vr=[1,36],$Vs=[9,13,17,18,21,24,27,28,29,30,31,32,33,34,35,36,37],$Vt=[5,8],$Vu=[2,14],$Vv=[2,51],$Vw=[1,50],$Vx=[1,54],$Vy=[1,49],$Vz=[1,47],$VA=[1,48],$VB=[1,51],$VC=[1,52],$VD=[1,53],$VE=[1,63],$VF=[1,62],$VG=[1,64],$VH=[1,85],$VI=[1,83],$VJ=[1,84],$VK=[1,86],$VL=[1,87],$VM=[1,88],$VN=[1,89],$VO=[1,90],$VP=[1,91],$VQ=[1,92],$VR=[1,93],$VS=[1,94],$VT=[1,95],$VU=[17,20,41,49,50,51,52,53,54,55,56,57,58,59,60],$VV=[5,8,15,17,20,41,49,50,51,52,53,54,55,56,57,58,59,60],$VW=[1,138],$VX=[1,136],$VY=[1,137],$VZ=[1,139],$V_=[17,20,41,51,52,53,54,55,56,57,58,59,60],$V$=[20,41,52,53,54,55,56,57,58,59,60],$V01=[20,41,52,57,58,59,60];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"INICIOPURO\":3,\"INICIO\":4,\"EOF\":5,\"INICIALES\":6,\"INICIOP\":7,\"tk_barra\":8,\"tk_punto\":9,\"DIAGONALES\":10,\"DERIVADOSLIMITADO\":11,\"DERIVACIONDIAGONAL\":12,\"tk_identificador\":13,\"PREDICATE\":14,\"tk_diagonal\":15,\"DERIVADOS\":16,\"tk_asterisco\":17,\"tk_node\":18,\"tk_parA\":19,\"tk_parC\":20,\"tk_arroba\":21,\"ATRIBUTO\":22,\"AXES\":23,\"tk_child\":24,\"tk_dosPuntos\":25,\"NODETEST\":26,\"tk_descendant\":27,\"tk_descendatOr\":28,\"tk_ancestor\":29,\"tk_ancestorOr\":30,\"tk_attribute\":31,\"tk_following\":32,\"tk_followingSi\":33,\"tk_parent\":34,\"tk_preceding\":35,\"tk_precedingSi\":36,\"tk_self\":37,\"tk_text\":38,\"tk_llaveA\":39,\"EXPRESION\":40,\"tk_llaveC\":41,\"OPERAR\":42,\"PRIMITIVO\":43,\"tk_entero\":44,\"tk_decimal\":45,\"tk_position\":46,\"tk_last\":47,\"tk_stringTexto\":48,\"tk_mas\":49,\"tk_menos\":50,\"tk_div\":51,\"tk_mod\":52,\"tk_menor\":53,\"tk_mayor\":54,\"tk_menorIgual\":55,\"tk_mayorIgual\":56,\"tk_igual\":57,\"tk_distinto\":58,\"tk_or\":59,\"tk_and\":60,\"tk_ParC\":61,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",8:\"tk_barra\",9:\"tk_punto\",13:\"tk_identificador\",15:\"tk_diagonal\",17:\"tk_asterisco\",18:\"tk_node\",19:\"tk_parA\",20:\"tk_parC\",21:\"tk_arroba\",24:\"tk_child\",25:\"tk_dosPuntos\",27:\"tk_descendant\",28:\"tk_descendatOr\",29:\"tk_ancestor\",30:\"tk_ancestorOr\",31:\"tk_attribute\",32:\"tk_following\",33:\"tk_followingSi\",34:\"tk_parent\",35:\"tk_preceding\",36:\"tk_precedingSi\",37:\"tk_self\",38:\"tk_text\",39:\"tk_llaveA\",41:\"tk_llaveC\",44:\"tk_entero\",45:\"tk_decimal\",46:\"tk_position\",47:\"tk_last\",48:\"tk_stringTexto\",49:\"tk_mas\",50:\"tk_menos\",51:\"tk_div\",52:\"tk_mod\",53:\"tk_menor\",54:\"tk_mayor\",55:\"tk_menorIgual\",56:\"tk_mayorIgual\",57:\"tk_igual\",58:\"tk_distinto\",59:\"tk_or\",60:\"tk_and\",61:\"tk_ParC\"},\nproductions_: [0,[3,2],[4,2],[7,3],[7,0],[6,4],[6,3],[6,3],[6,4],[6,3],[6,5],[10,1],[10,2],[12,3],[12,0],[11,2],[11,2],[11,4],[11,2],[11,1],[16,1],[16,2],[16,1],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[26,2],[26,4],[26,2],[26,3],[14,3],[14,0],[40,1],[40,1],[43,1],[43,1],[43,2],[43,1],[43,3],[43,3],[43,1],[43,3],[43,0],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[22,1],[22,1],[22,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n            produccion.push('<INICIOPURO> ::= <INICIO> EOF');\n            accion.push('INICIOPURO.Val = INICIO.val //fin del documento');\n            return new SalidaGramatica($$[$0-1], produccion, accion);\n        \nbreak;\ncase 2:\n\n            produccion.push('<INICIO> ::= <INICIALES>');\n            accion.push('INICIO.Val = INICIALES.Val');\n            this.$ = [$$[$0-1]];\n            this.$.push(...$$[$0])\n        \nbreak;\ncase 3:\n\n            produccion.push('<INICIOP> ::= | <INICIALES> <INICIOP>');\n            accion.push('INICIOP.val.push(INICIALES)');\n            this.$ = [$$[$0-1]]\n            this.$.push(...$$[$0]); \n        \nbreak;\ncase 4:\n\n            produccion.push('<INICIOP> ::= epsilon');\n            accion.push('INICIOP.val = []');\n            this.$ = []; \n        \nbreak;\ncase 5:\n\n            produccion.push(`<INICIALES> ::= punto <DIAGONALES> <DERIVADOSLIMITADO> <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", \".\", null, [new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]],_$[$0-3].first_line, _$[$0-3].first_column)], _$[$0-3].first_line, _$[$0-3].first_column)\n        \nbreak;\ncase 6:\n\n            produccion.push(`<INICIALES> ::= identificador <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", $$[$0-2], $$[$0-1], [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 7:\n\n            produccion.push(`<INICIALES> ::= / <DERIVADOS> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 8:\n\n            produccion.push('<INICIALES> ::= // <DERIVADOS> <DERIVACIONDIAGONAL>');\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"//\", $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-3].first_line, _$[$0-3].first_column)\n        \nbreak;\ncase 9:\n\n            produccion.push(`<INICIALES> ::= asterisco <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", $$[$0-2], $$[$0-1], [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 10:\n\n            produccion.push(`<INICIALES> ::= node() <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", \"node()\", $$[$0-1], [...$$[$0-2]], _$[$0-4].first_line, _$[$0-4].first_column)\n        \nbreak;\ncase 11:\n\n            produccion.push('<DIAGONALES> ::= /');\n            accion.push('DIAGONALES.Val = \\\"/\\\"'); \n            this.$ = $$[$0] \n        \nbreak;\ncase 12:\n\n            produccion.push(`<DIAGONALES> ::= //`);\n            accion.push('DIAGONALES.Val = \\\"//\\\"'); \n            this.$ = \"//\" \n        \nbreak;\ncase 13:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= <DIAGONALES> <DERIVADOS> <DERIVACIONDIAGONAL>`);\n            accion.push('DERIVACIONDIAGONAL.Val = []; DERIVACIONDIAGONAL.Val.push(new Nodo(tipo, id, predicado, fila, columna)); DERIVACIONDIAGONAL.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Array();\n            this.$.push(new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)) \n        \nbreak;\ncase 14:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= epsilon`);\n            accion.push('DERIVACIONDIAGONAL.Val = [/*Vacio*/]');\n            this.$ = [];\n        \nbreak;\ncase 15:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= identificador <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = identificador + PREDICATE.Val'); \n            this.$ = {val: $$[$0-1], pre: $$[$0]};\n        \nbreak;\ncase 16:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= asterisco <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"*\\\" + PREDICATE.Val'); \n            this.$ = {val: $$[$0-1], pre: $$[$0]};\n        \nbreak;\ncase 17:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= node() <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: \"node()\", pre: $$[$0]}\n        \nbreak;\ncase 18:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= arroba <ATRIBUTO>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: $$[$0-1] + \"\" + $$[$0], pre: null}; \n        \nbreak;\ncase 19:\n\n            produccion.push(`<DERIVADOSLIMITADO> ::= <AXES>`);\n            accion.push('DERIVADOSLIMITADO.Val = AXES.Val'); \n            this.$ = {val: $$[$0], pre: null}\n        \nbreak;\ncase 20:\n \n            produccion.push(`<DERIVADOS> ::= punto`);\n            accion.push(\"DERIVADOS.Val = \\\".\\\" \");\n            this.$ = {val: $$[$0], pre: null}; \n        \nbreak;\ncase 21:\n\n            produccion.push(`<DERIVADOS> ::= doblePunto`);\n            accion.push('DERIVADOS.Val = \\\"..\\\"');\n            this.$ = {val: \"..\", pre: null}; \n        \nbreak;\ncase 22:\n \n            produccion.push(`<DERIVADOS> ::= <DERIVADOSLIMITADO>`);\n            accion.push('DERIVADOS.Val = DERIVADOSLIMITADO.Val'); \n            this.$ = $$[$0]; \n        \nbreak;\ncase 39:\n\n            produccion.push(`<PREDICATE> ::= llaveA <EXPRESION> llaveC`);\n            accion.push('PREDICATE.Val = EXPRESION.Val');\n            this.$ = new Predicate($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 40:\n\n            produccion.push(`<PREDICATE> ::= epsilon`);\n            accion.push('PREDICATE.Val = /*vacio*/');\n            this.$ = null; \n        \nbreak;\ncase 41:\n \n            produccion.push(\"<OPERAR> ::= <EXPRESION>\")\n            accion.push(\"OPERAR.Val = EXPRESION.Val\")\n            this.$ = $$[$0];\n        \nbreak;\ncase 42:\n \n            produccion.push(\"<OPERAR> ::= <PRIMITIVO>\")\n            accion.push(\"OPERAR.Val = PRIMITIVO.Val\")\n            this.$ = $$[$0]\n        \nbreak;\ncase 43:\n\n            produccion.push(`<PRIMITIVO> ::= entero`);\n            accion.push('PRIMITIVO.Val = \\\"entero\\\"');\n            this.$ = new Primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 44:\n\n            produccion.push(`<PRIMITIVO> ::= decimal`);\n            accion.push('PRIMITIVO.Val = \\\"decimal\\\"');\n            this.$ = new Primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 45:\n\n            produccion.push(`<PRIMITIVO> ::= arroba <ATRIBUTO>`);\n            accion.push('PRIMITIVO.Val = \\\"@\\\" + ATRIBUTO.Val');\n            this.$ = new Primitivo.default(`this._${$$[$0]}`, _$[$0-1].first_line, _$[$0-1].first_column)\n        \nbreak;\ncase 46:\n\n            produccion.push(`<PRIMITIVO> ::= identificador`);\n            accion.push('PPRIMITIVO.Val = \\\"identificador\\\"');\n            this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 47:\n\n            produccion.push(`<PRIMITIVO> ::= position()`);\n            accion.push('PRIMITIVO.Val = \\\"position()\\\"');\n            this.$ = new Primitivo.default(\"position()\", _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 48:\n\n            produccion.push(`<EXPRESION> ::= last()`);\n            accion.push('EXPRESION.Val = \\\"last()\\\"');\n            this.$ = new Primitivo.default(\"last()\", _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 49:\n\n            produccion.push(`<PRIMITIVO> ::= texto`);\n            accion.push('PRIMITIVO.Val = \\\"texto\\\"');\n            this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 50:\n\n            produccion.push(`<EXPRESION> ::= ( <EXPRESION> )`);\n            accion.push('EXPRESION.Val = EXPRESION1.Val');\n            this.$ = new Primitivo.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 52:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> mas <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 53:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> menos <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val - EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 54:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> asterisco <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val * EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 55:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> div <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val / EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 56:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> mod <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val % EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 57:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> menor <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\"<\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 58:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> mayor <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\">\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 59:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> menorIgual <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\"<=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 60:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> mayorIgual <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\">=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 61:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> igual <EXPRESION>`);\n            accion.push('OPERA.Val = EXPRESION.Val + \\\"=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 62:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> distinto <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \"\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 63:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> or <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\"or\\\" + EXPRESION.Val');\n            this.$ = new Logica.default($$[$0-2], 'or', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 64:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> and <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\"and\\\" + EXPRESION.Val');\n            this.$ = new Logica.default($$[$0-2], 'and', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 65:\n\n            produccion.push(`<ATRIBUTO> ::= asterisco`);\n            accion.push('ATRIBUTO.Val = \\\"*\\\"'); \n            this.$ = $$[$0]; \n        \nbreak;\ncase 66:\n\n            produccion.push(`<ATRIBUTO> ::= identificador`);\n            accion.push('ATRIBUTO.Val = identificador');  \n            this.$ = $$[$0] \nbreak;\ncase 67:\n\n            produccion.push(`<ATRIBUTO> ::= node`);\n            accion.push('ATRIBUTO.Val = \\\"node()\\\"'); \n            this.$ = \"node()\"\n        \nbreak;\n}\n},\ntable: [{3:1,4:2,6:3,9:$V0,13:$V1,15:$V2,17:$V3,18:$V4},{1:[3]},{5:[1,9]},{5:$V5,7:10,8:$V6},{10:12,15:$V7},o($V8,$V9,{14:14,39:$Va}),{9:$Vb,11:19,13:$Vc,15:[1,17],16:16,17:$Vd,18:$Ve,21:$Vf,23:24,24:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr},o($V8,$V9,{14:37,39:$Va}),{19:[1,38]},{1:[2,1]},{5:[2,2]},{6:39,9:$V0,13:$V1,15:$V2,17:$V3,18:$V4},{11:40,13:$Vc,17:$Vd,18:$Ve,21:$Vf,23:24,24:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr},o($Vs,[2,11],{15:[1,41]}),o($Vt,$Vu,{12:42,10:43,15:$V7}),o([17,41,49,50,51,52,53,54,55,56,57,58,59,60],$Vv,{40:44,42:45,43:46,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($Vt,$Vu,{10:43,12:55,15:$V7}),{9:$Vb,11:19,13:$Vc,16:56,17:$Vd,18:$Ve,21:$Vf,23:24,24:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr},o($V8,[2,20],{9:[1,57]}),o($V8,[2,22]),o($V8,$V9,{14:58,39:$Va}),o($V8,$V9,{14:59,39:$Va}),{19:[1,60]},{13:$VE,17:$VF,18:$VG,22:61},o($V8,[2,19]),{25:[1,65]},{25:[1,66]},{25:[1,67]},{25:[1,68]},{25:[1,69]},{25:[1,70]},{25:[1,71]},{25:[1,72]},{25:[1,73]},{25:[1,74]},{25:[1,75]},{25:[1,76]},o($Vt,$Vu,{10:43,12:77,15:$V7}),{20:[1,78]},{5:$V5,7:79,8:$V6},o($Vt,$Vu,{10:43,12:80,15:$V7}),o($Vs,[2,12]),o($Vt,[2,6]),{9:$Vb,11:19,13:$Vc,16:81,17:$Vd,18:$Ve,21:$Vf,23:24,24:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr},{17:$VH,41:[1,82],49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT},o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),{13:$VE,17:$VF,18:$VG,22:96},o($VU,[2,46]),{19:[1,97]},{19:[1,98]},o($VU,[2,49]),o([17,20,49,50,51,52,53,54,55,56,57,58,59,60],$Vv,{42:45,43:46,40:99,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($Vt,[2,7]),o($Vt,$Vu,{10:43,12:100,15:$V7}),o($V8,[2,21]),o($V8,[2,15]),o($V8,[2,16]),{20:[1,101]},o($V8,[2,18]),o($VV,[2,65]),o($VV,[2,66]),{19:[1,102]},{25:[1,103]},{25:[1,104]},{25:[1,105]},{25:[1,106]},{25:[1,107]},{25:[1,108]},{25:[1,109]},{25:[1,110]},{25:[1,111]},{25:[1,112]},{25:[1,113]},{25:[1,114]},o($Vt,[2,9]),o($V8,$V9,{14:115,39:$Va}),{5:[2,3]},o($Vt,[2,5]),o($Vt,$Vu,{10:43,12:116,15:$V7}),o($V8,[2,39]),o($VU,$Vv,{42:45,43:46,40:117,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:118,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:119,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:120,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:121,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:122,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:123,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:124,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:125,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:126,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:127,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:128,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:129,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,[2,45]),{20:[1,130]},{20:[1,131]},{17:$VH,20:[1,132],49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT},o($Vt,[2,8]),o($V8,$V9,{14:133,39:$Va}),{61:[1,134]},{13:$VW,17:$VX,18:$VY,26:135,38:$VZ},{13:$VW,17:$VX,18:$VY,26:140,38:$VZ},{13:$VW,17:$VX,18:$VY,26:141,38:$VZ},{13:$VW,17:$VX,18:$VY,26:142,38:$VZ},{13:$VW,17:$VX,18:$VY,26:143,38:$VZ},{13:$VW,17:$VX,18:$VY,26:144,38:$VZ},{13:$VW,17:$VX,18:$VY,26:145,38:$VZ},{13:$VW,17:$VX,18:$VY,26:146,38:$VZ},{13:$VW,17:$VX,18:$VY,26:147,38:$VZ},{13:$VW,17:$VX,18:$VY,26:148,38:$VZ},{13:$VW,17:$VX,18:$VY,26:149,38:$VZ},{13:$VW,17:$VX,18:$VY,26:150,38:$VZ},o($Vt,$Vu,{10:43,12:151,15:$V7}),o($Vt,[2,13]),o($VU,[2,52]),o($VU,[2,53]),o($V_,[2,54],{49:$VI,50:$VJ}),o($V_,[2,55],{49:$VI,50:$VJ}),o([20,41,52],[2,56],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT}),o($V$,[2,57],{17:$VH,49:$VI,50:$VJ,51:$VK}),o($V$,[2,58],{17:$VH,49:$VI,50:$VJ,51:$VK}),o($V$,[2,59],{17:$VH,49:$VI,50:$VJ,51:$VK}),o($V$,[2,60],{17:$VH,49:$VI,50:$VJ,51:$VK}),o($V01,[2,61],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP}),o($V01,[2,62],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP}),o([20,41,52,59],[2,63],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,60:$VT}),o([20,41,52,59,60],[2,64],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR}),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,50]),o($V8,[2,17]),o($VV,[2,67]),o($V8,[2,23]),o($V8,$V9,{14:152,39:$Va}),{19:[1,153]},o($V8,$V9,{14:154,39:$Va}),{19:[1,155]},o($V8,[2,24]),o($V8,[2,25]),o($V8,[2,26]),o($V8,[2,27]),o($V8,[2,28]),o($V8,[2,29]),o($V8,[2,30]),o($V8,[2,31]),o($V8,[2,32]),o($V8,[2,33]),o($V8,[2,34]),o($Vt,[2,10]),o($V8,[2,35]),{20:[1,156]},o($V8,[2,37]),{20:[1,157]},o($V8,$V9,{14:158,39:$Va}),o($V8,[2,38]),o($V8,[2,36])],\ndefaultActions: {9:[2,1],10:[2,2],79:[2,3]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n    const { SalidaGramatica } = require(\"./AST/SalidaGramatica\");\n    const { Nodo } = require('./Expresiones/Nodo');\n    const Primitivo = require('./Expresiones/Primitivo');\n    const Aritmetica = require('./Operaciones/Aritmeticas')\n    const Relacional = require('./Operaciones/Relacional');\n    const Logica = require('./Operaciones/Logica'); \n    const { Predicate } = require('./Expresiones/Predicate');\n    //const { Atributo } = require('./Expresiones/Atributo');\n\n    var produccion = [];\n    var accion = [];\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return \"tk_decimal\";\nbreak;\ncase 1:return \"tk_entero\";\nbreak;\ncase 2:return \"tk_node\";\nbreak;\ncase 3:return \"tk_child\";\nbreak;\ncase 4:return \"tk_descendant\";\nbreak;\ncase 5:return \"tk_descendatOr\"\nbreak;\ncase 6:return \"tk_ancestor\";\nbreak;\ncase 7:return \"tk_ancestorOr\";\nbreak;\ncase 8:return \"tk_attribute\";\nbreak;\ncase 9:return \"tk_following\";\nbreak;\ncase 10:return \"tk_followingSi\"\nbreak;\ncase 11:return \"tk_parent\"\nbreak;\ncase 12:return \"tk_preceding\"\nbreak;\ncase 13:return \"tk_precedingSi\"\nbreak;\ncase 14:return \"tk_self\"\nbreak;\ncase 15:return \"tk_text\"\nbreak;\ncase 16:return \"tk_position\"\nbreak;\ncase 17:return \"tk_last\"\nbreak;\ncase 18:return \"tk_div\"\nbreak;\ncase 19:return \"tk_and\"\nbreak;\ncase 20:return \"tk_or\"\nbreak;\ncase 21:return \"tk_mod\"\nbreak;\ncase 22:return \"tk_barra\"\nbreak;\ncase 23:return \"tk_punto\"\nbreak;\ncase 24:return \"tk_diagonal\"\nbreak;\ncase 25:return \"tk_asterisco\"\nbreak;\ncase 26:return \"tk_dosPuntos\"\nbreak;\ncase 27:return \"tk_mas\"\nbreak;\ncase 28:return \"tk_menos\"\nbreak;\ncase 29:return \"tk_menorIgual\"\nbreak;\ncase 30:return \"tk_mayorIgual\"\nbreak;\ncase 31:return \"tk_menor\"\nbreak;\ncase 32:return \"tk_mayor\"\nbreak;\ncase 33:return \"tk_distinto\"\nbreak;\ncase 34:return \"tk_igual\"\nbreak;\ncase 35:return \"tk_llaveA\"\nbreak;\ncase 36:return \"tk_llaveC\"\nbreak;\ncase 37:return \"tk_arroba\"\nbreak;\ncase 38:return \"tk_parA\"\nbreak;\ncase 39:return \"tk_parC\"\nbreak;\ncase 40:return \"tk_stringTexto\";\nbreak;\ncase 41:return \"tk_stringTexto\";\nbreak;\ncase 42:return \"tk_stringTexto\";\nbreak;\ncase 43:return \"tk_stringTexto\";\nbreak;\ncase 44:return \"tk_identificador\";\nbreak;\ncase 45:return \"EOF\";\nbreak;\ncase 46:\nbreak;\ncase 47:\nbreak;\n}\n},\nrules: [/^(?:[0-9]+(\\.[0-9]+)\\b)/,/^(?:[0-9]+\\b)/,/^(?:node\\b)/,/^(?:child\\b)/,/^(?:descendant\\b)/,/^(?:descendant-or-self\\b)/,/^(?:ancestor\\b)/,/^(?:ancestor-or-self\\b)/,/^(?:attribute\\b)/,/^(?:following\\b)/,/^(?:following-sibling\\b)/,/^(?:parent\\b)/,/^(?:preceding\\b)/,/^(?:preceding-sibling\\b)/,/^(?:self\\b)/,/^(?:text\\b)/,/^(?:position\\b)/,/^(?:last\\b)/,/^(?:div\\b)/,/^(?:and\\b)/,/^(?:or\\b)/,/^(?:mod\\b)/,/^(?:\\|)/,/^(?:\\.)/,/^(?:\\/)/,/^(?:\\*)/,/^(?::)/,/^(?:\\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\\[)/,/^(?:\\])/,/^(?:@)/,/^(?:\\()/,/^(?:\\))/,/^(?:\"[^\\\"]*\")/,/^(?:“[^\\“]*“)/,/^(?:'[^\\']*')/,/^(?:‘[^\\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \\t\\r\\n\\f])/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = xpathDesc;\nexports.Parser = xpathDesc.Parser;\nexports.parse = function () { return xpathDesc.parse.apply(xpathDesc, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { TablaXMLComponent } from './paginas/tabla-xml/tabla-xml.component';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './paginas/principal/home.component';\nimport { GraficoComponent } from './paginas/grafico/grafico.component';\nimport { BnfComponent } from './paginas/bnf/bnf.component';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'prefix', redirectTo: 'home' },\n  { path: 'home', component: HomeComponent },\n  { path: 'tablaSimbolosXML', component: TablaXMLComponent },\n  { path: 'grafico', component: GraficoComponent},\n  { path: 'bnf', component: BnfComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor() { }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { ReporteService } from './reporte.service';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './paginas/principal/home.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CodemirrorModule } from '@ctrl/ngx-codemirror';\nimport { FormsModule } from '@angular/forms';\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\nimport { TablaXMLComponent } from './paginas/tabla-xml/tabla-xml.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { GraficoComponent } from './paginas/grafico/grafico.component';\nimport { BnfComponent } from './paginas/bnf/bnf.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TablaXMLComponent,\n    HomeComponent,\n    GraficoComponent,\n    BnfComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatMenuModule,\n    MatButtonModule,\n    MatIconModule,\n    CodemirrorModule,\n    FormsModule,\n    MaterialFileInputModule,\n    MatTableModule\n  ],\n  providers: [\n    ReporteService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export default \"table {\\n    width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy9ibmYvYm5mLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9wYWdpbmFzL2JuZi9ibmYuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bnf',\n  templateUrl: './bnf.component.html',\n  styleUrls: ['./bnf.component.css']\n})\nexport class BnfComponent implements OnInit {\n\n  displayedColumns: string[] = ['no', 'produccion', 'accion'];\n  simbolos: any;\n\nconstructor() {this.simbolos = localStorage.getItem('bnf'); }\n\n  ngOnInit(): void {\n    this.simbolos = JSON.parse(this.simbolos);\n    console.log(this.simbolos, \"vacia?\")\n  }\n\n}\n","export default \"#vis {\\n    width: 100%;\\n    height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy9ncmFmaWNvL2dyYWZpY28uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvcGFnaW5hcy9ncmFmaWNvL2dyYWZpY28uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIiN2aXMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbn0iXX0= */\";","import { Component } from '@angular/core';\n\nimport * as vis from 'vis';\n\n@Component({\n  selector: 'app-grafico',\n  templateUrl: './grafico.component.html',\n  styleUrls: ['./grafico.component.css']\n})\nexport class GraficoComponent {\n\n  constructor() { }\n\n  ngOnInit() {\n    var container = document.getElementById(\"vis\");\n    console.log(localStorage.getItem(\"grafo\"));\n    var DOTstring = localStorage.getItem(\"grafo\");;\n    var parsedData = vis.network.convertDot(DOTstring);\n  \n    var data = {\n      nodes: parsedData.nodes,\n      edges: parsedData.edges\n    };\n\n    var options = parsedData.options;\n\n    // you can extend the options like a normal JSON variable:\n    options = {\n      layout: {\n        hierarchical: {\n          sortMethod: 'directed',  // hubsize, directed\n          direction: 'UD'   // UD, DU, LR, RL\n        }\n      },\n      nodes: {\n        color: 'skyblue',\n        shape: 'box'\n      }\n    }\n\n    // create a network\n    var network = new vis.Network(container, data, options);\n    network.stabilize();  \n  }\n}\n","export default \"#barra {\\n    height: 06vh;\\n}\\n\\n.spacer {\\n    flex: 1 1 auto;\\n}\\n\\n#superior { \\n    height: 24vh;\\n}\\n\\n#separador1 {\\n    height: 01vh;\\n    background-color: #f44336;\\n}\\n\\n#inferior {\\n    height: 69vh;\\n    width: 100vw;\\n    display: flex;\\n}\\n\\n#izquierda {\\n    width: 49.50vw;\\n}\\n\\n#separador2 {\\n    width: 01vw;\\n    background-color: #f44336;\\n}\\n\\n#derecha {\\n    width: 49.50vw;\\n}\\n\\n#grafo {\\n    width: 100%;\\n    height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy9wcmluY2lwYWwvaG9tZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLFlBQVk7SUFDWixZQUFZO0lBQ1osYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvcGFnaW5hcy9wcmluY2lwYWwvaG9tZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2JhcnJhIHtcbiAgICBoZWlnaHQ6IDA2dmg7XG59XG5cbi5zcGFjZXIge1xuICAgIGZsZXg6IDEgMSBhdXRvO1xufVxuXG4jc3VwZXJpb3IgeyBcbiAgICBoZWlnaHQ6IDI0dmg7XG59XG5cbiNzZXBhcmFkb3IxIHtcbiAgICBoZWlnaHQ6IDAxdmg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y0NDMzNjtcbn1cblxuI2luZmVyaW9yIHtcbiAgICBoZWlnaHQ6IDY5dmg7XG4gICAgd2lkdGg6IDEwMHZ3O1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG5cbiNpenF1aWVyZGEge1xuICAgIHdpZHRoOiA0OS41MHZ3O1xufVxuXG4jc2VwYXJhZG9yMiB7XG4gICAgd2lkdGg6IDAxdnc7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y0NDMzNjtcbn1cblxuI2RlcmVjaGEge1xuICAgIHdpZHRoOiA0OS41MHZ3O1xufVxuXG4jZ3JhZm8ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbn0iXX0= */\";","import { Component } from '@angular/core';\n\nimport * as XMLasc from '../../../analizadorXML/index';\nimport * as XMLdesc from '../../../analizadorXML/indexDesc';\nimport * as XPATHasc from '../../../analizadores/index';\nimport * as XPATHdesc from '../../../analizadores/indexDesc';\nimport { ReporteService } from '../../reporte.service';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'home-root',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n\n  constructor(public _servicio: ReporteService, private _router: Router) { }\n\n  title = 'interfaz';\n\n  //editor query\n  querys: any = \"/bookstore/book\";\n  editorQueryOptions: any = {\n    theme: 'gruvbox-dark',\n    mode: \"application/xquery\",\n    lineNumbers: true,\n    lineWrapping: true,\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    autoCloseBrackets: true,\n    matchBrackets: true,\n    lint: true\n  }\n\n  //editor XML entrada\n  xmlEntrada: any = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bookstore>\n  <book>\n    <title lang=\"en\">Harry Potter</title>\n    <price>29.99</price>\n  </book>\n  <book1>\n    <title lang=\"en\">Learning XML</title>\n    <price>39.95</price>\n  </book1>\n</bookstore>`;\n  editorXMLEntradaOptions: any = {\n    theme: 'gruvbox-dark',\n    mode: \"application/xml\",\n    lineNumbers: true,\n    lineWrapping: true,\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    autoCloseBrackets: true,\n    matchBrackets: true,\n    lint: true\n  }\n\n  //editor XML Salida\n  xmlSalida: any = \"XML Salida\";\n  editorXMLSalidaOptions: any = {\n    theme: 'gruvbox-dark',\n    mode: \"application/xml\",\n    lineNumbers: true,\n    lineWrapping: true,\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    autoCloseBrackets: true,\n    matchBrackets: true,\n    lint: true\n  }\n\n  //reportes\n  tablaXML: any[] = [];\n  cstXML: string = \"\";\n  bnfXML: any[] = [];\n  encodingXML: any = \"\";\n\n  queryMod: string = \"\";\n\n  bnfXpath: any[] = [];\n  astXpath:string = \"\";\n  cstXpath: string = \"\";\n\n  //reportesVisualizacion\n  grafo:boolean = false;\n  bnf: boolean = false;\n  tabla: boolean = false;\n\n  ngOnInit(){\n    localStorage.clear();\n  }\n\n  abrirXML(files: FileList) {\n    this.xmlEntrada = files.item(0);\n    let fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      this.xmlEntrada = fileReader.result;\n      console.log(fileReader.result);\n    }\n    fileReader.readAsText(this.xmlEntrada);\n  }\n\n  ejecutarAscendente(){\n    this.botarReportes();\n    localStorage.clear();\n    let ascXML = new XMLasc.AnalizadorASCXML();\n    let ascXpath = new XPATHasc.AnalizadosAscXpath();\n\n    let ret = ascXML.ejecutarCodigo(this.xmlEntrada);\n    let ret1 = ascXpath.ejecutarCodigo(this.querys);\n\n    this.tablaXML = ret.tablaRep;\n    this.cstXML = ret.cstRep;\n    this.bnfXML = ret.bnfRep;\n    this.encodingXML = ret.encoding;\n    this.queryMod = ret1.ejecutado;\n    this.bnfXpath = ret1.bnfRep;\n    this.astXpath = ret1.astRep;\n    this.cstXpath = ret1.cstRep;\n    alert(\"Analisis concluido\");\n  }\n\n  ejecutarDescendente() {\n    this.botarReportes();\n    localStorage.clear();\n    let descXML = new XMLdesc.AnalizadorASCXML();\n    let descXPATH = new XPATHdesc.AnalizadosAscXpath();\n    let ret = descXML.ejecutarCodigo(this.xmlEntrada);\n    let ret1 = descXPATH.ejecutarCodigo(this.querys);\n\n    this.tablaXML = ret.tablaRep;\n    this.cstXML = ret.cstRep;\n    this.bnfXML = ret.bnfRep;\n    this.queryMod = ret1.ejecutado;\n    this.bnfXpath = ret1.bnfRep;\n    this.astXpath = ret1.astRep;\n    this.cstXpath = ret1.cstRep;\n    alert(\"Analisis concluido\");\n  }\n\n  botarReportes() {\n    this.grafo = this.bnf = this.tabla = false;\n  }\n\n  reporteTablaSimbolosXML() {\n    this.botarReportes();\n    localStorage.clear();\n    localStorage.setItem('tablaXML', JSON.stringify(this.tablaXML));\n    this.tabla = true;\n    //window.open(\"tablaSimbolosXML\", \"_blank\")\n  }\n\n  reporteCSTXML() {\n    this.botarReportes();\n    localStorage.clear();\n    localStorage.setItem('grafo', this.cstXML);\n    this.grafo = true;\n    //window.open(\"grafico\", \"_blank\")\n  }\n\n  reporteBNFXML() {\n    this.botarReportes();\n    localStorage.clear();\n    localStorage.setItem('bnf', JSON.stringify(this.bnfXML));\n    this.bnf = true;\n    //window.open(\"bnf\", \"_blank\")\n  }\n\n  reporteBNFXPATH() {\n    this.botarReportes();\n    localStorage.clear();\n    localStorage.setItem('bnf', JSON.stringify(this.bnfXpath));\n    this.bnf = true;\n    //window.open(\"bnf\", \"_blank\")\n  }\n\n  reporteASTXPATH() {\n    this.botarReportes();\n    localStorage.clear()\n    localStorage.setItem('grafo', this.astXpath);\n    this.grafo = true\n    //window.open(\"grafico\", \"_blank\")\n  }\n\n  reporteCSTXPATH() {\n    this.botarReportes();\n    localStorage.clear()\n    localStorage.setItem('grafo', this.cstXpath);\n    this.grafo= true;\n    // window.open(\"grafico\", \"_blank\")\n  }\n\n}\n","export default \"table {\\n    width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy90YWJsYS14bWwvdGFibGEteG1sLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9wYWdpbmFzL3RhYmxhLXhtbC90YWJsYS14bWwuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\n\nimport { ReporteService } from '../../reporte.service';\n\n@Component({\n  selector: 'app-tabla-xml',\n  templateUrl: './tabla-xml.component.html',\n  styleUrls: ['./tabla-xml.component.css']\n})\n\nexport class TablaXMLComponent implements OnInit {\n  displayedColumns: string[] = ['no', 'nombre', 'tipo', 'valor', 'ambito', 'tipoEtiqueta', 'fila', 'columna'];\n  simbolos: any;\n\nconstructor(_servicio: ReporteService) {this.simbolos = localStorage.getItem('tablaXML'); }\n\n  ngOnInit(): void {\n    this.simbolos = JSON.parse(this.simbolos);\n    console.log(this.simbolos, \"vacia?\")\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ReporteService {\n\n  tablaSimbolosXML: any[] = [];\n\n  llenarTablaXML(array: any[]) {\n    this.tablaSimbolosXML = array;\n    console.log(this.tablaSimbolosXML)\n  }\n\n  obtenerTablaXML() {\n    return this.tablaSimbolosXML;\n  }\n}\n","export const environment = {\n  production: true\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/fold/brace-fold';\nimport 'codemirror/lib/codemirror';\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/addon/lint/lint';\nimport 'codemirror/addon/lint/json-lint';\nimport 'codemirror/mode/xquery/xquery';\nimport 'codemirror/mode/xml/xml';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":"webpack:///"}