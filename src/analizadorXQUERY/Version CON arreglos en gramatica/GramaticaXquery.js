/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,17],$V2=[1,16],$V3=[1,15],$V4=[1,18],$V5=[1,14],$V6=[1,12],$V7=[1,20],$V8=[1,5,7,11,12,20,23,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,101,103],$V9=[1,7,20,23,39,52,53,55,56,60,65,68,70,72,75,76,77,78,80,81,82,83,84,85,86,87,88],$Va=[2,97],$Vb=[1,35],$Vc=[1,30],$Vd=[1,32],$Ve=[1,31],$Vf=[1,33],$Vg=[1,39],$Vh=[1,27],$Vi=[1,28],$Vj=[1,29],$Vk=[1,37],$Vl=[1,38],$Vm=[1,40],$Vn=[1,43],$Vo=[1,20,23,55,56,65,70,75,76,77,78,80,81,82,83,84,85,86,87,88],$Vp=[1,49],$Vq=[1,51],$Vr=[1,50],$Vs=[23,74],$Vt=[14,23,55,65,75,76,77,78,80,81,82,83,84,85,86,87,88],$Vu=[1,5,7,11,20,25,26,39,52,53,56,60,68,70,72,89,90,91,96,101,103],$Vv=[1,74],$Vw=[1,72],$Vx=[1,73],$Vy=[1,68],$Vz=[1,57],$VA=[1,58],$VB=[1,59],$VC=[1,60],$VD=[1,61],$VE=[1,62],$VF=[1,63],$VG=[1,64],$VH=[1,65],$VI=[1,66],$VJ=[1,67],$VK=[1,69],$VL=[1,70],$VM=[1,71],$VN=[1,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,101,103],$VO=[2,140],$VP=[1,76],$VQ=[1,79],$VR=[1,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,96,101,103],$VS=[1,85],$VT=[1,84],$VU=[1,90],$VV=[1,91],$VW=[1,88],$VX=[1,92],$VY=[1,93],$VZ=[1,95],$V_=[1,96],$V$=[1,97],$V01=[1,98],$V11=[1,99],$V21=[1,100],$V31=[1,101],$V41=[1,102],$V51=[1,103],$V61=[1,104],$V71=[1,105],$V81=[1,106],$V91=[1,2,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,96,101,103],$Va1=[1,115],$Vb1=[1,116],$Vc1=[23,52,53,56,60],$Vd1=[1,7,14,20,23,39,52,53,55,56,60,65,68,70,72,75,76,77,78,80,81,82,83,84,85,86,87,88],$Ve1=[1,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,96,103],$Vf1=[2,114],$Vg1=[1,150],$Vh1=[1,154],$Vi1=[1,147],$Vj1=[1,148],$Vk1=[1,153],$Vl1=[1,149],$Vm1=[1,151],$Vn1=[1,152],$Vo1=[1,155],$Vp1=[11,79,96,103,104,107,109,110,111,112,113,114,115,116,117,118,119],$Vq1=[1,169],$Vr1=[1,168],$Vs1=[1,170],$Vt1=[1,5,7,11,14,20,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,96,101,103],$Vu1=[1,5,7,11,14,20,25,26,39,52,53,55,56,60,65,68,70,72,77,78,79,80,81,82,83,84,85,86,87,89,90,91,96,101,103],$Vv1=[1,5,7,11,14,20,25,26,39,52,53,55,56,60,65,68,70,72,78,80,81,82,83,84,85,86,87,89,90,91,96,101,103],$Vw1=[1,5,7,11,14,20,25,26,39,52,53,55,56,60,65,68,70,72,78,86,87,89,90,91,96,101,103],$Vx1=[1,5,7,11,14,20,25,26,39,52,53,56,60,68,70,72,89,90,91,96,101,103],$Vy1=[1,210],$Vz1=[1,206],$VA1=[1,199],$VB1=[1,198],$VC1=[1,200],$VD1=[1,201],$VE1=[1,211],$VF1=[1,202],$VG1=[1,203],$VH1=[1,204],$VI1=[1,205],$VJ1=[1,207],$VK1=[1,208],$VL1=[1,209],$VM1=[14,55,65,75,76,77,78,79,80,83,84,85,86,87,88,123],$VN1=[1,2,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,96,101,103,123],$VO1=[1,236],$VP1=[1,272],$VQ1=[1,270],$VR1=[1,271],$VS1=[1,273],$VT1=[5,11,14,25,26,89,90,91,96,101,103],$VU1=[2,67],$VV1=[1,294],$VW1=[14,55,65,75,76,77,78,79,80,83,84,85,86,87,123],$VX1=[14,55,65,77,78,79,80,83,84,85,86,87,123],$VY1=[14,55,65,78,80,83,84,85,86,87,123],$VZ1=[14,55,65,78,86,87,123],$V_1=[1,297],$V$1=[14,23],$V02=[1,321],$V12=[1,322],$V22=[1,323],$V32=[1,324],$V42=[1,325],$V52=[2,5],$V62=[1,328],$V72=[14,19,22,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO_XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FUNCION":6,"tk_declare":7,"tk_function":8,"MENU_LOCAL":9,"tk_dosPuntos":10,"tk_identificador":11,"tk_parA":12,"LISTA_DECLARACION_FUNCION":13,"tk_parC":14,"tk_as":15,"tk_xs":16,"TIPO_DATO":17,"MENU_INTERROGA":18,"llaveA":19,"llaveC":20,"tk_punto_coma":21,"tk_Interroga":22,"tk_coma":23,"DECLARACION_FUNCION":24,"tk_identificadorXQUERY":25,"tk_local":26,"tk_int":27,"tk_string":28,"tk_double":29,"tk_DECIMAL":30,"tk_integer":31,"INSTRUCCION":32,"DECLARACION_GLOBAL":33,"IF":34,"WHERE":35,"FOR":36,"LLAMADA_FUNCION":37,"RETURN_CICLO":38,"tk_for":39,"DECLARACIONES_FOR":40,"OPCIONES_FOR":41,"DECLARACION_FOR":42,"OPCION_AT":43,"tk_in":44,"FOR_REC":45,"tk_at":46,"CORDERNADA":47,"EXP_XQUERY":48,"XPATH":49,"OPCION_FOR":50,"ORDER":51,"ComentarioM":52,"tk_where":53,"CONDITIONES_WHERE":54,"tk_and":55,"tk_order":56,"tk_by":57,"LISTA_ORDER":58,"ORDER_":59,"tk_return":60,"Lista_Ciclo":61,"valor_if":62,"LISTA_ASIGNACION":63,"ASIGNACION_SIMPLE":64,"tk_igual":65,"valores_if":66,"TK":67,"tk_if":68,"tk_then":69,"tk_else":70,"Parametros_llamada":71,"tk_let":72,"LISTA_ID":73,"tk_igualXQUERY":74,"tk_menos":75,"tk_mas":76,"tk_div":77,"tk_mod":78,"tk_asterisco":79,"tk_menor":80,"tk_gt":81,"tk_lt":82,"tk_mayor":83,"tk_menorIgual":84,"tk_mayorIgual":85,"tk_distinto":86,"tk_or":87,"tk_to":88,"tk_entero":89,"tk_decimal":90,"tk_stringTexto":91,"OPCION_IDQ":92,"INICIO":93,"tk_barra":94,"INICIALES":95,"tk_punto":96,"DIAGONALES":97,"DERIVADOSLIMITADO":98,"DERIVACIONDIAGONAL":99,"PREDICATE":100,"tk_diagonal":101,"DERIVADOS":102,"tk_node":103,"tk_arroba":104,"ATRIBUTO":105,"AXES":106,"tk_child":107,"NODETEST":108,"tk_descendant":109,"tk_descendatOr":110,"tk_ancestor":111,"tk_ancestorOr":112,"tk_attribute":113,"tk_following":114,"tk_followingSi":115,"tk_parent":116,"tk_preceding":117,"tk_precedingSi":118,"tk_self":119,"tk_text":120,"tk_llaveA":121,"EXPRESION":122,"tk_llaveC":123,"tk_position":124,"tk_last":125,"tk_ParC":126,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_declare",8:"tk_function",10:"tk_dosPuntos",11:"tk_identificador",12:"tk_parA",14:"tk_parC",15:"tk_as",16:"tk_xs",19:"llaveA",20:"llaveC",21:"tk_punto_coma",22:"tk_Interroga",23:"tk_coma",25:"tk_identificadorXQUERY",26:"tk_local",27:"tk_int",28:"tk_string",29:"tk_double",30:"tk_DECIMAL",31:"tk_integer",39:"tk_for",44:"tk_in",46:"tk_at",52:"ComentarioM",53:"tk_where",55:"tk_and",56:"tk_order",57:"tk_by",60:"tk_return",65:"tk_igual",67:"TK",68:"tk_if",69:"tk_then",70:"tk_else",72:"tk_let",74:"tk_igualXQUERY",75:"tk_menos",76:"tk_mas",77:"tk_div",78:"tk_mod",79:"tk_asterisco",80:"tk_menor",81:"tk_gt",82:"tk_lt",83:"tk_mayor",84:"tk_menorIgual",85:"tk_mayorIgual",86:"tk_distinto",87:"tk_or",88:"tk_to",89:"tk_entero",90:"tk_decimal",91:"tk_stringTexto",94:"tk_barra",96:"tk_punto",101:"tk_diagonal",103:"tk_node",104:"tk_arroba",107:"tk_child",109:"tk_descendant",110:"tk_descendatOr",111:"tk_ancestor",112:"tk_ancestorOr",113:"tk_attribute",114:"tk_following",115:"tk_followingSi",116:"tk_parent",117:"tk_preceding",118:"tk_precedingSi",119:"tk_self",120:"tk_text",121:"tk_llaveA",123:"tk_llaveC",124:"tk_position",125:"tk_last",126:"tk_ParC"},
productions_: [0,[3,1],[3,1],[6,17],[18,1],[18,0],[13,3],[13,1],[24,6],[9,1],[17,1],[17,1],[17,1],[17,1],[17,1],[4,2],[4,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[36,3],[40,3],[40,1],[42,4],[43,2],[43,0],[47,5],[45,1],[45,1],[45,1],[41,2],[41,1],[50,1],[50,1],[50,1],[50,1],[35,2],[54,3],[54,1],[51,3],[58,3],[58,1],[59,2],[59,1],[38,2],[61,3],[61,1],[63,3],[63,1],[64,3],[64,4],[34,6],[34,8],[34,8],[66,2],[66,1],[62,1],[62,1],[62,1],[62,1],[37,6],[71,2],[71,1],[33,4],[73,3],[73,1],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,3],[48,1],[48,1],[48,1],[48,1],[48,2],[48,3],[48,6],[48,4],[48,0],[92,1],[92,0],[49,1],[49,1],[93,3],[93,1],[95,4],[95,3],[95,3],[95,4],[95,3],[95,5],[97,1],[97,2],[97,2],[99,3],[99,0],[98,2],[98,2],[98,4],[98,2],[98,1],[102,1],[102,2],[102,1],[106,4],[106,4],[106,4],[106,4],[106,4],[106,4],[106,4],[106,4],[106,4],[106,4],[106,4],[106,4],[108,2],[108,4],[108,2],[108,3],[100,3],[100,0],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,1],[122,1],[122,2],[122,1],[122,3],[122,3],[122,1],[122,3],[105,1],[105,1],[105,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 10: case 14:
this.$ = new Tipo(tipos.ENTERO);
break;
case 11:
this.$ = new Tipo(tipos.STRING);
break;
case 12: case 13:
this.$ = new Tipo(tipos.DECIMAL);
break;
case 15:
$$[$0-1].push($$[$0]); this.$=$$[$0];
    
break;
case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 60: case 67: case 70:
this.$=$$[$0]
break;
case 49:
this.$=new Retorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 50:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 51:
this.$=$$[$0];
break;
case 56:
this.$=new If($$[$0-3],$$[$0],[], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 57:
this.$=new If($$[$0-5],$$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 58:
this.$ = new If($$[$0-5], $$[$0-2], [$$[$0]], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 59:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 61: case 62: case 64:
 this.$ = $$[$0]
break;
case 65:
  this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]
break;
case 66:
 $$[$0-1].push($$[$0])  ;  this.$=$$[$0-1];  
break;
case 68:
this.$=new Declaracion(new Tipo(tipos.VARIABLE),$$[$0-2],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column ) 
break;
case 69:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];  
break;
case 71:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 72:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 73:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 74:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 75:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 76: case 78:

            this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 77: case 79:

            this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 80:

            this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 81:

            this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 82:

            this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 83:

            this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 84:

            this.$ = new Logico($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 85: case 86:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 88:

            this.$ = new Logico($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 89: case 90:

            this.$ = new Primitivo(new Tipo(esEntero(Number($$[$0]))), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
        
break;
case 91:

            this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 92:

            this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 93:

          this.$ = new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);


    
break;
case 94:

            this.$ = $$[$0-1]
        
break;
case 95:
  this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]  
break;
}
},
table: [{3:1,4:2,5:[1,3],6:6,7:$V0,26:$V1,32:4,33:5,34:7,35:8,36:9,37:10,38:11,39:$V2,53:$V3,60:$V4,68:$V5,72:$V6},{1:[3]},{1:[2,1],5:$V7,6:6,7:$V0,26:$V1,32:19,33:5,34:7,35:8,36:9,37:10,38:11,39:$V2,53:$V3,60:$V4,68:$V5,72:$V6},o([1,5,7,26,39,53,60,68,72],[2,2]),o($V8,[2,16]),o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),o($V8,[2,20]),o($V8,[2,21]),o($V8,[2,22]),o($V8,[2,23]),{25:[1,22],73:21},{8:[1,23]},{12:[1,24]},o($V9,$Va,{48:25,49:26,93:34,95:36,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),{25:$Vn,40:41,42:42},{10:[1,44]},o($Vo,$Va,{32:4,33:5,6:6,34:7,35:8,36:9,37:10,38:11,49:26,93:34,95:36,61:45,62:46,48:47,4:48,5:$Vp,7:$V0,11:$Vc,12:$Vd,25:$Ve,26:$Vq,39:$V2,52:$Vr,53:$V3,60:$V4,68:$V5,72:$V6,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($V8,[2,15]),o($V8,[2,24]),{23:[1,53],74:[1,52]},o($Vs,[2,70]),{9:54,26:[1,55]},o($Vt,$Va,{49:26,93:34,95:36,48:56,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vu,[2,41],{12:$Vv,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o($VN,[2,87]),o($VN,[2,89]),o($VN,[2,90]),o($VN,[2,91]),o($VN,[2,92],{100:75,2:$VO,94:$VO,121:$VP}),o([1,7,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91],[2,99],{93:34,95:36,92:77,49:78,5:$Vb,11:$VQ,79:$Vg,96:$Vk,101:$Vl,103:$Vm}),o($Vt,$Va,{49:26,93:34,95:36,48:80,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),{10:[1,81]},o($VN,[2,100],{94:[1,82]}),o($VN,[2,101]),o($VR,[2,103]),{2:$VS,97:83,101:$VT},{11:$VU,79:$VV,96:$VW,98:89,101:[1,87],102:86,103:$VX,104:$VY,106:94,107:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51,117:$V61,118:$V71,119:$V81},o($V91,$VO,{100:107,121:$VP}),{12:[1,108]},{23:[1,110],35:112,38:114,41:109,50:111,51:113,52:$Va1,53:$V3,56:$Vb1,60:$V4},o($Vc1,[2,27]),{43:117,44:[2,30],46:[1,118]},{11:[1,119]},o([1,5,7,11,12,20,23,25,26,39,52,53,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,101,103],[2,49],{55:[1,120]}),o($V8,[2,51]),o($Vu,[2,61],{12:$Vv,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o([1,11,12,20,23,25,52,55,56,65,70,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,101,103],[2,62],{33:5,6:6,34:7,35:8,36:9,37:10,38:11,32:19,5:$V7,7:$V0,26:$V1,39:$V2,53:$V3,60:$V4,68:$V5,72:$V6}),o($V8,[2,63]),o($V8,[2,64]),{10:[1,121]},o($V9,$Va,{49:26,93:34,95:36,48:122,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),{25:[1,123]},{10:[1,124]},{10:[2,9]},{12:$Vv,14:[1,125],23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},o($Vd1,$Va,{49:26,93:34,95:36,48:126,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:127,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:128,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:129,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:130,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:131,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:132,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:133,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:134,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:135,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:136,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:137,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:138,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:139,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:140,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:141,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vd1,$Va,{49:26,93:34,95:36,48:142,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Vt,$Va,{49:26,93:34,95:36,48:143,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($Ve1,$Vf1,{99:144,97:145,2:$VS,101:$VT}),{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:146,124:$Vm1,125:$Vn1},o($VN,[2,93]),o($VN,[2,98]),o($V91,$VO,{100:75,121:$VP}),{12:$Vv,14:$Vo1,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{11:[1,156]},{11:$VQ,79:$Vg,95:157,96:$Vk,101:$Vl,103:$Vm},{11:$VU,79:$VV,98:158,103:$VX,104:$VY,106:94,107:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51,117:$V61,118:$V71,119:$V81},o($Vp1,[2,110],{101:[1,159]}),{101:[1,160]},o($Ve1,$Vf1,{97:145,99:161,2:$VS,101:$VT}),{11:$VU,79:$VV,96:$VW,98:89,102:162,103:$VX,104:$VY,106:94,107:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51,117:$V61,118:$V71,119:$V81},o([1,2,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,101,103],[2,120],{96:[1,163]}),o($V91,[2,122]),o($V91,$VO,{100:164,121:$VP}),o($V91,$VO,{100:165,121:$VP}),{12:[1,166]},{11:$Vq1,79:$Vr1,103:$Vs1,105:167},o($V91,[2,119]),{10:[1,171]},{10:[1,172]},{10:[1,173]},{10:[1,174]},{10:[1,175]},{10:[1,176]},{10:[1,177]},{10:[1,178]},{10:[1,179]},{10:[1,180]},{10:[1,181]},{10:[1,182]},o($Ve1,$Vf1,{97:145,99:183,2:$VS,101:$VT}),{14:[1,184]},o([1,5,7,11,12,20,23,25,26,39,55,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,101,103],[2,25],{35:112,51:113,38:114,50:185,52:$Va1,53:$V3,56:$Vb1,60:$V4}),{25:$Vn,42:186},o($V8,[2,36]),o($V8,[2,37]),o($V8,[2,38]),o($V8,[2,39]),o($V8,[2,40]),{57:[1,187]},{44:[1,188]},{25:[1,189]},{12:[1,190]},o($Vo,$Va,{32:4,33:5,6:6,34:7,35:8,36:9,37:10,38:11,49:26,93:34,95:36,48:47,4:48,62:191,5:$Vp,7:$V0,11:$Vc,12:$Vd,25:$Ve,26:$Vq,39:$V2,52:$Vr,53:$V3,60:$V4,68:$V5,72:$V6,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),{11:[1,192]},o([1,5,7,11,20,25,26,39,52,53,55,56,60,65,68,70,72,78,86,87,89,90,91,96,101,103],[2,68],{12:$Vv,23:$Vw,75:$Vz,76:$VA,77:$VB,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,88:$VM}),o($Vs,[2,69]),{11:[1,193]},{69:[1,194]},o($Vt1,[2,71],{12:$Vv,23:$Vw,88:$VM}),o($Vt1,[2,72],{12:$Vv,23:$Vw,88:$VM}),o($Vu1,[2,73],{12:$Vv,23:$Vw,75:$Vz,76:$VA,88:$VM}),o([1,5,7,11,14,20,25,26,39,52,53,56,60,68,70,72,78,89,90,91,96,101,103],[2,74],{12:$Vv,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o($Vu1,[2,75],{12:$Vv,23:$Vw,75:$Vz,76:$VA,88:$VM}),o($Vv1,[2,76],{12:$Vv,23:$Vw,75:$Vz,76:$VA,77:$VB,79:$VD,88:$VM}),o($Vv1,[2,77],{12:$Vv,23:$Vw,75:$Vz,76:$VA,77:$VB,79:$VD,88:$VM}),o($Vv1,[2,78],{12:$Vv,23:$Vw,75:$Vz,76:$VA,77:$VB,79:$VD,88:$VM}),o($Vv1,[2,79],{12:$Vv,23:$Vw,75:$Vz,76:$VA,77:$VB,79:$VD,88:$VM}),o($Vv1,[2,80],{12:$Vv,23:$Vw,75:$Vz,76:$VA,77:$VB,79:$VD,88:$VM}),o($Vv1,[2,81],{12:$Vv,23:$Vw,75:$Vz,76:$VA,77:$VB,79:$VD,88:$VM}),o($Vw1,[2,82],{12:$Vv,23:$Vw,75:$Vz,76:$VA,77:$VB,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,88:$VM}),o($Vw1,[2,83],{12:$Vv,23:$Vw,75:$Vz,76:$VA,77:$VB,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,88:$VM}),o([1,5,7,11,14,20,25,26,39,52,53,56,60,68,70,72,78,87,89,90,91,96,101,103],[2,84],{12:$Vv,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,88:$VM}),o($Vx1,[2,85],{12:$Vv,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o($Vx1,[2,86],{12:$Vv,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o([1,5,7,11,14,20,25,26,39,52,53,55,56,60,68,70,72,78,87,89,90,91,96,101,103],[2,88],{12:$Vv,23:$Vw,65:$Vy,75:$Vz,76:$VA,77:$VB,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,88:$VM}),{12:$Vv,14:[1,195],23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},o($VR,[2,105]),{11:$VU,79:$VV,96:$VW,98:89,102:196,103:$VX,104:$VY,106:94,107:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51,117:$V61,118:$V71,119:$V81},{55:$Vy1,65:$Vz1,75:$VA1,76:$VB1,77:$VC1,78:$VD1,79:$VE1,80:$VF1,83:$VG1,84:$VH1,85:$VI1,86:$VJ1,87:$VK1,88:$VL1,123:[1,197]},o($VM1,[2,155]),o($VM1,[2,156]),{11:$Vq1,79:$Vr1,103:$Vs1,105:212},o($VM1,[2,158]),{12:[1,213]},{12:[1,214]},o($VM1,[2,161]),{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:215,124:$Vm1,125:$Vn1},o($VN,[2,94]),{12:[1,216]},o($VR,[2,102]),o($Ve1,$Vf1,{97:145,99:217,2:$VS,101:$VT}),o($Vp1,[2,111]),o($Vp1,[2,112]),o($VR,[2,106]),o($Ve1,$Vf1,{97:145,99:218,2:$VS,101:$VT}),o($V91,[2,121]),o($V91,[2,115]),o($V91,[2,116]),{14:[1,219]},o($V91,[2,118]),o($VN1,[2,163]),o($VN1,[2,164]),{12:[1,220]},{10:[1,221]},{10:[1,222]},{10:[1,223]},{10:[1,224]},{10:[1,225]},{10:[1,226]},{10:[1,227]},{10:[1,228]},{10:[1,229]},{10:[1,230]},{10:[1,231]},{10:[1,232]},o($VR,[2,108]),o($V91,$VO,{100:233,121:$VP}),o($V8,[2,35]),o($Vc1,[2,26]),{25:$VO1,58:234,59:235},o([23,52,53,55,56,60,65,75,76,77,78,80,81,82,83,84,85,86,87,88],$Va,{93:34,95:36,45:237,49:238,48:239,47:240,5:$Vb,11:$Vc,12:[1,241],25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),{44:[2,29]},o($Vt,$Va,{49:26,93:34,95:36,71:242,48:243,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($V8,[2,50]),{12:[1,244]},{12:[1,245]},o($Vo,$Va,{32:4,33:5,6:6,34:7,35:8,36:9,37:10,38:11,49:26,93:34,95:36,48:47,4:48,66:246,62:247,5:$Vp,7:$V0,11:$Vc,12:$Vd,25:$Ve,26:$Vq,39:$V2,52:$Vr,53:$V3,60:$V4,68:$V5,72:$V6,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($VN,[2,96]),o($Ve1,$Vf1,{97:145,99:248,2:$VS,101:$VT}),o($V91,[2,139]),{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:249,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:250,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:251,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:252,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:253,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:254,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:255,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:256,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:257,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:258,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:259,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:260,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:261,124:$Vm1,125:$Vn1},{11:$Vg1,12:$Vh1,89:$Vi1,90:$Vj1,91:$Vk1,104:$Vl1,122:262,124:$Vm1,125:$Vn1},o($VM1,[2,157]),{14:[1,263]},{14:[1,264]},{14:[1,265],55:$Vy1,65:$Vz1,75:$VA1,76:$VB1,77:$VC1,78:$VD1,79:$VE1,80:$VF1,83:$VG1,84:$VH1,85:$VI1,86:$VJ1,87:$VK1,88:$VL1},o($Vt,$Va,{49:26,93:34,95:36,48:266,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($VR,[2,104]),o($VR,[2,107]),o($V91,$VO,{100:267,121:$VP}),{126:[1,268]},{11:$VP1,79:$VQ1,103:$VR1,108:269,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:274,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:275,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:276,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:277,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:278,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:279,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:280,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:281,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:282,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:283,120:$VS1},{11:$VP1,79:$VQ1,103:$VR1,108:284,120:$VS1},o($Ve1,$Vf1,{97:145,99:285,2:$VS,101:$VT}),o([1,5,7,11,12,20,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,101,103],[2,44],{23:[1,286]}),o($V8,[2,46]),o([1,7,12,20,23,25,26,39,52,53,55,56,60,65,68,70,72,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91],[2,48],{93:34,95:36,49:287,5:$Vb,11:$VQ,79:$Vg,96:$Vk,101:$Vl,103:$Vm}),o($Vc1,[2,28]),o([12,23,52,53,55,56,60,65,75,76,77,78,79,80,81,82,83,84,85,86,87,88],[2,32]),o([52,53,56,60],[2,33],{12:$Vv,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o($Vc1,[2,34]),o($Vt,$Va,{49:26,93:34,95:36,48:288,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o([23,55,65,75,76,77,78,80,81,82,83,84,85,86,87,88],$Va,{49:26,93:34,95:36,48:290,5:$Vb,11:$Vc,12:$Vd,14:[1,289],25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($VT1,$VU1,{12:$Vv,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o($Vt,$Va,{49:26,93:34,95:36,71:242,48:291,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),{13:292,24:293,25:$VV1},o([1,12,20,23,55,56,65,75,76,77,78,79,80,81,82,83,84,85,86,87,88,101],[2,56],{32:4,33:5,6:6,34:7,35:8,36:9,37:10,38:11,49:26,93:34,95:36,48:47,4:48,62:296,5:$Vp,7:$V0,11:$Vc,25:$Ve,26:$Vq,39:$V2,52:$Vr,53:$V3,60:$V4,68:$V5,70:[1,295],72:$V6,89:$Vh,90:$Vi,91:$Vj,96:$Vk,103:$Vm}),o($V8,[2,60]),o($VR,[2,113]),o($VW1,[2,141],{88:$VL1}),o($VW1,[2,142],{88:$VL1}),o($VX1,[2,143],{75:$VA1,76:$VB1,88:$VL1}),o([14,78,123],[2,144],{55:$Vy1,65:$Vz1,75:$VA1,76:$VB1,77:$VC1,79:$VE1,80:$VF1,83:$VG1,84:$VH1,85:$VI1,86:$VJ1,87:$VK1,88:$VL1}),o($VY1,[2,145],{75:$VA1,76:$VB1,77:$VC1,79:$VE1,88:$VL1}),o($VY1,[2,146],{75:$VA1,76:$VB1,77:$VC1,79:$VE1,88:$VL1}),o($VY1,[2,147],{75:$VA1,76:$VB1,77:$VC1,79:$VE1,88:$VL1}),o($VY1,[2,148],{75:$VA1,76:$VB1,77:$VC1,79:$VE1,88:$VL1}),o($VZ1,[2,149],{75:$VA1,76:$VB1,77:$VC1,79:$VE1,80:$VF1,83:$VG1,84:$VH1,85:$VI1,88:$VL1}),o($VZ1,[2,150],{75:$VA1,76:$VB1,77:$VC1,79:$VE1,80:$VF1,83:$VG1,84:$VH1,85:$VI1,88:$VL1}),o([14,78,87,123],[2,151],{55:$Vy1,65:$Vz1,75:$VA1,76:$VB1,77:$VC1,79:$VE1,80:$VF1,83:$VG1,84:$VH1,85:$VI1,86:$VJ1,88:$VL1}),o([14,123],[2,152],{55:$Vy1,65:$Vz1,75:$VA1,76:$VB1,77:$VC1,78:$VD1,79:$VE1,80:$VF1,83:$VG1,84:$VH1,85:$VI1,86:$VJ1,87:$VK1,88:$VL1}),o([14,55,78,87,123],[2,153],{65:$Vz1,75:$VA1,76:$VB1,77:$VC1,79:$VE1,80:$VF1,83:$VG1,84:$VH1,85:$VI1,86:$VJ1,88:$VL1}),o($VX1,[2,154],{75:$VA1,76:$VB1,88:$VL1}),o($VM1,[2,159]),o($VM1,[2,160]),o($VM1,[2,162]),{12:$Vv,14:$V_1,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},o($V91,[2,117]),o($VN1,[2,165]),o($V91,[2,123]),o($V91,$VO,{100:298,121:$VP}),{12:[1,299]},o($V91,$VO,{100:300,121:$VP}),{12:[1,301]},o($V91,[2,124]),o($V91,[2,125]),o($V91,[2,126]),o($V91,[2,127]),o($V91,[2,128]),o($V91,[2,129]),o($V91,[2,130]),o($V91,[2,131]),o($V91,[2,132]),o($V91,[2,133]),o($V91,[2,134]),o($VR,[2,109]),{25:$VO1,59:302},o($V8,[2,47]),{12:$Vv,14:$Vo1,23:[1,303],55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},o($V8,[2,65]),o($VT1,[2,66],{12:$Vv,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o([5,11,25,26,89,90,91,96,101,103],$VU1,{12:$Vv,14:$V_1,23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),{14:[1,304],23:[1,305]},o($V$1,[2,7]),{15:[1,306]},o($Vo,$Va,{32:4,33:5,6:6,35:8,36:9,37:10,38:11,49:26,93:34,95:36,48:47,4:48,62:247,66:307,34:308,5:$Vp,7:$V0,11:$Vc,12:$Vd,25:$Ve,26:$Vq,39:$V2,52:$Vr,53:$V3,60:$V4,68:$V5,72:$V6,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),o($V8,[2,59]),o($VN,[2,95]),o($V91,[2,135]),{14:[1,309]},o($V91,[2,137]),{14:[1,310]},o($V8,[2,45]),o($Vt,$Va,{49:26,93:34,95:36,48:311,5:$Vb,11:$Vc,12:$Vd,25:$Ve,26:$Vf,79:$Vg,89:$Vh,90:$Vi,91:$Vj,96:$Vk,101:$Vl,103:$Vm}),{15:[1,312]},{24:313,25:$VV1},{16:[1,314]},o([1,12,20,23,55,56,65,70,75,76,77,78,79,80,81,82,83,84,85,86,87,88,101],[2,57],{32:4,33:5,6:6,34:7,35:8,36:9,37:10,38:11,49:26,93:34,95:36,48:47,4:48,62:296,5:$Vp,7:$V0,11:$Vc,25:$Ve,26:$Vq,39:$V2,52:$Vr,53:$V3,60:$V4,68:$V5,72:$V6,89:$Vh,90:$Vi,91:$Vj,96:$Vk,103:$Vm}),o($V8,[2,58]),o($V91,$VO,{100:315,121:$VP}),o($V91,[2,138]),{12:$Vv,14:[1,316],23:$Vw,55:$Vx,65:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{16:[1,317]},o($V$1,[2,6]),{10:[1,318]},o($V91,[2,136]),o($Vc1,[2,31]),{10:[1,319]},{17:320,27:$V02,28:$V12,29:$V22,30:$V32,31:$V42},{17:326,27:$V02,28:$V12,29:$V22,30:$V32,31:$V42},o($V$1,$V52,{18:327,22:$V62}),o($V72,[2,10]),o($V72,[2,11]),o($V72,[2,12]),o($V72,[2,13]),o($V72,[2,14]),{18:329,19:$V52,22:$V62},o($V$1,[2,8]),o([14,19,23],[2,4]),{19:[1,330]},{4:331,5:$V7,6:6,7:$V0,26:$V1,32:4,33:5,34:7,35:8,36:9,37:10,38:11,39:$V2,53:$V3,60:$V4,68:$V5,72:$V6},{5:$V7,6:6,7:$V0,20:[1,332],26:$V1,32:19,33:5,34:7,35:8,36:9,37:10,38:11,39:$V2,53:$V3,60:$V4,68:$V5,72:$V6},{21:[1,333]},o($V8,[2,3])],
defaultActions: {55:[2,9],189:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Tree } = require('./Simbolos/Tree');
    const { Tipo, tipos, esEntero } = require('./Varios/tipo');
    const { Primitivo } = require('./Expresiones/Primitivo');
    const { Error } = require('./Varios/Error');
    const {Identificador} = require('./Expresiones/Identificador');
    //const {Vector} = require('../Expresiones/Vector');
    //const {Lista} = require('../Expresiones/Lista');
    //Instrucciones
    //const {Print} = require('../Instrucciones/Print');
    const {Declaracion} = require('./Instrucciones/Declaracion');
   // const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');
    //const {DeclaracionLista} = require('../Instrucciones/DeclaracionLista');
    //const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {AsignacionVector} = require('../Instrucciones/AsignacionVector');
   // const {AsignacionLista} = require('../Instrucciones/AsignacionLista');
    /*const {AddLista} = require('../Instrucciones/AddLista');
    
    const {Switch} = require('../Instrucciones/Switch');
    const {Case} = require('../Instrucciones/Case');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');
    const {LlamadaMetodo} = require('../Instrucciones/LlamadaMetodo');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Retorno} = require('../Instrucciones/Retorno');
    *///Expresion
    const {If} = require('./Instrucciones/If');
      const {Retorno} = require('./Instrucciones/Retorno');
    const {Aritmetica} = require('./Expresiones/Aritmetica');
    const {Relacional} = require('./Expresiones/Relacional');
    /*const {Logico} = require('../Expresiones/Logico');
    const {Ternario} = require('../Expresiones/Ternario');
    const {Casteo} = require('../Expresiones/Casteo');
    const {InDecrement} = require('../Expresiones/InDecrement');
    const {Length} = require('../Expresiones/Length');
    const {ToLower} = require('../Expresiones/ToLower');
    const {ToUpper} = require('../Expresiones/ToUpper');
    const {Truncate} = require('../Expresiones/Truncate');
    const {Round} = require('../Expresiones/Round');
    const {TypeOf} = require('../Expresiones/TypeOf');
    const {ToString} = require('../Expresiones/ToString');
    const {ToCharArray} = require('../Expresiones/ToCharArray');*/
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "tk_decimal";
break;
case 1:return "tk_entero";
break;
case 2:return "tk_node";
break;
case 3:return "tk_child";
break;
case 4:console.log(yy_.yytext+"--");return "tk_let";
break;
case 5:return "tk_descendant";
break;
case 6:return "tk_descendatOr"
break;
case 7:return "tk_ancestor";
break;
case 8:return "tk_ancestorOr";
break;
case 9:return "tk_attribute";
break;
case 10:return "tk_following";
break;
case 11:return "tk_followingSi"
break;
case 12:return "tk_parent"
break;
case 13:return "tk_preceding"
break;
case 14:return "tk_precedingSi"
break;
case 15:return "tk_self"
break;
case 16:return "tk_text"
break;
case 17:return "tk_position"
break;
case 18:return "tk_last"
break;
case 19:return "tk_div"
break;
case 20:return "tk_and"
break;
case 21:return "tk_or"
break;
case 22:return "tk_mod"
break;
case 23:console.log(yy_.yytext+"--"); return "tk_for";
break;
case 24:console.log(yy_.yytext+"--"); return "tk_in";
break;
case 25:console.log(yy_.yytext+"--"); return "tk_where";
break;
case 26:console.log(yy_.yytext+"--"); return "tk_order";
break;
case 27:console.log(yy_.yytext+"--"); return "tk_by";
break;
case 28:console.log(yy_.yytext+"--"); return "tk_return";
break;
case 29:console.log(yy_.yytext+"--");return "tk_if";
break;
case 30:console.log(yy_.yytext+"--");return "tk_else";
break;
case 31:console.log(yy_.yytext+"--");return "tk_then";
break;
case 32:console.log(yy_.yytext+"--");return "tk_int";
break;
case 33:console.log(yy_.yytext+"--");return "tk_integer";
break;
case 34:console.log(yy_.yytext+"--");return "tk_string";
break;
case 35:console.log(yy_.yytext+"--");return "tk_DECIMAL";
break;
case 36:console.log(yy_.yytext+"--");return "tk_double";
break;
case 37:console.log(yy_.yytext+"--");return "tk_declare";
break;
case 38:console.log(yy_.yytext+"--");return "tk_function";
break;
case 39:console.log(yy_.yytext+"--");return "tk_AS"
break;
case 40:console.log(yy_.yytext+"--");return "tk_as"
break;
case 41:console.log(yy_.yytext+"--");return "tk_xs"
break;
case 42:console.log(yy_.yytext+"--");return "tk_to"
break;
case 43:console.log(yy_.yytext+"--");return "tk_at"
break;
case 44:console.log(yy_.yytext+"--");return "tk_local";
break;
case 45:console.log(yy_.yytext+"--"); return "tk_gt"
break;
case 46:console.log(yy_.yytext+"--"); return "tk_lt"
break;
case 47:return "tk_barra"
break;
case 48:return "tk_punto"
break;
case 49:return "tk_punto_coma"
break;
case 50:return "tk_coma"
break;
case 51:return "tk_diagonal"
break;
case 52:return "tk_asterisco"
break;
case 53:return "tk_Interroga"
break;
case 54:return "tk_mas"
break;
case 55:return "tk_menos"
break;
case 56:return "tk_menorIgual"
break;
case 57:return "tk_mayorIgual"
break;
case 58:return "tk_menor"
break;
case 59:return "tk_mayor"
break;
case 60:return "tk_distinto"
break;
case 61:console.log(yy_.yytext+"--");return "tk_igualXQUERY"
break;
case 62:return "tk_dosPuntos"
break;
case 63:return "tk_igual"
break;
case 64:return "tk_llaveA"
break;
case 65:return "tk_llaveC"
break;
case 66:return "tk_arroba"
break;
case 67:console.log(yy_.yytext+"--");return "llaveA"
break;
case 68:console.log(yy_.yytext+"--");return "llaveC"
break;
case 69:return "tk_parA"
break;
case 70:return "tk_parC"
break;
case 71:return "tk_stringTexto";
break;
case 72:return "tk_stringTexto";
break;
case 73:return "tk_stringTexto";
break;
case 74:return "tk_stringTexto";
break;
case 75:return "tk_identificador";
break;
case 76:return "tk_identificadorXQUERY";
console.log("indentificador papa")

break;
case 77:return "EOF";
break;
case 78:
break;
case 79:         
    console.log('Léxico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column );

break;
}
},
rules: [/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:node\b)/,/^(?:child\b)/,/^(?:let\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:int\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:double\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:AS\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:local\b)/,/^(?:gt\b)/,/^(?:lt\b)/,/^(?:\|)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\/)/,/^(?:\*)/,/^(?:\?)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:@)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:“[^\“]*“)/,/^(?:'[^\']*')/,/^(?:‘[^\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:[$]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \t\r\n\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXquery;
exports.Parser = GramaticaXquery.Parser;
exports.parse = function () { return GramaticaXquery.parse.apply(GramaticaXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}