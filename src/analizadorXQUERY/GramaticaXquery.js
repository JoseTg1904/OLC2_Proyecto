/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,16],$V2=[1,15],$V3=[1,14],$V4=[1,17],$V5=[1,13],$V6=[1,11],$V7=[5,7,11,12,20,23,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,103,105],$V8=[7,20,23,39,52,53,55,56,60,65,68,70,74,77,78,79,80,82,83,84,85,86,87,88,89,90],$V9=[2,97],$Va=[1,34],$Vb=[1,29],$Vc=[1,31],$Vd=[1,30],$Ve=[1,32],$Vf=[1,38],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,36],$Vk=[1,37],$Vl=[1,39],$Vm=[1,42],$Vn=[20,23,55,56,65,70,77,78,79,80,82,83,84,85,86,87,88,89,90],$Vo=[1,49],$Vp=[1,48],$Vq=[23,76],$Vr=[14,23,55,65,77,78,79,80,82,83,84,85,86,87,88,89,90],$Vs=[5,7,11,20,25,26,39,52,53,56,60,68,70,74,91,92,93,98,103,105],$Vt=[1,72],$Vu=[1,70],$Vv=[1,71],$Vw=[1,66],$Vx=[1,55],$Vy=[1,56],$Vz=[1,57],$VA=[1,58],$VB=[1,59],$VC=[1,60],$VD=[1,61],$VE=[1,62],$VF=[1,63],$VG=[1,64],$VH=[1,65],$VI=[1,67],$VJ=[1,68],$VK=[1,69],$VL=[5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,103,105],$VM=[2,141],$VN=[1,74],$VO=[1,77],$VP=[5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,98,103,105],$VQ=[1,83],$VR=[1,82],$VS=[1,88],$VT=[1,89],$VU=[1,86],$VV=[1,90],$VW=[1,91],$VX=[1,93],$VY=[1,94],$VZ=[1,95],$V_=[1,96],$V$=[1,97],$V01=[1,98],$V11=[1,99],$V21=[1,100],$V31=[1,101],$V41=[1,102],$V51=[1,103],$V61=[1,104],$V71=[2,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,98,103,105],$V81=[1,113],$V91=[1,114],$Va1=[23,52,53,56,60],$Vb1=[7,14,20,23,39,52,53,55,56,60,65,68,70,74,77,78,79,80,82,83,84,85,86,87,88,89,90],$Vc1=[5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,98,105],$Vd1=[2,115],$Ve1=[1,148],$Vf1=[1,152],$Vg1=[1,145],$Vh1=[1,146],$Vi1=[1,151],$Vj1=[1,147],$Vk1=[1,149],$Vl1=[1,150],$Vm1=[1,153],$Vn1=[11,81,98,105,106,109,111,112,113,114,115,116,117,118,119,120,121],$Vo1=[1,167],$Vp1=[1,166],$Vq1=[1,168],$Vr1=[5,7,11,14,20,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,98,103,105],$Vs1=[5,7,11,14,20,25,26,39,52,53,55,56,60,65,68,70,74,79,80,81,82,83,84,85,86,87,88,89,91,92,93,98,103,105],$Vt1=[5,7,11,14,20,25,26,39,52,53,55,56,60,65,68,70,74,80,82,83,84,85,86,87,88,89,91,92,93,98,103,105],$Vu1=[5,7,11,14,20,25,26,39,52,53,55,56,60,65,68,70,74,80,88,89,91,92,93,98,103,105],$Vv1=[5,7,11,14,20,25,26,39,52,53,56,60,68,70,74,91,92,93,98,103,105],$Vw1=[1,208],$Vx1=[1,204],$Vy1=[1,197],$Vz1=[1,196],$VA1=[1,198],$VB1=[1,199],$VC1=[1,209],$VD1=[1,200],$VE1=[1,201],$VF1=[1,202],$VG1=[1,203],$VH1=[1,205],$VI1=[1,206],$VJ1=[1,207],$VK1=[14,55,65,77,78,79,80,81,82,85,86,87,88,89,90,125],$VL1=[2,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,98,103,105,125],$VM1=[1,234],$VN1=[1,269],$VO1=[1,267],$VP1=[1,268],$VQ1=[1,270],$VR1=[1,290],$VS1=[14,55,65,77,78,79,80,81,82,85,86,87,88,89,125],$VT1=[14,55,65,79,80,81,82,85,86,87,88,89,125],$VU1=[14,55,65,80,82,85,86,87,88,89,125],$VV1=[14,55,65,80,88,89,125],$VW1=[14,23],$VX1=[2,95],$VY1=[1,318],$VZ1=[1,319],$V_1=[1,320],$V$1=[1,321],$V02=[1,322],$V12=[2,4],$V22=[1,325],$V32=[14,19,22,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO_XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FUNCION":6,"tk_declare":7,"tk_function":8,"MENU_LOCAL":9,"tk_dosPuntos":10,"tk_identificador":11,"tk_parA":12,"LISTA_DECLARACION_FUNCION":13,"tk_parC":14,"tk_as":15,"tk_xs":16,"TIPO_DATO":17,"MENU_INTERROGA":18,"llaveA":19,"llaveC":20,"tk_punto_coma":21,"tk_Interroga":22,"tk_coma":23,"DECLARACION_FUNCION":24,"tk_identificadorXQUERY":25,"tk_local":26,"tk_int":27,"tk_string":28,"tk_double":29,"tk_DECIMAL":30,"tk_integer":31,"INSTRUCCION":32,"DECLARACION_GLOBAL":33,"IF":34,"WHERE":35,"FOR":36,"LLAMADA_FUNCION":37,"RETURN_CICLO":38,"tk_for":39,"DECLARACIONES_FOR":40,"OPCIONES_FOR":41,"DECLARACION_FOR":42,"OPCION_AT":43,"tk_in":44,"FOR_REC":45,"tk_at":46,"XPATH":47,"EXP_XQUERY":48,"CORDERNADA":49,"OPCION_FOR":50,"ORDER":51,"ComentarioM":52,"tk_where":53,"CONDITIONES_WHERE":54,"tk_and":55,"tk_order":56,"tk_by":57,"LISTA_ORDER":58,"ORDER_":59,"tk_return":60,"Lista_Ciclo":61,"valor_if":62,"LISTA_ASIGNACION":63,"ASIGNACION_SIMPLE":64,"tk_igual":65,"valores_if":66,"TK":67,"tk_if":68,"tk_then":69,"tk_else":70,"ELSE":71,"CONDICION":72,"OPCIONES_CONDICION":73,"tk_let":74,"LISTA_ID":75,"tk_igualXQUERY":76,"tk_menos":77,"tk_mas":78,"tk_div":79,"tk_mod":80,"tk_asterisco":81,"tk_menor":82,"tk_gt":83,"tk_lt":84,"tk_mayor":85,"tk_menorIgual":86,"tk_mayorIgual":87,"tk_distinto":88,"tk_or":89,"tk_to":90,"tk_entero":91,"tk_decimal":92,"tk_stringTexto":93,"OPCION_IDQ":94,"INICIO":95,"tk_barra":96,"INICIALES":97,"tk_punto":98,"DIAGONALES":99,"DERIVADOSLIMITADO":100,"DERIVACIONDIAGONAL":101,"PREDICATE":102,"tk_diagonal":103,"DERIVADOS":104,"tk_node":105,"tk_arroba":106,"ATRIBUTO":107,"AXES":108,"tk_child":109,"NODETEST":110,"tk_descendant":111,"tk_descendatOr":112,"tk_ancestor":113,"tk_ancestorOr":114,"tk_attribute":115,"tk_following":116,"tk_followingSi":117,"tk_parent":118,"tk_preceding":119,"tk_precedingSi":120,"tk_self":121,"tk_text":122,"tk_llaveA":123,"EXPRESION":124,"tk_llaveC":125,"tk_position":126,"tk_last":127,"tk_ParC":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_declare",8:"tk_function",10:"tk_dosPuntos",11:"tk_identificador",12:"tk_parA",14:"tk_parC",15:"tk_as",16:"tk_xs",19:"llaveA",20:"llaveC",21:"tk_punto_coma",22:"tk_Interroga",23:"tk_coma",25:"tk_identificadorXQUERY",26:"tk_local",27:"tk_int",28:"tk_string",29:"tk_double",30:"tk_DECIMAL",31:"tk_integer",39:"tk_for",44:"tk_in",46:"tk_at",52:"ComentarioM",53:"tk_where",55:"tk_and",56:"tk_order",57:"tk_by",60:"tk_return",65:"tk_igual",67:"TK",68:"tk_if",69:"tk_then",70:"tk_else",74:"tk_let",76:"tk_igualXQUERY",77:"tk_menos",78:"tk_mas",79:"tk_div",80:"tk_mod",81:"tk_asterisco",82:"tk_menor",83:"tk_gt",84:"tk_lt",85:"tk_mayor",86:"tk_menorIgual",87:"tk_mayorIgual",88:"tk_distinto",89:"tk_or",90:"tk_to",91:"tk_entero",92:"tk_decimal",93:"tk_stringTexto",96:"tk_barra",98:"tk_punto",103:"tk_diagonal",105:"tk_node",106:"tk_arroba",109:"tk_child",111:"tk_descendant",112:"tk_descendatOr",113:"tk_ancestor",114:"tk_ancestorOr",115:"tk_attribute",116:"tk_following",117:"tk_followingSi",118:"tk_parent",119:"tk_preceding",120:"tk_precedingSi",121:"tk_self",122:"tk_text",123:"tk_llaveA",125:"tk_llaveC",126:"tk_position",127:"tk_last",128:"tk_ParC"},
productions_: [0,[3,2],[6,17],[18,1],[18,0],[13,3],[13,1],[24,6],[9,1],[17,1],[17,1],[17,1],[17,1],[17,1],[4,2],[4,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[36,3],[40,3],[40,1],[42,4],[43,2],[43,0],[45,1],[45,1],[45,1],[41,2],[41,1],[50,1],[50,1],[50,1],[50,1],[35,2],[54,3],[54,1],[51,3],[58,3],[58,1],[59,2],[59,1],[38,2],[61,3],[61,1],[63,3],[63,1],[64,3],[64,4],[34,6],[34,8],[34,8],[71,2],[71,2],[71,0],[66,2],[66,1],[62,1],[62,1],[62,1],[37,6],[72,3],[73,1],[73,2],[33,4],[75,3],[75,1],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,3],[48,1],[48,1],[48,1],[48,1],[48,2],[48,3],[48,6],[48,4],[48,0],[94,1],[94,0],[49,5],[47,1],[47,1],[95,3],[95,1],[97,4],[97,3],[97,3],[97,4],[97,3],[97,5],[99,1],[99,2],[99,2],[101,3],[101,0],[100,2],[100,2],[100,4],[100,2],[100,1],[104,1],[104,2],[104,1],[108,4],[108,4],[108,4],[108,4],[108,4],[108,4],[108,4],[108,4],[108,4],[108,4],[108,4],[108,4],[110,2],[110,4],[110,2],[110,3],[102,3],[102,0],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,1],[124,1],[124,2],[124,1],[124,3],[124,3],[124,1],[124,3],[107,1],[107,1],[107,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 16:
console.log($$[$0])
break;
case 46:
this.$=new Retorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 47:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 48:
this.$=$$[$0];
break;
case 53:
this.$=
break;
case 61:
 this.$ = $$[$0]
break;
case 64:
  this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]
break;
case 68:
this.$=new Declaracion(new Tipo(tipos.VARIABLE),$$[$0-2],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column ) 
break;
case 69:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];  
break;
case 70:
this.$=$$[$0]
break;
case 71:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 72:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 73:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 74:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 75:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 76: case 78:

            this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 77: case 79:

            this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 80:

            this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 81:

            this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 82:

            this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 83:

            this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 84:

            this.$ = new Logico($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 85: case 86:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 88:

            this.$ = new Logico($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 89: case 90:

            this.$ = new Primitivo(new Tipo(esEntero(Number($$[$0]))), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
        
break;
case 91:

            this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 92:

            this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 93:
this.$=$$[$0-1]+$$[$0]
break;
case 94:

            this.$ = $$[$0-1]
        
break;
case 95:
  this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
}
},
table: [{3:1,4:2,6:5,7:$V0,26:$V1,32:3,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,53:$V3,60:$V4,68:$V5,74:$V6},{1:[3]},{5:[1,18],6:5,7:$V0,26:$V1,32:19,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,53:$V3,60:$V4,68:$V5,74:$V6},o($V7,[2,15]),o($V7,[2,16]),o($V7,[2,17]),o($V7,[2,18]),o($V7,[2,19]),o($V7,[2,20]),o($V7,[2,21]),o($V7,[2,22]),{25:[1,21],75:20},{8:[1,22]},{12:[1,23]},o($V8,$V9,{48:24,47:25,95:33,97:35,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),{25:$Vm,40:40,42:41},{10:[1,43]},o($Vn,$V9,{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,47:25,95:33,97:35,61:44,62:45,48:46,4:47,5:$Va,7:$V0,11:$Vb,12:$Vc,25:$Vd,26:$Vo,39:$V2,52:$Vp,53:$V3,60:$V4,68:$V5,74:$V6,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),{1:[2,1]},o($V7,[2,14]),{23:[1,51],76:[1,50]},o($Vq,[2,70]),{9:52,26:[1,53]},o($Vr,$V9,{47:25,95:33,97:35,48:54,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vs,[2,38],{12:$Vt,23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK}),o($VL,[2,87]),o($VL,[2,89]),o($VL,[2,90]),o($VL,[2,91]),o($VL,[2,92],{102:73,2:$VM,96:$VM,123:$VN}),o([7,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93],[2,99],{95:33,97:35,94:75,47:76,5:$Va,11:$VO,81:$Vf,98:$Vj,103:$Vk,105:$Vl}),o($Vr,$V9,{47:25,95:33,97:35,48:78,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),{10:[1,79]},o($VL,[2,101],{96:[1,80]}),o($VL,[2,102]),o($VP,[2,104]),{2:$VQ,99:81,103:$VR},{11:$VS,81:$VT,98:$VU,100:87,103:[1,85],104:84,105:$VV,106:$VW,108:92,109:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61},o($V71,$VM,{102:105,123:$VN}),{12:[1,106]},{23:[1,108],35:110,38:112,41:107,50:109,51:111,52:$V81,53:$V3,56:$V91,60:$V4},o($Va1,[2,25]),{43:115,44:[2,28],46:[1,116]},{11:[1,117]},o([5,7,11,12,20,23,25,26,39,52,53,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,103,105],[2,46],{55:[1,118]}),o($V7,[2,48]),o($Vs,[2,61],{12:$Vt,23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK}),o([5,11,12,20,23,25,52,55,56,65,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,103,105],[2,62],{33:4,6:5,34:6,35:7,36:8,37:9,38:10,32:19,7:$V0,26:$V1,39:$V2,53:$V3,60:$V4,68:$V5,74:$V6}),o($V7,[2,63]),{10:[1,119]},o($V8,$V9,{47:25,95:33,97:35,48:120,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),{25:[1,121]},{10:[1,122]},{10:[2,8]},{12:$Vt,14:[1,123],23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},o($Vb1,$V9,{47:25,95:33,97:35,48:124,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:125,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:126,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:127,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:128,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:129,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:130,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:131,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:132,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:133,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:134,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:135,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:136,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:137,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:138,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:139,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vb1,$V9,{47:25,95:33,97:35,48:140,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vr,$V9,{47:25,95:33,97:35,48:141,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($Vc1,$Vd1,{101:142,99:143,2:$VQ,103:$VR}),{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:144,126:$Vk1,127:$Vl1},o($VL,[2,93]),o($VL,[2,98]),o($V71,$VM,{102:73,123:$VN}),{12:$Vt,14:$Vm1,23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},{11:[1,154]},{11:$VO,81:$Vf,97:155,98:$Vj,103:$Vk,105:$Vl},{11:$VS,81:$VT,100:156,105:$VV,106:$VW,108:92,109:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61},o($Vn1,[2,111],{103:[1,157]}),{103:[1,158]},o($Vc1,$Vd1,{99:143,101:159,2:$VQ,103:$VR}),{11:$VS,81:$VT,98:$VU,100:87,104:160,105:$VV,106:$VW,108:92,109:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61},o([2,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,103,105],[2,121],{98:[1,161]}),o($V71,[2,123]),o($V71,$VM,{102:162,123:$VN}),o($V71,$VM,{102:163,123:$VN}),{12:[1,164]},{11:$Vo1,81:$Vp1,105:$Vq1,107:165},o($V71,[2,120]),{10:[1,169]},{10:[1,170]},{10:[1,171]},{10:[1,172]},{10:[1,173]},{10:[1,174]},{10:[1,175]},{10:[1,176]},{10:[1,177]},{10:[1,178]},{10:[1,179]},{10:[1,180]},o($Vc1,$Vd1,{99:143,101:181,2:$VQ,103:$VR}),{14:[1,182]},o([5,7,11,12,20,23,25,26,39,55,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,103,105],[2,23],{35:110,51:111,38:112,50:183,52:$V81,53:$V3,56:$V91,60:$V4}),{25:$Vm,42:184},o($V7,[2,33]),o($V7,[2,34]),o($V7,[2,35]),o($V7,[2,36]),o($V7,[2,37]),{57:[1,185]},{44:[1,186]},{25:[1,187]},{12:[1,188]},o($Vn,$V9,{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,47:25,95:33,97:35,48:46,4:47,62:189,5:$Va,7:$V0,11:$Vb,12:$Vc,25:$Vd,26:$Vo,39:$V2,52:$Vp,53:$V3,60:$V4,68:$V5,74:$V6,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),{11:[1,190]},o([5,7,11,20,25,26,39,52,53,55,56,60,65,68,70,74,80,88,89,91,92,93,98,103,105],[2,68],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,79:$Vz,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,90:$VK}),o($Vq,[2,69]),{11:[1,191]},{69:[1,192]},o($Vr1,[2,71],{12:$Vt,23:$Vu,90:$VK}),o($Vr1,[2,72],{12:$Vt,23:$Vu,90:$VK}),o($Vs1,[2,73],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,90:$VK}),o([5,7,11,14,20,25,26,39,52,53,56,60,68,70,74,80,91,92,93,98,103,105],[2,74],{12:$Vt,23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK}),o($Vs1,[2,75],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,90:$VK}),o($Vt1,[2,76],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,79:$Vz,81:$VB,90:$VK}),o($Vt1,[2,77],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,79:$Vz,81:$VB,90:$VK}),o($Vt1,[2,78],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,79:$Vz,81:$VB,90:$VK}),o($Vt1,[2,79],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,79:$Vz,81:$VB,90:$VK}),o($Vt1,[2,80],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,79:$Vz,81:$VB,90:$VK}),o($Vt1,[2,81],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,79:$Vz,81:$VB,90:$VK}),o($Vu1,[2,82],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,79:$Vz,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,90:$VK}),o($Vu1,[2,83],{12:$Vt,23:$Vu,77:$Vx,78:$Vy,79:$Vz,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,90:$VK}),o([5,7,11,14,20,25,26,39,52,53,56,60,68,70,74,80,89,91,92,93,98,103,105],[2,84],{12:$Vt,23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,90:$VK}),o($Vv1,[2,85],{12:$Vt,23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK}),o($Vv1,[2,86],{12:$Vt,23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK}),o([5,7,11,14,20,25,26,39,52,53,55,56,60,68,70,74,80,89,91,92,93,98,103,105],[2,88],{12:$Vt,23:$Vu,65:$Vw,77:$Vx,78:$Vy,79:$Vz,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,90:$VK}),{12:$Vt,14:[1,193],23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},o($VP,[2,106]),{11:$VS,81:$VT,98:$VU,100:87,104:194,105:$VV,106:$VW,108:92,109:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61},{55:$Vw1,65:$Vx1,77:$Vy1,78:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,85:$VE1,86:$VF1,87:$VG1,88:$VH1,89:$VI1,90:$VJ1,125:[1,195]},o($VK1,[2,156]),o($VK1,[2,157]),{11:$Vo1,81:$Vp1,105:$Vq1,107:210},o($VK1,[2,159]),{12:[1,211]},{12:[1,212]},o($VK1,[2,162]),{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:213,126:$Vk1,127:$Vl1},o($VL,[2,94]),{12:[1,214]},o($VP,[2,103]),o($Vc1,$Vd1,{99:143,101:215,2:$VQ,103:$VR}),o($Vn1,[2,112]),o($Vn1,[2,113]),o($VP,[2,107]),o($Vc1,$Vd1,{99:143,101:216,2:$VQ,103:$VR}),o($V71,[2,122]),o($V71,[2,116]),o($V71,[2,117]),{14:[1,217]},o($V71,[2,119]),o($VL1,[2,164]),o($VL1,[2,165]),{12:[1,218]},{10:[1,219]},{10:[1,220]},{10:[1,221]},{10:[1,222]},{10:[1,223]},{10:[1,224]},{10:[1,225]},{10:[1,226]},{10:[1,227]},{10:[1,228]},{10:[1,229]},{10:[1,230]},o($VP,[2,109]),o($V71,$VM,{102:231,123:$VN}),o($V7,[2,32]),o($Va1,[2,24]),{25:$VM1,58:232,59:233},o([23,52,53,55,56,60,65,77,78,79,80,82,83,84,85,86,87,88,89,90],$V9,{95:33,97:35,45:235,47:236,48:237,49:238,5:$Va,11:$Vb,12:[1,239],25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),{44:[2,27]},o($Vr,$V9,{47:25,95:33,97:35,48:240,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($V7,[2,47]),{12:[1,241]},{12:[1,242]},o($Vn,$V9,{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,47:25,95:33,97:35,48:46,4:47,66:243,62:244,5:$Va,7:$V0,11:$Vb,12:$Vc,25:$Vd,26:$Vo,39:$V2,52:$Vp,53:$V3,60:$V4,68:$V5,74:$V6,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($VL,[2,96]),o($Vc1,$Vd1,{99:143,101:245,2:$VQ,103:$VR}),o($V71,[2,140]),{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:246,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:247,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:248,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:249,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:250,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:251,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:252,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:253,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:254,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:255,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:256,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:257,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:258,126:$Vk1,127:$Vl1},{11:$Ve1,12:$Vf1,91:$Vg1,92:$Vh1,93:$Vi1,106:$Vj1,124:259,126:$Vk1,127:$Vl1},o($VK1,[2,158]),{14:[1,260]},{14:[1,261]},{14:[1,262],55:$Vw1,65:$Vx1,77:$Vy1,78:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,85:$VE1,86:$VF1,87:$VG1,88:$VH1,89:$VI1,90:$VJ1},o($Vr,$V9,{47:25,95:33,97:35,48:263,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($VP,[2,105]),o($VP,[2,108]),o($V71,$VM,{102:264,123:$VN}),{128:[1,265]},{11:$VN1,81:$VO1,105:$VP1,110:266,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:271,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:272,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:273,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:274,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:275,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:276,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:277,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:278,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:279,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:280,122:$VQ1},{11:$VN1,81:$VO1,105:$VP1,110:281,122:$VQ1},o($Vc1,$Vd1,{99:143,101:282,2:$VQ,103:$VR}),o([5,7,11,12,20,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,103,105],[2,41],{23:[1,283]}),o($V7,[2,43]),o([7,12,20,23,25,26,39,52,53,55,56,60,65,68,70,74,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93],[2,45],{95:33,97:35,47:284,5:$Va,11:$VO,81:$Vf,98:$Vj,103:$Vk,105:$Vl}),o($Va1,[2,26]),o([12,23,52,53,55,56,60,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90],[2,29]),o([52,53,56,60],[2,30],{12:$Vt,23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK}),o($Va1,[2,31]),o($Vr,$V9,{47:25,95:33,97:35,48:285,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),{12:$Vt,14:[1,286],23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},o($Vr,$V9,{47:25,95:33,97:35,48:287,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),{13:288,24:289,25:$VR1},o([12,20,23,55,56,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,103],[2,53],{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,47:25,95:33,97:35,48:46,4:47,62:292,5:$Va,7:$V0,11:$Vb,25:$Vd,26:$Vo,39:$V2,52:$Vp,53:$V3,60:$V4,68:$V5,70:[1,291],74:$V6,91:$Vg,92:$Vh,93:$Vi,98:$Vj,105:$Vl}),o($V7,[2,60]),o($VP,[2,114]),o($VS1,[2,142],{90:$VJ1}),o($VS1,[2,143],{90:$VJ1}),o($VT1,[2,144],{77:$Vy1,78:$Vz1,90:$VJ1}),o([14,80,125],[2,145],{55:$Vw1,65:$Vx1,77:$Vy1,78:$Vz1,79:$VA1,81:$VC1,82:$VD1,85:$VE1,86:$VF1,87:$VG1,88:$VH1,89:$VI1,90:$VJ1}),o($VU1,[2,146],{77:$Vy1,78:$Vz1,79:$VA1,81:$VC1,90:$VJ1}),o($VU1,[2,147],{77:$Vy1,78:$Vz1,79:$VA1,81:$VC1,90:$VJ1}),o($VU1,[2,148],{77:$Vy1,78:$Vz1,79:$VA1,81:$VC1,90:$VJ1}),o($VU1,[2,149],{77:$Vy1,78:$Vz1,79:$VA1,81:$VC1,90:$VJ1}),o($VV1,[2,150],{77:$Vy1,78:$Vz1,79:$VA1,81:$VC1,82:$VD1,85:$VE1,86:$VF1,87:$VG1,90:$VJ1}),o($VV1,[2,151],{77:$Vy1,78:$Vz1,79:$VA1,81:$VC1,82:$VD1,85:$VE1,86:$VF1,87:$VG1,90:$VJ1}),o([14,80,89,125],[2,152],{55:$Vw1,65:$Vx1,77:$Vy1,78:$Vz1,79:$VA1,81:$VC1,82:$VD1,85:$VE1,86:$VF1,87:$VG1,88:$VH1,90:$VJ1}),o([14,125],[2,153],{55:$Vw1,65:$Vx1,77:$Vy1,78:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,85:$VE1,86:$VF1,87:$VG1,88:$VH1,89:$VI1,90:$VJ1}),o([14,55,80,89,125],[2,154],{65:$Vx1,77:$Vy1,78:$Vz1,79:$VA1,81:$VC1,82:$VD1,85:$VE1,86:$VF1,87:$VG1,88:$VH1,90:$VJ1}),o($VT1,[2,155],{77:$Vy1,78:$Vz1,90:$VJ1}),o($VK1,[2,160]),o($VK1,[2,161]),o($VK1,[2,163]),{12:$Vt,14:[1,293],23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},o($V71,[2,118]),o($VL1,[2,166]),o($V71,[2,124]),o($V71,$VM,{102:294,123:$VN}),{12:[1,295]},o($V71,$VM,{102:296,123:$VN}),{12:[1,297]},o($V71,[2,125]),o($V71,[2,126]),o($V71,[2,127]),o($V71,[2,128]),o($V71,[2,129]),o($V71,[2,130]),o($V71,[2,131]),o($V71,[2,132]),o($V71,[2,133]),o($V71,[2,134]),o($V71,[2,135]),o($VP,[2,110]),{25:$VM1,59:298},o($V7,[2,44]),{12:$Vt,14:$Vm1,23:[1,299],55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},o($V7,[2,64]),{12:$Vt,14:[1,300],23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},{14:[1,301],23:[1,302]},o($VW1,[2,6]),{15:[1,303]},o($Vn,$V9,{32:3,33:4,6:5,35:7,36:8,37:9,38:10,47:25,95:33,97:35,48:46,4:47,62:304,34:305,5:$Va,7:$V0,11:$Vb,12:$Vc,25:$Vd,26:$Vo,39:$V2,52:$Vp,53:$V3,60:$V4,68:$V5,74:$V6,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($V7,[2,59]),o($VL,$VX1),o($V71,[2,136]),{14:[1,306]},o($V71,[2,138]),{14:[1,307]},o($V7,[2,42]),o($Vr,$V9,{47:25,95:33,97:35,48:308,5:$Va,11:$Vb,12:$Vc,25:$Vd,26:$Ve,81:$Vf,91:$Vg,92:$Vh,93:$Vi,98:$Vj,103:$Vk,105:$Vl}),o($V7,$VX1),{15:[1,309]},{24:310,25:$VR1},{16:[1,311]},o($V7,[2,54]),o($V7,[2,55]),o($V71,$VM,{102:312,123:$VN}),o($V71,[2,139]),{12:$Vt,14:[1,313],23:$Vu,55:$Vv,65:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},{16:[1,314]},o($VW1,[2,5]),{10:[1,315]},o($V71,[2,137]),o($Va1,[2,100]),{10:[1,316]},{17:317,27:$VY1,28:$VZ1,29:$V_1,30:$V$1,31:$V02},{17:323,27:$VY1,28:$VZ1,29:$V_1,30:$V$1,31:$V02},o($VW1,$V12,{18:324,22:$V22}),o($V32,[2,9]),o($V32,[2,10]),o($V32,[2,11]),o($V32,[2,12]),o($V32,[2,13]),{18:326,19:$V12,22:$V22},o($VW1,[2,7]),o([14,19,23],[2,3]),{19:[1,327]},{4:328,6:5,7:$V0,26:$V1,32:3,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,53:$V3,60:$V4,68:$V5,74:$V6},{6:5,7:$V0,20:[1,329],26:$V1,32:19,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,53:$V3,60:$V4,68:$V5,74:$V6},{21:[1,330]},o($V7,[2,2])],
defaultActions: {18:[2,1],53:[2,8],187:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Tree } = require('./Simbolos/Tree');
    const { Tipo, tipos, esEntero } = require('./Varios/tipo');
    const { Primitivo } = require('./Expresiones/Primitivo');
    const { Error } = require('./Varios/Error');
    const {Identificador} = require('./Expresiones/Identificador');
    //const {Vector} = require('../Expresiones/Vector');
    //const {Lista} = require('../Expresiones/Lista');
    //Instrucciones
    //const {Print} = require('../Instrucciones/Print');
    const {Declaracion} = require('./Instrucciones/Declaracion');
   // const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');
    //const {DeclaracionLista} = require('../Instrucciones/DeclaracionLista');
    //const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {AsignacionVector} = require('../Instrucciones/AsignacionVector');
   // const {AsignacionLista} = require('../Instrucciones/AsignacionLista');
    /*const {AddLista} = require('../Instrucciones/AddLista');
    
    const {Switch} = require('../Instrucciones/Switch');
    const {Case} = require('../Instrucciones/Case');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');
    const {LlamadaMetodo} = require('../Instrucciones/LlamadaMetodo');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Retorno} = require('../Instrucciones/Retorno');
    *///Expresion
    const {If} = require('./Instrucciones/If');
      const {Retorno} = require('./Instrucciones/Retorno');
    const {Aritmetica} = require('./Expresiones/Aritmetica');
    const {Relacional} = require('./Expresiones/Relacional');
    /*const {Logico} = require('../Expresiones/Logico');
    const {Ternario} = require('../Expresiones/Ternario');
    const {Casteo} = require('../Expresiones/Casteo');
    const {InDecrement} = require('../Expresiones/InDecrement');
    const {Length} = require('../Expresiones/Length');
    const {ToLower} = require('../Expresiones/ToLower');
    const {ToUpper} = require('../Expresiones/ToUpper');
    const {Truncate} = require('../Expresiones/Truncate');
    const {Round} = require('../Expresiones/Round');
    const {TypeOf} = require('../Expresiones/TypeOf');
    const {ToString} = require('../Expresiones/ToString');
    const {ToCharArray} = require('../Expresiones/ToCharArray');*/
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "tk_decimal";
break;
case 1:return "tk_entero";
break;
case 2:return "tk_node";
break;
case 3:return "tk_child";
break;
case 4:console.log(yy_.yytext+"--");return "tk_let";
break;
case 5:return "tk_descendant";
break;
case 6:return "tk_descendatOr"
break;
case 7:return "tk_ancestor";
break;
case 8:return "tk_ancestorOr";
break;
case 9:return "tk_attribute";
break;
case 10:return "tk_following";
break;
case 11:return "tk_followingSi"
break;
case 12:return "tk_parent"
break;
case 13:return "tk_preceding"
break;
case 14:return "tk_precedingSi"
break;
case 15:return "tk_self"
break;
case 16:return "tk_text"
break;
case 17:return "tk_position"
break;
case 18:return "tk_last"
break;
case 19:return "tk_div"
break;
case 20:return "tk_and"
break;
case 21:return "tk_or"
break;
case 22:return "tk_mod"
break;
case 23:console.log(yy_.yytext+"--"); return "tk_for";
break;
case 24:console.log(yy_.yytext+"--"); return "tk_in";
break;
case 25:console.log(yy_.yytext+"--"); return "tk_where";
break;
case 26:console.log(yy_.yytext+"--"); return "tk_order";
break;
case 27:console.log(yy_.yytext+"--"); return "tk_by";
break;
case 28:console.log(yy_.yytext+"--"); return "tk_return";
break;
case 29:console.log(yy_.yytext+"--");return "tk_if";
break;
case 30:console.log(yy_.yytext+"--");return "tk_else";
break;
case 31:console.log(yy_.yytext+"--");return "tk_then";
break;
case 32:console.log(yy_.yytext+"--");return "tk_int";
break;
case 33:console.log(yy_.yytext+"--");return "tk_integer";
break;
case 34:console.log(yy_.yytext+"--");return "tk_string";
break;
case 35:console.log(yy_.yytext+"--");return "tk_DECIMAL";
break;
case 36:console.log(yy_.yytext+"--");return "tk_double";
break;
case 37:console.log(yy_.yytext+"--");return "tk_declare";
break;
case 38:console.log(yy_.yytext+"--");return "tk_function";
break;
case 39:console.log(yy_.yytext+"--");return "tk_AS"
break;
case 40:console.log(yy_.yytext+"--");return "tk_as"
break;
case 41:console.log(yy_.yytext+"--");return "tk_xs"
break;
case 42:console.log(yy_.yytext+"--");return "tk_to"
break;
case 43:console.log(yy_.yytext+"--");return "tk_at"
break;
case 44:console.log(yy_.yytext+"--");return "tk_local";
break;
case 45:console.log(yy_.yytext+"--"); return "tk_gt"
break;
case 46:console.log(yy_.yytext+"--"); return "tk_lt"
break;
case 47:return "tk_barra"
break;
case 48:return "tk_punto"
break;
case 49:return "tk_punto_coma"
break;
case 50:return "tk_coma"
break;
case 51:return "tk_diagonal"
break;
case 52:return "tk_asterisco"
break;
case 53:return "tk_Interroga"
break;
case 54:return "tk_mas"
break;
case 55:return "tk_menos"
break;
case 56:return "tk_menorIgual"
break;
case 57:return "tk_mayorIgual"
break;
case 58:return "tk_menor"
break;
case 59:return "tk_mayor"
break;
case 60:return "tk_distinto"
break;
case 61:console.log(yy_.yytext+"--");return "tk_igualXQUERY"
break;
case 62:return "tk_dosPuntos"
break;
case 63:return "tk_igual"
break;
case 64:return "tk_llaveA"
break;
case 65:return "tk_llaveC"
break;
case 66:return "tk_arroba"
break;
case 67:console.log(yy_.yytext+"--");return "llaveA"
break;
case 68:console.log(yy_.yytext+"--");return "llaveC"
break;
case 69:return "tk_parA"
break;
case 70:return "tk_parC"
break;
case 71:return "tk_stringTexto";
break;
case 72:return "tk_stringTexto";
break;
case 73:return "tk_stringTexto";
break;
case 74:return "tk_stringTexto";
break;
case 75:return "tk_identificador";
break;
case 76:return "tk_identificadorXQUERY";
console.log("indentificador papa")

break;
case 77:return "EOF";
break;
case 78:
break;
case 79:         
    console.log('Léxico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column );

break;
}
},
rules: [/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:node\b)/,/^(?:child\b)/,/^(?:let\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:int\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:double\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:AS\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:local\b)/,/^(?:gt\b)/,/^(?:lt\b)/,/^(?:\|)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\/)/,/^(?:\*)/,/^(?:\?)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:@)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:“[^\“]*“)/,/^(?:'[^\']*')/,/^(?:‘[^\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:[$]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \t\r\n\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXquery;
exports.Parser = GramaticaXquery.Parser;
exports.parse = function () { return GramaticaXquery.parse.apply(GramaticaXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}