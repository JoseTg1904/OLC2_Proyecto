/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,16],$V2=[1,15],$V3=[1,14],$V4=[1,17],$V5=[1,13],$V6=[1,11],$V7=[5,7,11,12,20,25,26,39,52,53,56,60,66,69,73,90,91,92],$V8=[1,27],$V9=[1,30],$Va=[1,29],$Vb=[1,31],$Vc=[1,25],$Vd=[1,26],$Ve=[1,28],$Vf=[1,34],$Vg=[1,39],$Vh=[23,75],$Vi=[1,59],$Vj=[1,55],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,60],$Vy=[5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,63,66,69,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],$Vz=[2,87],$VA=[2,93],$VB=[1,64],$VC=[1,67],$VD=[1,69],$VE=[1,66],$VF=[1,68],$VG=[1,70],$VH=[1,79],$VI=[1,80],$VJ=[23,52,53,56,60],$VK=[5,11,12,20,25,52,56,69,90,91,92],$VL=[2,92],$VM=[5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,63,66,69,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95],$VN=[1,109],$VO=[1,108],$VP=[2,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,63,66,69,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,102],$VQ=[2,135],$VR=[1,111],$VS=[1,116],$VT=[1,117],$VU=[1,114],$VV=[1,118],$VW=[1,119],$VX=[1,121],$VY=[1,122],$VZ=[1,123],$V_=[1,124],$V$=[1,125],$V01=[1,126],$V11=[1,127],$V21=[1,128],$V31=[1,129],$V41=[1,130],$V51=[1,131],$V61=[1,132],$V71=[1,135],$V81=[5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,63,66,69,73,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92],$V91=[5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,63,66,69,73,78,79,80,81,82,83,84,85,86,87,89,90,91,92],$Va1=[5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,63,66,69,73,79,80,81,82,83,84,85,86,87,90,91,92],$Vb1=[5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,63,66,69,73,79,86,87,90,91,92],$Vc1=[11,89,97,104,105,108,110,111,112,113,114,115,116,117,118,119,120],$Vd1=[2,109],$Ve1=[1,156],$Vf1=[1,160],$Vg1=[1,153],$Vh1=[1,154],$Vi1=[1,159],$Vj1=[1,155],$Vk1=[1,157],$Vl1=[1,158],$Vm1=[1,169],$Vn1=[1,168],$Vo1=[1,170],$Vp1=[1,188],$Vq1=[1,202],$Vr1=[1,218],$Vs1=[1,214],$Vt1=[1,207],$Vu1=[1,206],$Vv1=[1,208],$Vw1=[1,209],$Vx1=[1,210],$Vy1=[1,211],$Vz1=[1,212],$VA1=[1,213],$VB1=[1,215],$VC1=[1,216],$VD1=[1,217],$VE1=[1,219],$VF1=[14,55,63,76,77,78,79,80,83,84,85,86,87,88,89,124],$VG1=[2,5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,63,66,69,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,102,124],$VH1=[5,7,11,12,20,23,25,26,39,52,53,56,60,66,69,73,90,91,92],$VI1=[1,248],$VJ1=[1,275],$VK1=[1,273],$VL1=[1,274],$VM1=[1,276],$VN1=[14,23],$VO1=[14,55,63,76,77,78,79,80,83,84,85,86,87,89,124],$VP1=[14,55,63,78,79,80,83,84,85,86,87,89,124],$VQ1=[14,55,63,79,80,83,84,85,86,87,124],$VR1=[14,55,63,79,86,87,124],$VS1=[2,91],$VT1=[1,314],$VU1=[1,315],$VV1=[1,316],$VW1=[1,317],$VX1=[1,318],$VY1=[2,4],$VZ1=[1,321],$V_1=[14,19,22,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO_XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FUNCION":6,"tk_declare":7,"tk_function":8,"MENU_LOCAL":9,"tk_dosPuntos":10,"tk_identificador":11,"tk_parA":12,"LISTA_DECLARACION_FUNCION":13,"tk_parC":14,"tk_as":15,"tk_xs":16,"TIPO_DATO":17,"MENU_INTERROGA":18,"llaveA":19,"llaveC":20,"tk_punto_coma":21,"tk_Interroga":22,"tk_coma":23,"DECLARACION_FUNCION":24,"tk_identificadorXQUERY":25,"tk_local":26,"tk_int":27,"tk_string":28,"tk_double":29,"tk_DECIMAL":30,"tk_integer":31,"INSTRUCCION":32,"DECLARACION_GLOBAL":33,"IF":34,"WHERE":35,"FOR":36,"LLAMADA_FUNCION":37,"RETURN_CICLO":38,"tk_for":39,"DECLARACIONES_FOR":40,"OPCIONES_FOR":41,"DECLARACION_FOR":42,"OPCION_AT":43,"tk_in":44,"FOR_REC":45,"tk_at":46,"XPATH":47,"EXP_XQUERY":48,"CORDERNADA":49,"OPCION_FOR":50,"ORDER":51,"ComentarioM":52,"tk_where":53,"CONDITIONES_WHERE":54,"tk_and":55,"tk_order":56,"tk_by":57,"LISTA_ORDER":58,"ORDER_":59,"tk_return":60,"LISTA_ASIGNACION":61,"ASIGNACION_SIMPLE":62,"tk_igual":63,"valores_if":64,"TK":65,"tk_if":66,"tk_then":67,"ELSE":68,"tk_else":69,"valor_if":70,"CONDICION":71,"OPCIONES_CONDICION":72,"tk_let":73,"LISTA_ID":74,"tk_igualXQUERY":75,"tk_menos":76,"tk_mas":77,"tk_div":78,"tk_mod":79,"tk_menor":80,"tk_gt":81,"tk_lt":82,"tk_mayor":83,"tk_menorIgual":84,"tk_mayorIgual":85,"tk_distinto":86,"tk_or":87,"tk_to":88,"tk_asterisco":89,"tk_entero":90,"tk_decimal":91,"tk_stringTexto":92,"OPCION_IDQ":93,"INICIO":94,"tk_barra":95,"INICIALES":96,"tk_punto":97,"DIAGONALES":98,"DERIVADOSLIMITADO":99,"DERIVACIONDIAGONAL":100,"PREDICATE":101,"tk_diagonal":102,"DERIVADOS":103,"tk_node":104,"tk_arroba":105,"ATRIBUTO":106,"AXES":107,"tk_child":108,"NODETEST":109,"tk_descendant":110,"tk_descendatOr":111,"tk_ancestor":112,"tk_ancestorOr":113,"tk_attribute":114,"tk_following":115,"tk_followingSi":116,"tk_parent":117,"tk_preceding":118,"tk_precedingSi":119,"tk_self":120,"tk_text":121,"tk_llaveA":122,"EXPRESION":123,"tk_llaveC":124,"tk_position":125,"tk_last":126,"tk_ParC":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_declare",8:"tk_function",10:"tk_dosPuntos",11:"tk_identificador",12:"tk_parA",14:"tk_parC",15:"tk_as",16:"tk_xs",19:"llaveA",20:"llaveC",21:"tk_punto_coma",22:"tk_Interroga",23:"tk_coma",25:"tk_identificadorXQUERY",26:"tk_local",27:"tk_int",28:"tk_string",29:"tk_double",30:"tk_DECIMAL",31:"tk_integer",39:"tk_for",44:"tk_in",46:"tk_at",52:"ComentarioM",53:"tk_where",55:"tk_and",56:"tk_order",57:"tk_by",60:"tk_return",63:"tk_igual",65:"TK",66:"tk_if",67:"tk_then",69:"tk_else",73:"tk_let",75:"tk_igualXQUERY",76:"tk_menos",77:"tk_mas",78:"tk_div",79:"tk_mod",80:"tk_menor",81:"tk_gt",82:"tk_lt",83:"tk_mayor",84:"tk_menorIgual",85:"tk_mayorIgual",86:"tk_distinto",87:"tk_or",88:"tk_to",89:"tk_asterisco",90:"tk_entero",91:"tk_decimal",92:"tk_stringTexto",95:"tk_barra",97:"tk_punto",102:"tk_diagonal",104:"tk_node",105:"tk_arroba",108:"tk_child",110:"tk_descendant",111:"tk_descendatOr",112:"tk_ancestor",113:"tk_ancestorOr",114:"tk_attribute",115:"tk_following",116:"tk_followingSi",117:"tk_parent",118:"tk_preceding",119:"tk_precedingSi",120:"tk_self",121:"tk_text",122:"tk_llaveA",124:"tk_llaveC",125:"tk_position",126:"tk_last",127:"tk_ParC"},
productions_: [0,[3,2],[6,17],[18,1],[18,0],[13,3],[13,1],[24,6],[9,1],[17,1],[17,1],[17,1],[17,1],[17,1],[4,2],[4,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[36,3],[40,3],[40,1],[42,4],[43,2],[43,0],[45,1],[45,1],[45,1],[41,2],[41,1],[50,1],[50,1],[50,1],[50,1],[35,2],[54,3],[54,1],[51,3],[58,3],[58,1],[59,2],[59,1],[38,3],[38,2],[38,2],[61,3],[61,1],[62,3],[62,4],[34,7],[68,2],[68,2],[68,0],[64,2],[64,1],[70,1],[70,1],[70,1],[37,6],[71,3],[72,1],[72,2],[33,4],[74,3],[74,1],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,1],[48,1],[48,1],[48,2],[48,3],[48,6],[93,1],[93,0],[49,5],[47,1],[47,1],[94,3],[94,1],[96,4],[96,3],[96,3],[96,4],[96,3],[96,5],[98,1],[98,2],[98,2],[100,3],[100,0],[99,2],[99,2],[99,4],[99,2],[99,1],[103,1],[103,2],[103,1],[107,4],[107,4],[107,4],[107,4],[107,4],[107,4],[107,4],[107,4],[107,4],[107,4],[107,4],[107,4],[109,2],[109,4],[109,2],[109,3],[101,3],[101,0],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,1],[123,1],[123,2],[123,1],[123,3],[123,3],[123,1],[123,3],[106,1],[106,1],[106,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 16:
console.log($$[$0])
break;
case 59:
 this.$ = $$[$0]
break;
case 62:
  this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]
break;
case 66:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0] 
break;
case 67: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 68:
this.$=$$[$0]
break;
case 69:

            this.$ = new Aritmetica($$[$0-2], $$[$0-1], '-', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 70:

            this.$ = new Aritmetica($$[$0-2], $$[$0-1], '+', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 71:

            this.$ = new Aritmetica($$[$0-2], $$[$0-1], '/', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 72:

            this.$ = new Aritmetica($$[$0-2], $$[$0-1], '%', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 85: case 86:

            this.$ = new Primitivo(new Tipo(esEntero(Number($$[$0]))), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
        
break;
case 87:

            this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 88:

            this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 89:
this.$=$$[$0-1]+$$[$0]
break;
case 90:

            this.$ = $$[$0-1]
        
break;
case 91:
  this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
}
},
table: [{3:1,4:2,6:5,7:$V0,26:$V1,32:3,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,53:$V3,60:$V4,66:$V5,73:$V6},{1:[3]},{5:[1,18],6:5,7:$V0,26:$V1,32:19,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,53:$V3,60:$V4,66:$V5,73:$V6},o($V7,[2,15]),o($V7,[2,16]),o($V7,[2,17]),o($V7,[2,18]),o($V7,[2,19]),o($V7,[2,20]),o($V7,[2,21]),o($V7,[2,22]),{25:[1,21],74:20},{8:[1,22]},{12:[1,23]},{11:$V8,12:$V9,25:$Va,26:$Vb,48:24,90:$Vc,91:$Vd,92:$Ve},{25:$Vf,40:32,42:33},{10:[1,35]},{4:37,6:5,7:$V0,11:$V8,12:$V9,25:[1,36],26:$Vg,32:3,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,48:38,53:$V3,60:$V4,66:$V5,73:$V6,90:$Vc,91:$Vd,92:$Ve},{1:[2,1]},o($V7,[2,14]),{23:[1,41],75:[1,40]},o($Vh,[2,68]),{9:42,26:[1,43]},{11:$V8,12:$V9,25:$Va,26:$Vb,48:44,90:$Vc,91:$Vd,92:$Ve},o($V7,[2,38],{55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx}),o($Vy,[2,85]),o($Vy,[2,86]),o($Vy,$Vz),o($Vy,[2,88]),o([7,12,14,20,23,25,26,39,52,53,55,56,60,63,66,69,73,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92],$VA,{93:61,47:62,94:63,96:65,5:$VB,11:$VC,89:$VD,97:$VE,102:$VF,104:$VG}),{11:$V8,12:$V9,25:$Va,26:$Vb,48:71,90:$Vc,91:$Vd,92:$Ve},{10:[1,72]},{23:[1,74],35:76,38:78,41:73,50:75,51:77,52:$VH,53:$V3,56:$VI,60:$V4},o($VJ,[2,25]),{43:81,44:[2,28],46:[1,82]},{11:[1,83]},o([7,12,20,25,26,39,52,53,55,56,60,63,66,69,73,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92],$VA,{93:61,94:63,96:65,47:84,5:$VB,11:$VC,89:$VD,97:$VE,102:$VF,104:$VG}),o($VK,[2,47],{33:4,6:5,34:6,35:7,36:8,37:9,38:10,32:19,7:$V0,26:$V1,39:$V2,53:$V3,60:$V4,66:$V5,73:$V6}),o($V7,[2,48],{55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx}),{10:[1,85]},{11:$V8,12:$V9,25:$Va,26:$Vb,48:86,90:$Vc,91:$Vd,92:$Ve},{25:[1,87]},{10:[1,88]},{10:[2,8]},{14:[1,89],55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx},{11:$V8,12:$V9,25:$Va,26:$Vb,48:90,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:91,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:92,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:93,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:94,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:95,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:96,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:97,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:98,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:99,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:100,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:101,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:102,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:103,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:104,90:$Vc,91:$Vd,92:$Ve},{11:$V8,12:$V9,25:$Va,26:$Vb,48:105,90:$Vc,91:$Vd,92:$Ve},o($Vy,[2,89]),o($Vy,$VL),o($Vy,[2,95],{95:[1,106]}),o($Vy,[2,96]),o($VM,[2,98]),{2:$VN,98:107,102:$VO},o($VP,$VQ,{101:110,122:$VR}),{11:$VS,89:$VT,97:$VU,99:115,102:[1,113],103:112,104:$VV,105:$VW,107:120,108:$VX,110:$VY,111:$VZ,112:$V_,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41,119:$V51,120:$V61},o($VP,$VQ,{101:133,122:$VR}),{12:[1,134]},{14:$V71,55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx},{11:[1,136]},o([5,7,11,12,20,25,26,39,66,69,73,90,91,92],[2,23],{35:76,51:77,38:78,50:137,52:$VH,53:$V3,56:$VI,60:$V4}),{25:$Vf,42:138},o($V7,[2,33]),o($V7,[2,34]),o($V7,[2,35]),o($V7,[2,36]),o($V7,[2,37]),{57:[1,139]},{44:[1,140]},{25:[1,141]},{12:[1,142]},o($V7,[2,46],{55:$VL,63:$VL,76:$VL,77:$VL,78:$VL,79:$VL,80:$VL,81:$VL,82:$VL,83:$VL,84:$VL,85:$VL,86:$VL,87:$VL,88:$VL,89:$VL}),{11:[1,143]},o($V7,[2,66],{55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx}),o($Vh,[2,67]),{11:[1,144]},{67:[1,145]},o($V81,[2,69],{88:$Vw}),o($V81,[2,70],{88:$Vw}),o($V91,[2,71],{76:$Vk,77:$Vl,88:$Vw}),o([5,7,11,12,14,20,23,25,26,39,52,53,56,60,66,69,73,79,90,91,92],[2,72],{55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx}),o($Va1,[2,73],{76:$Vk,77:$Vl,78:$Vm,88:$Vw,89:$Vx}),o($Va1,[2,74],{76:$Vk,77:$Vl,78:$Vm,88:$Vw,89:$Vx}),o($Va1,[2,75],{76:$Vk,77:$Vl,78:$Vm,88:$Vw,89:$Vx}),o($Va1,[2,76],{76:$Vk,77:$Vl,78:$Vm,88:$Vw,89:$Vx}),o($Va1,[2,77],{76:$Vk,77:$Vl,78:$Vm,88:$Vw,89:$Vx}),o($Va1,[2,78],{76:$Vk,77:$Vl,78:$Vm,88:$Vw,89:$Vx}),o($Vb1,[2,79],{76:$Vk,77:$Vl,78:$Vm,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,88:$Vw,89:$Vx}),o($Vb1,[2,80],{76:$Vk,77:$Vl,78:$Vm,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,88:$Vw,89:$Vx}),o([5,7,11,12,14,20,23,25,26,39,52,53,56,60,66,69,73,79,87,90,91,92],[2,81],{55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,88:$Vw,89:$Vx}),o([5,7,11,12,14,20,23,25,26,39,52,53,56,60,66,69,73,90,91,92],[2,82],{55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx}),o([5,7,11,12,14,20,23,25,26,39,52,53,55,56,60,66,69,73,79,87,90,91,92],[2,83],{63:$Vj,76:$Vk,77:$Vl,78:$Vm,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,88:$Vw,89:$Vx}),o($V91,[2,84],{76:$Vk,77:$Vl,88:$Vw}),{11:$VC,89:$VD,96:146,97:$VE,102:$VF,104:$VG},{11:$VS,89:$VT,99:147,104:$VV,105:$VW,107:120,108:$VX,110:$VY,111:$VZ,112:$V_,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41,119:$V51,120:$V61},o($Vc1,[2,105],{102:[1,148]}),{102:[1,149]},o($VM,$Vd1,{100:150,98:151,2:$VN,102:$VO}),{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:152,125:$Vk1,126:$Vl1},o($VM,$Vd1,{98:151,100:161,2:$VN,102:$VO}),{11:$VS,89:$VT,97:$VU,99:115,103:162,104:$VV,105:$VW,107:120,108:$VX,110:$VY,111:$VZ,112:$V_,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41,119:$V51,120:$V61},o($VP,[2,115],{97:[1,163]}),o($VP,[2,117]),o($VP,$VQ,{101:164,122:$VR}),o($VP,$VQ,{101:165,122:$VR}),{12:[1,166]},{11:$Vm1,89:$Vn1,104:$Vo1,106:167},o($VP,[2,114]),{10:[1,171]},{10:[1,172]},{10:[1,173]},{10:[1,174]},{10:[1,175]},{10:[1,176]},{10:[1,177]},{10:[1,178]},{10:[1,179]},{10:[1,180]},{10:[1,181]},{10:[1,182]},o($VM,$Vd1,{98:151,100:183,2:$VN,102:$VO}),{14:[1,184]},o($Vy,[2,90]),{12:[1,185]},o($V7,[2,32]),o($VJ,[2,24]),{25:$Vp1,58:186,59:187},{5:$VB,11:[1,193],12:[1,194],25:$Va,26:$Vb,45:189,47:190,48:191,49:192,89:$VD,90:$Vc,91:$Vd,92:$Ve,94:63,96:65,97:$VE,102:$VF,104:$VG},{44:[2,27]},{11:$V8,12:$V9,25:$Va,26:$Vb,48:195,90:$Vc,91:$Vd,92:$Ve},{12:[1,196]},{12:[1,197]},{4:201,6:5,7:$V0,11:$V8,12:$V9,25:$Va,26:$Vg,32:3,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,48:200,52:$Vq1,53:$V3,60:$V4,64:198,66:$V5,70:199,73:$V6,90:$Vc,91:$Vd,92:$Ve},o($VM,[2,97]),o($VM,$Vd1,{98:151,100:203,2:$VN,102:$VO}),o($Vc1,[2,106]),o($Vc1,[2,107]),o($VM,[2,100]),{11:$VS,89:$VT,97:$VU,99:115,103:204,104:$VV,105:$VW,107:120,108:$VX,110:$VY,111:$VZ,112:$V_,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41,119:$V51,120:$V61},{55:$Vr1,63:$Vs1,76:$Vt1,77:$Vu1,78:$Vv1,79:$Vw1,80:$Vx1,83:$Vy1,84:$Vz1,85:$VA1,86:$VB1,87:$VC1,88:$VD1,89:$VE1,124:[1,205]},o($VF1,[2,150]),o($VF1,[2,151]),{11:$Vm1,89:$Vn1,104:$Vo1,106:220},o($VF1,[2,153]),{12:[1,221]},{12:[1,222]},o($VF1,[2,156]),{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:223,125:$Vk1,126:$Vl1},o($VM,[2,101]),o($VM,$Vd1,{98:151,100:224,2:$VN,102:$VO}),o($VP,[2,116]),o($VP,[2,110]),o($VP,[2,111]),{14:[1,225]},o($VP,[2,113]),o($VG1,[2,158]),o($VG1,[2,159]),{12:[1,226]},{10:[1,227]},{10:[1,228]},{10:[1,229]},{10:[1,230]},{10:[1,231]},{10:[1,232]},{10:[1,233]},{10:[1,234]},{10:[1,235]},{10:[1,236]},{10:[1,237]},{10:[1,238]},o($VM,[2,103]),o($VP,$VQ,{101:239,122:$VR}),{11:$V8,12:$V9,25:$Va,26:$Vb,48:240,90:$Vc,91:$Vd,92:$Ve},o($V7,[2,41],{23:[1,241]}),o($VH1,[2,43]),o([7,12,20,23,25,26,39,52,53,56,60,66,69,73,90,91,92],[2,45],{94:63,96:65,47:242,5:$VB,11:$VC,89:$VD,97:$VE,102:$VF,104:$VG}),o($VJ,[2,26]),o($VJ,[2,29]),o($VJ,[2,30],{55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx}),o($VJ,[2,31]),o([23,52,53,55,56,60,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$Vz,{101:110,2:$VQ,95:$VQ,102:$VQ,122:$VR}),{11:$V8,12:$V9,25:$Va,26:$Vb,48:243,90:$Vc,91:$Vd,92:$Ve},{14:[1,244],55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx},{11:$V8,12:$V9,25:$Va,26:$Vb,48:245,90:$Vc,91:$Vd,92:$Ve},{13:246,24:247,25:$VI1},o([5,20,56],[2,56],{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,48:200,4:201,68:249,70:250,7:$V0,11:$V8,12:$V9,25:$Va,26:$Vg,39:$V2,52:$Vq1,53:$V3,60:$V4,66:$V5,69:[1,251],73:$V6,90:$Vc,91:$Vd,92:$Ve}),o($V7,[2,58]),o($V7,[2,59],{55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx}),o($VK,[2,60],{33:4,6:5,34:6,35:7,36:8,37:9,38:10,32:19,7:$V0,26:$V1,39:$V2,53:$V3,60:$V4,66:$V5,73:$V6}),o($V7,[2,61]),o($VM,[2,99]),o($VM,$Vd1,{98:151,100:252,2:$VN,102:$VO}),o($VP,[2,134]),{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:253,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:254,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:255,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:256,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:257,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:258,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:259,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:260,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:261,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:262,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:263,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:264,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:265,125:$Vk1,126:$Vl1},{11:$Ve1,12:$Vf1,90:$Vg1,91:$Vh1,92:$Vi1,105:$Vj1,123:266,125:$Vk1,126:$Vl1},o($VF1,[2,152]),{14:[1,267]},{14:[1,268]},{14:[1,269],55:$Vr1,63:$Vs1,76:$Vt1,77:$Vu1,78:$Vv1,79:$Vw1,80:$Vx1,83:$Vy1,84:$Vz1,85:$VA1,86:$VB1,87:$VC1,88:$VD1,89:$VE1},o($VM,[2,102]),o($VP,$VQ,{101:270,122:$VR}),{127:[1,271]},{11:$VJ1,89:$VK1,104:$VL1,109:272,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:277,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:278,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:279,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:280,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:281,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:282,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:283,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:284,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:285,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:286,121:$VM1},{11:$VJ1,89:$VK1,104:$VL1,109:287,121:$VM1},o($VM,$Vd1,{98:151,100:288,2:$VN,102:$VO}),{14:[1,289],55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx},{25:$Vp1,59:290},o($VH1,[2,44]),{14:$V71,23:[1,291],55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx},o($V7,[2,62]),{14:[1,292],55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx},{14:[1,293],23:[1,294]},o($VN1,[2,6]),{15:[1,295]},o($V7,[2,53]),o($V7,[2,57]),{4:201,6:5,7:$V0,11:$V8,12:$V9,25:$Va,26:$Vg,32:3,33:4,34:297,35:7,36:8,37:9,38:10,39:$V2,48:200,52:$Vq1,53:$V3,60:$V4,66:$V5,70:296,73:$V6,90:$Vc,91:$Vd,92:$Ve},o($VM,[2,108]),o($VO1,[2,136],{88:$VD1}),o($VO1,[2,137],{88:$VD1}),o($VP1,[2,138],{76:$Vt1,77:$Vu1,88:$VD1}),o([14,79,124],[2,139],{55:$Vr1,63:$Vs1,76:$Vt1,77:$Vu1,78:$Vv1,80:$Vx1,83:$Vy1,84:$Vz1,85:$VA1,86:$VB1,87:$VC1,88:$VD1,89:$VE1}),o($VQ1,[2,140],{76:$Vt1,77:$Vu1,78:$Vv1,88:$VD1,89:$VE1}),o($VQ1,[2,141],{76:$Vt1,77:$Vu1,78:$Vv1,88:$VD1,89:$VE1}),o($VQ1,[2,142],{76:$Vt1,77:$Vu1,78:$Vv1,88:$VD1,89:$VE1}),o($VQ1,[2,143],{76:$Vt1,77:$Vu1,78:$Vv1,88:$VD1,89:$VE1}),o($VR1,[2,144],{76:$Vt1,77:$Vu1,78:$Vv1,80:$Vx1,83:$Vy1,84:$Vz1,85:$VA1,88:$VD1,89:$VE1}),o($VR1,[2,145],{76:$Vt1,77:$Vu1,78:$Vv1,80:$Vx1,83:$Vy1,84:$Vz1,85:$VA1,88:$VD1,89:$VE1}),o([14,79,87,124],[2,146],{55:$Vr1,63:$Vs1,76:$Vt1,77:$Vu1,78:$Vv1,80:$Vx1,83:$Vy1,84:$Vz1,85:$VA1,86:$VB1,88:$VD1,89:$VE1}),o([14,124],[2,147],{55:$Vr1,63:$Vs1,76:$Vt1,77:$Vu1,78:$Vv1,79:$Vw1,80:$Vx1,83:$Vy1,84:$Vz1,85:$VA1,86:$VB1,87:$VC1,88:$VD1,89:$VE1}),o([14,55,79,87,124],[2,148],{63:$Vs1,76:$Vt1,77:$Vu1,78:$Vv1,80:$Vx1,83:$Vy1,84:$Vz1,85:$VA1,86:$VB1,88:$VD1,89:$VE1}),o($VP1,[2,149],{76:$Vt1,77:$Vu1,88:$VD1}),o($VF1,[2,154]),o($VF1,[2,155]),o($VF1,[2,157]),o($VP,[2,112]),o($VG1,[2,160]),o($VP,[2,118]),o($VP,$VQ,{101:298,122:$VR}),{12:[1,299]},o($VP,$VQ,{101:300,122:$VR}),{12:[1,301]},o($VP,[2,119]),o($VP,[2,120]),o($VP,[2,121]),o($VP,[2,122]),o($VP,[2,123]),o($VP,[2,124]),o($VP,[2,125]),o($VP,[2,126]),o($VP,[2,127]),o($VP,[2,128]),o($VP,[2,129]),o($VM,[2,104]),o($Vy,$VS1),o($VH1,[2,42]),{11:$V8,12:$V9,25:$Va,26:$Vb,48:302,90:$Vc,91:$Vd,92:$Ve},o([5,7,11,12,20,25,26,39,52,53,55,56,60,63,66,69,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],$VS1),{15:[1,303]},{24:304,25:$VI1},{16:[1,305]},o($V7,[2,54]),o($V7,[2,55]),o($VP,[2,130]),{14:[1,306]},o($VP,[2,132]),{14:[1,307]},{14:[1,308],55:$Vi,63:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx},{16:[1,309]},o($VN1,[2,5]),{10:[1,310]},o($VP,$VQ,{101:311,122:$VR}),o($VP,[2,133]),o($VJ,[2,94]),{10:[1,312]},{17:313,27:$VT1,28:$VU1,29:$VV1,30:$VW1,31:$VX1},o($VP,[2,131]),{17:319,27:$VT1,28:$VU1,29:$VV1,30:$VW1,31:$VX1},o($VN1,$VY1,{18:320,22:$VZ1}),o($V_1,[2,9]),o($V_1,[2,10]),o($V_1,[2,11]),o($V_1,[2,12]),o($V_1,[2,13]),{18:322,19:$VY1,22:$VZ1},o($VN1,[2,7]),o([14,19,23],[2,3]),{19:[1,323]},{4:324,6:5,7:$V0,26:$V1,32:3,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,53:$V3,60:$V4,66:$V5,73:$V6},{6:5,7:$V0,20:[1,325],26:$V1,32:19,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,53:$V3,60:$V4,66:$V5,73:$V6},{21:[1,326]},o($V7,[2,2])],
defaultActions: {18:[2,1],43:[2,8],141:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Tree } = require('../Simbolos/Tree');
    const { Tipo, tipos, esEntero } = require('../Varios/tipo');
    const { Primitivo } = require('../Expresiones/Primitivo');
    const { Error } = require('../Varios/Error');
    const {Identificador} = require('../Expresiones/Identificador');
    //const {Vector} = require('../Expresiones/Vector');
    //const {Lista} = require('../Expresiones/Lista');
    //Instrucciones
    //const {Print} = require('../Instrucciones/Print');
   // const {Declaracion, defal} = require('../Instrucciones/Declaracion');
   // const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');
    //const {DeclaracionLista} = require('../Instrucciones/DeclaracionLista');
    //const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {AsignacionVector} = require('../Instrucciones/AsignacionVector');
   // const {AsignacionLista} = require('../Instrucciones/AsignacionLista');
    /*const {AddLista} = require('../Instrucciones/AddLista');
    const {If} = require('../Instrucciones/If');
    const {Switch} = require('../Instrucciones/Switch');
    const {Case} = require('../Instrucciones/Case');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');
    const {LlamadaMetodo} = require('../Instrucciones/LlamadaMetodo');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Retorno} = require('../Instrucciones/Retorno');
    *///Expresion
    const {Aritmetica} = require('../Expresiones/Aritmetica');/*
    const {Relacional} = require('../Expresiones/Relacional');
    const {Logico} = require('../Expresiones/Logico');
    const {Ternario} = require('../Expresiones/Ternario');
    const {Casteo} = require('../Expresiones/Casteo');
    const {InDecrement} = require('../Expresiones/InDecrement');
    const {Length} = require('../Expresiones/Length');
    const {ToLower} = require('../Expresiones/ToLower');
    const {ToUpper} = require('../Expresiones/ToUpper');
    const {Truncate} = require('../Expresiones/Truncate');
    const {Round} = require('../Expresiones/Round');
    const {TypeOf} = require('../Expresiones/TypeOf');
    const {ToString} = require('../Expresiones/ToString');
    const {ToCharArray} = require('../Expresiones/ToCharArray');*/
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "tk_decimal";
break;
case 1:return "tk_entero";
break;
case 2:return "tk_node";
break;
case 3:return "tk_child";
break;
case 4:console.log(yy_.yytext+"--");return "tk_let";
break;
case 5:return "tk_descendant";
break;
case 6:return "tk_descendatOr"
break;
case 7:return "tk_ancestor";
break;
case 8:return "tk_ancestorOr";
break;
case 9:return "tk_attribute";
break;
case 10:return "tk_following";
break;
case 11:return "tk_followingSi"
break;
case 12:return "tk_parent"
break;
case 13:return "tk_preceding"
break;
case 14:return "tk_precedingSi"
break;
case 15:return "tk_self"
break;
case 16:return "tk_text"
break;
case 17:return "tk_position"
break;
case 18:return "tk_last"
break;
case 19:return "tk_div"
break;
case 20:return "tk_and"
break;
case 21:return "tk_or"
break;
case 22:return "tk_mod"
break;
case 23:console.log(yy_.yytext+"--"); return "tk_for";
break;
case 24:console.log(yy_.yytext+"--"); return "tk_in";
break;
case 25:console.log(yy_.yytext+"--"); return "tk_where";
break;
case 26:console.log(yy_.yytext+"--"); return "tk_order";
break;
case 27:console.log(yy_.yytext+"--"); return "tk_by";
break;
case 28:console.log(yy_.yytext+"--"); return "tk_return";
break;
case 29:console.log(yy_.yytext+"--");return "tk_if";
break;
case 30:console.log(yy_.yytext+"--");return "tk_else";
break;
case 31:console.log(yy_.yytext+"--");return "tk_then";
break;
case 32:console.log(yy_.yytext+"--");return "tk_int";
break;
case 33:console.log(yy_.yytext+"--");return "tk_integer";
break;
case 34:console.log(yy_.yytext+"--");return "tk_string";
break;
case 35:console.log(yy_.yytext+"--");return "tk_DECIMAL";
break;
case 36:console.log(yy_.yytext+"--");return "tk_double";
break;
case 37:console.log(yy_.yytext+"--");return "tk_declare";
break;
case 38:console.log(yy_.yytext+"--");return "tk_function";
break;
case 39:console.log(yy_.yytext+"--");return "tk_AS"
break;
case 40:console.log(yy_.yytext+"--");return "tk_as"
break;
case 41:console.log(yy_.yytext+"--");return "tk_xs"
break;
case 42:console.log(yy_.yytext+"--");return "tk_to"
break;
case 43:console.log(yy_.yytext+"--");return "tk_at"
break;
case 44:console.log(yy_.yytext+"--");return "tk_local";
break;
case 45:console.log(yy_.yytext+"--"); return "tk_gt"
break;
case 46:console.log(yy_.yytext+"--"); return "tk_lt"
break;
case 47:return "tk_barra"
break;
case 48:return "tk_punto"
break;
case 49:return "tk_punto_coma"
break;
case 50:return "tk_coma"
break;
case 51:return "tk_diagonal"
break;
case 52:return "tk_asterisco"
break;
case 53:return "tk_Interroga"
break;
case 54:return "tk_mas"
break;
case 55:return "tk_menos"
break;
case 56:return "tk_menorIgual"
break;
case 57:return "tk_mayorIgual"
break;
case 58:return "tk_menor"
break;
case 59:return "tk_mayor"
break;
case 60:return "tk_distinto"
break;
case 61:console.log(yy_.yytext+"--");return "tk_igualXQUERY"
break;
case 62:return "tk_dosPuntos"
break;
case 63:return "tk_igual"
break;
case 64:return "tk_llaveA"
break;
case 65:return "tk_llaveC"
break;
case 66:return "tk_arroba"
break;
case 67:console.log(yy_.yytext+"--");return "llaveA"
break;
case 68:console.log(yy_.yytext+"--");return "llaveC"
break;
case 69:return "tk_parA"
break;
case 70:return "tk_parC"
break;
case 71:return "tk_stringTexto";
break;
case 72:return "tk_stringTexto";
break;
case 73:return "tk_stringTexto";
break;
case 74:return "tk_stringTexto";
break;
case 75:return "tk_identificador";
break;
case 76:return "tk_identificadorXQUERY";
console.log("indentificador papa")

break;
case 77:return "EOF";
break;
case 78:
break;
case 79:         
    console.log('Léxico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column );

break;
}
},
rules: [/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:node\b)/,/^(?:child\b)/,/^(?:let\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:int\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:double\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:AS\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:local\b)/,/^(?:gt\b)/,/^(?:lt\b)/,/^(?:\|)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\/)/,/^(?:\*)/,/^(?:\?)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:@)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:“[^\“]*“)/,/^(?:'[^\']*')/,/^(?:‘[^\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:[$]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \t\r\n\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXquery;
exports.Parser = GramaticaXquery.Parser;
exports.parse = function () { return GramaticaXquery.parse.apply(GramaticaXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}