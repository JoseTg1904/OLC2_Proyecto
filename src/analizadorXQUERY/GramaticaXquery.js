/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,16],$V2=[1,15],$V3=[1,14],$V4=[1,17],$V5=[1,13],$V6=[1,11],$V7=[5,7,11,12,20,23,25,26,39,52,54,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,99,101],$V8=[5,7,20,23,39,52,54,55,59,64,67,69,71,74,75,76,77,79,80,81,82,83,84,85,86,87],$V9=[2,92],$Va=[1,29],$Vb=[1,31],$Vc=[1,30],$Vd=[1,32],$Ve=[1,37],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,35],$Vj=[1,36],$Vk=[1,38],$Vl=[1,41],$Vm=[5,20,23,54,55,64,69,74,75,76,77,79,80,81,82,83,84,85,86,87],$Vn=[1,47],$Vo=[23,73],$Vp=[14,23,54,64,74,75,76,77,79,80,81,82,83,84,85,86,87],$Vq=[5,7,11,20,25,26,39,52,55,59,67,69,71,88,89,90,95,99,101],$Vr=[1,70],$Vs=[1,68],$Vt=[1,69],$Vu=[1,64],$Vv=[1,53],$Vw=[1,54],$Vx=[1,55],$Vy=[1,56],$Vz=[1,57],$VA=[1,58],$VB=[1,59],$VC=[1,60],$VD=[1,61],$VE=[1,62],$VF=[1,63],$VG=[1,65],$VH=[1,66],$VI=[1,67],$VJ=[5,7,11,12,14,20,23,25,26,39,52,54,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,99,101],$VK=[2,82],$VL=[1,74],$VM=[2,109],$VN=[1,73],$VO=[1,79],$VP=[1,80],$VQ=[5,7,11,12,14,20,23,25,26,39,52,54,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,93,95,99,101],$VR=[1,89],$VS=[1,93],$VT=[1,90],$VU=[1,87],$VV=[1,91],$VW=[1,92],$VX=[5,7,11,12,14,20,23,25,26,39,52,54,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,93,95,101],$VY=[1,102],$VZ=[23,52,55,59],$V_=[5,7,14,20,23,39,52,54,55,59,64,67,69,71,74,75,76,77,79,80,81,82,83,84,85,86,87],$V$=[11,25,78,95,101,102],$V01=[1,134],$V11=[2,5,7,11,12,14,20,23,25,26,39,52,54,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,93,95,99,101],$V21=[5,7,11,14,20,25,26,39,52,54,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,95,99,101],$V31=[5,7,11,14,20,25,26,39,52,54,55,59,64,67,69,71,76,77,78,79,80,81,82,83,84,85,86,88,89,90,95,99,101],$V41=[5,7,11,14,20,25,26,39,52,54,55,59,64,67,69,71,77,79,80,81,82,83,84,85,86,88,89,90,95,99,101],$V51=[5,7,11,14,20,25,26,39,52,54,55,59,64,67,69,71,77,85,86,88,89,90,95,99,101],$V61=[5,7,11,14,20,25,26,39,52,55,59,67,69,71,88,89,90,95,99,101],$V71=[1,168],$V81=[14,23],$V91=[1,190],$Va1=[1,211],$Vb1=[1,212],$Vc1=[1,213],$Vd1=[1,214],$Ve1=[1,215],$Vf1=[2,4],$Vg1=[1,218],$Vh1=[14,19,22,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO_XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FUNCION":6,"tk_declare":7,"tk_function":8,"MENU_LOCAL":9,"tk_dosPuntos":10,"tk_identificador":11,"tk_parA":12,"LISTA_DECLARACION_FUNCION":13,"tk_parC":14,"tk_as":15,"tk_xs":16,"TIPO_DATO":17,"MENU_INTERROGA":18,"llaveA":19,"llaveC":20,"tk_punto_coma":21,"tk_Interroga":22,"tk_coma":23,"DECLARACION_FUNCION":24,"tk_identificadorXQUERY":25,"tk_local":26,"tk_int":27,"tk_string":28,"tk_double":29,"tk_DECIMAL":30,"tk_integer":31,"INSTRUCCION":32,"DECLARACION_GLOBAL":33,"IF":34,"WHERE":35,"FOR":36,"LLAMADA_FUNCION":37,"RETURN_CICLO":38,"tk_for":39,"DECLARACIONES_FOR":40,"OPCIONES_FOR":41,"DECLARACION_FOR":42,"OPCION_AT":43,"tk_in":44,"FOR_REC":45,"tk_at":46,"CORDERNADA":47,"EXP_XQUERY":48,"XPATH":49,"OPCION_FOR":50,"ORDER":51,"tk_where":52,"CONDITIONES_WHERE":53,"tk_and":54,"tk_order":55,"tk_by":56,"LISTA_ORDER":57,"ORDER_":58,"tk_return":59,"Lista_Ciclo":60,"valor_if":61,"LISTA_ASIGNACION":62,"ASIGNACION_SIMPLE":63,"tk_igual":64,"valores_if":65,"TK":66,"tk_if":67,"tk_then":68,"tk_else":69,"Parametros_llamada":70,"tk_let":71,"LISTA_ID":72,"tk_igualXQUERY":73,"tk_menos":74,"tk_mas":75,"tk_div":76,"tk_mod":77,"tk_asterisco":78,"tk_menor":79,"tk_gt":80,"tk_lt":81,"tk_mayor":82,"tk_menorIgual":83,"tk_mayorIgual":84,"tk_distinto":85,"tk_or":86,"tk_to":87,"tk_entero":88,"tk_decimal":89,"tk_stringTexto":90,"OPCION_IDQ":91,"INICIO":92,"tk_barra":93,"INICIALES":94,"tk_punto":95,"DIAGONALES":96,"DERIVADOSLIMITADO":97,"DERIVACIONDIAGONAL":98,"tk_diagonal":99,"DERIVADOS":100,"tk_node":101,"tk_arroba":102,"ATRIBUTO":103,"tk_ParC":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_declare",8:"tk_function",10:"tk_dosPuntos",11:"tk_identificador",12:"tk_parA",14:"tk_parC",15:"tk_as",16:"tk_xs",19:"llaveA",20:"llaveC",21:"tk_punto_coma",22:"tk_Interroga",23:"tk_coma",25:"tk_identificadorXQUERY",26:"tk_local",27:"tk_int",28:"tk_string",29:"tk_double",30:"tk_DECIMAL",31:"tk_integer",39:"tk_for",44:"tk_in",46:"tk_at",52:"tk_where",54:"tk_and",55:"tk_order",56:"tk_by",59:"tk_return",64:"tk_igual",66:"TK",67:"tk_if",68:"tk_then",69:"tk_else",71:"tk_let",73:"tk_igualXQUERY",74:"tk_menos",75:"tk_mas",76:"tk_div",77:"tk_mod",78:"tk_asterisco",79:"tk_menor",80:"tk_gt",81:"tk_lt",82:"tk_mayor",83:"tk_menorIgual",84:"tk_mayorIgual",85:"tk_distinto",86:"tk_or",87:"tk_to",88:"tk_entero",89:"tk_decimal",90:"tk_stringTexto",93:"tk_barra",95:"tk_punto",99:"tk_diagonal",101:"tk_node",102:"tk_arroba",104:"tk_ParC"},
productions_: [0,[3,2],[6,17],[18,1],[18,0],[13,3],[13,1],[24,6],[9,1],[17,1],[17,1],[17,1],[17,1],[17,1],[4,2],[4,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[36,3],[40,3],[40,1],[42,4],[43,2],[43,0],[47,5],[45,1],[45,1],[45,1],[41,2],[41,1],[50,1],[50,1],[50,1],[35,2],[53,3],[53,1],[51,3],[57,3],[57,1],[58,2],[58,1],[38,2],[60,3],[60,1],[62,3],[62,1],[63,3],[63,4],[34,6],[34,8],[34,8],[65,2],[65,1],[61,1],[61,1],[37,6],[70,3],[70,1],[33,4],[72,3],[72,1],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,3],[48,1],[48,1],[48,1],[48,1],[48,2],[48,3],[48,6],[48,4],[48,0],[91,1],[91,0],[49,1],[92,3],[92,1],[94,4],[94,2],[94,3],[94,4],[94,2],[94,4],[94,2],[96,1],[96,2],[96,2],[98,3],[98,0],[97,1],[97,1],[97,3],[97,2],[97,1],[100,1],[100,2],[100,1],[103,1],[103,1],[103,3],[103,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return new Tree($$[$0-1]); 
    
break;
case 2:

            this.$ = new DeclaracionMetodo($$[$0-5], $$[$0-12], $$[$0-10], $$[$0-2], _$[$0-16].first_line, _$[$0-16].first_column);
        
break;
case 3: case 105:

            this.$ = $$[$0]
        
break;
case 4:
 
            this.$ = ''
        
break;
case 5:
 
            this.$.push($$[$0]);
        
break;
case 6: case 62:

            this.$ = [$$[$0]]
        
break;
case 7:

            this.$ = new Declaracion($$[$0-1], $$[$0-5], null, _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 8:
this.$=$$[$0];
break;
case 9: case 13:
this.$ = new Tipo(tipos.ENTERO);
break;
case 10:
this.$ = new Tipo(tipos.STRING);
break;
case 11: case 12:
this.$ = new Tipo(tipos.DECIMAL);
break;
case 14:
 this.$.push($$[$0]); 
break;
case 15:
 this.$ = [$$[$0]] 
break;
case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 57:
this.$=$$[$0]
break;
case 46:

            this.$ = new Retorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
        
break;
case 47:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 48:
 this.$ = $$[$0];
break;
case 53:

            this.$ = new If($$[$0-3], $$[$0], [], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 54:

            this.$ = new If($$[$0-5],$$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 55:

            this.$ = new If($$[$0-5], $$[$0-2], [$$[$0]], _$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 56:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 58: case 59:
 
            this.$ = $$[$0]
        
break;
case 60:

            this.$ = new Print(new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column), _$[$0-5].first_line, _$[$0-5].first_column)
        
break;
case 61:
 
            this.$.push($$[$0]); 
        
break;
case 63:

            this.$ = new Declaracion(new Tipo(tipos.VARIABLE), $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 64:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];  
break;
case 65:
this.$ = $$[$0]
break;
case 66:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 67:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 68:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 69:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 70:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 71: case 73:

            this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 72: case 74:

            this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 75:

            this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 76:

            this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 77:

            this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 78:

            this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 79:

            this.$ = new Logico($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 80: case 81:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 83:

            this.$ = new Logico($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 84: case 85:

            this.$ = new Primitivo(new Tipo(esEntero(Number($$[$0]))), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
        
break;
case 86:

            this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 87:

            this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 88:

            this.$ = new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        
break;
case 89:

            this.$ = $$[$0-1]
        
break;
case 90:

            this.$ = new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 93:
 this.$ = $$[$0]
break;
case 94:
this.$ = []
break;
case 95:

            let analizador = new AnalizadorASCXML();
            let buscador = new xpathBusqueda();
            let ejecu = new EjecucionXpath($$[$0], "");

            let ret = analizador.ejecutarCodigo(localStorage.getItem("xml"));
            let tabla = ret.objetos;
            let query = ejecu.ejecutarArbol();

            if(query.includes("|")) {
                buscador.getNodesByFilters("3", query, tabla);
            }else if(query[0] !== "/" && query[0] !== "//"){
                buscador.getNodesByFilters("1", query, tabla)
            }else{
                buscador.getNodesByFilters("2", query, tabla)
            }

            let retorno = buscador.returnListObjects()
            let valor = retorno[0].texto;
            let tipoR;

            if (valor.match(/^[0-9]+$/)){
                tipoR = new Tipo(esEntero(valor))
                valor = parseInt(valor)
            }else if (valor.match(/^[0-9]+[.][0-9]+$/)){
                tipoR = new Tipo(esEntero(valor))
                valor = parseInt(valor)
            }else{
                tipoR = new Tipo(tipos.STRING)
            }

            this.$ = new Primitivo(tipoR, valor, _$[$0].first_line, _$[$0].first_column);
        
break;
case 96:
 
            this.$.push($$[$0])
        
break;
case 97:
 
            this.$ = [$$[$0]]
        
break;
case 98:

            this.$ = new NodoX("", ".", [new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]])]);
        
break;
case 99: case 102:

            this.$ = new NodoX("", $$[$0-1], [...$$[$0]]);
        
break;
case 100:

            this.$ = new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]]);
        
break;
case 101:

            this.$ = new NodoX("//", $$[$0-1].val, [...$$[$0]]);
        
break;
case 103:

            this.$ = new NodoX("", "node()", [...$$[$0]]);
        
break;
case 104:

            $$[$0-1] = $$[$0-1].substring(1, $$[$0-1].length)
            this.$ = new NodoX("", $$[$0-1], [...$$[$0]]);
        
break;
case 106:

            this.$ = "//"
        
break;
case 108:

            this.$ = new Array();
            this.$.push(new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]])); 
        
break;
case 109:

            this.$ = [];
        
break;
case 110: case 111:

            this.$ = {val: $$[$0], pre: null};
        
break;
case 112:

            this.$ = {val: "node()", pre: null}
        
break;
case 113:

            this.$ = {val: $$[$0-1] + "" + $$[$0], pre: null};
        
break;
case 114:

            $$[$0] = $$[$0].substring(1, $$[$0].length)
            this.$ = {val: $$[$0], pre: null}
        
break;
case 115:

            this.$ = {val: $$[$0], pre: null}; 
        
break;
case 116:

            this.$ = {val: "..", pre: null}; 
        
break;
case 117:

            this.$ = $$[$0]; 
        
break;
case 118: case 119:

            this.$ = $$[$0];
        
break;
case 120:

            this.$ = "node()"
        
break;
case 121:

            $$[$0] = $$[$0].substring(1, $$[$0].length)
            this.$ = $$[$0]
        
break;
}
},
table: [{3:1,4:2,6:5,7:$V0,26:$V1,32:3,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6},{1:[3]},{5:[1,18],6:5,7:$V0,26:$V1,32:19,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6},o($V7,[2,15]),o($V7,[2,16]),o($V7,[2,17]),o($V7,[2,18]),o($V7,[2,19]),o($V7,[2,20]),o($V7,[2,21]),o($V7,[2,22]),{25:[1,21],72:20},{8:[1,22]},{12:[1,23]},o($V8,$V9,{48:24,49:25,92:33,94:34,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),{25:$Vl,40:39,42:40},{10:[1,42]},o($Vm,$V9,{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,49:25,92:33,94:34,60:43,61:44,48:45,4:46,7:$V0,11:$Va,12:$Vb,25:$Vc,26:$Vn,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),{1:[2,1]},o($V7,[2,14]),{23:[1,49],73:[1,48]},o($Vo,[2,65]),{9:50,26:[1,51]},o($Vp,$V9,{49:25,92:33,94:34,48:52,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($Vq,[2,38],{12:$Vr,23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),o($VJ,$VK),o($VJ,[2,84]),o($VJ,[2,85]),o($VJ,[2,86]),o([5,7,11,12,14,20,23,25,26,39,52,54,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,101],[2,87],{98:71,96:72,2:$VL,93:$VM,99:$VN}),o([5,7,12,14,20,23,26,39,52,54,55,59,64,67,69,71,74,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90,93],[2,94],{92:33,94:34,96:72,91:75,98:76,49:77,2:$VL,11:$VO,25:$VP,78:$Ve,95:$Vi,99:[1,78],101:$Vk}),o($Vp,$V9,{49:25,92:33,94:34,48:81,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),{10:[1,82]},o($VJ,[2,95],{93:[1,83]}),o($VQ,[2,97]),{2:$VL,96:84,99:$VN},{11:$VR,25:$VS,78:$VT,95:$VU,97:88,99:[1,86],100:85,101:$VV,102:$VW},o($VX,$VM,{96:72,98:94,2:$VL,99:$VN}),{12:[1,95]},{23:[1,97],35:99,38:101,41:96,50:98,51:100,52:$V3,55:$VY,59:$V4},o($VZ,[2,25]),{43:103,44:[2,28],46:[1,104]},{11:[1,105]},o([5,7,11,12,20,23,25,26,39,52,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,99,101],[2,46],{54:[1,106]}),o($V7,[2,48]),o($Vq,[2,58],{12:$Vr,23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),o([5,11,12,20,23,25,54,55,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,99,101],[2,59],{33:4,6:5,34:6,35:7,36:8,37:9,38:10,32:19,7:$V0,26:$V1,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6}),{10:[1,107]},o($V8,$V9,{49:25,92:33,94:34,48:108,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),{25:[1,109]},{10:[1,110]},{10:[2,8]},{12:$Vr,14:[1,111],23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($V_,$V9,{49:25,92:33,94:34,48:112,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:113,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:114,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:115,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:116,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:117,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:118,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:119,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:120,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:121,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:122,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:123,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:124,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:125,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:126,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:127,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V_,$V9,{49:25,92:33,94:34,48:128,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($Vp,$V9,{49:25,92:33,94:34,48:129,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($VQ,[2,99]),{11:$VR,25:$VS,78:$VT,95:$VU,97:88,100:130,101:$VV,102:$VW},o($V$,[2,105],{99:[1,131]}),{99:[1,132]},o($VJ,[2,88]),o($VQ,[2,104]),o($VJ,[2,93]),{11:$VR,25:$VS,78:$VT,95:$VU,97:88,99:[1,133],100:85,101:$VV,102:$VW},o($VX,$VM,{98:71,96:72,2:$VL,99:$VN}),o($VX,$VM,{96:72,98:76,2:$VL,99:$VN}),{12:$Vr,14:$V01,23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{11:[1,135]},{11:$VO,25:$VP,78:$Ve,94:136,95:$Vi,99:$Vj,101:$Vk},{11:$VR,25:$VS,78:$VT,97:137,101:$VV,102:$VW},o($VX,$VM,{96:72,98:138,2:$VL,99:$VN}),{11:$VR,25:$VS,78:$VT,95:$VU,97:88,100:139,101:$VV,102:$VW},o([2,5,7,11,12,14,20,23,25,26,39,52,54,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,93,99,101],[2,115],{95:[1,140]}),o($V11,[2,117]),o($V11,[2,110]),o($V11,[2,111]),{12:[1,141]},{11:[1,144],25:[1,146],78:[1,143],101:[1,145],103:142},o($V11,[2,114]),o($VQ,[2,102]),{14:[1,147]},o([5,7,11,12,20,23,25,26,39,54,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,99,101],[2,23],{35:99,51:100,38:101,50:148,52:$V3,55:$VY,59:$V4}),{25:$Vl,42:149},o($V7,[2,34]),o($V7,[2,35]),o($V7,[2,36]),o($V7,[2,37]),{56:[1,150]},{44:[1,151]},{25:[1,152]},{12:[1,153]},o($Vm,$V9,{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,49:25,92:33,94:34,48:45,4:46,61:154,7:$V0,11:$Va,12:$Vb,25:$Vc,26:$Vn,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),{11:[1,155]},o([5,7,11,20,25,26,39,52,54,55,59,64,67,69,71,77,85,86,88,89,90,95,99,101],[2,63],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,76:$Vx,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,87:$VI}),o($Vo,[2,64]),{11:[1,156]},{68:[1,157]},o($V21,[2,66],{12:$Vr,23:$Vs,87:$VI}),o($V21,[2,67],{12:$Vr,23:$Vs,87:$VI}),o($V31,[2,68],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,87:$VI}),o([5,7,11,14,20,25,26,39,52,55,59,67,69,71,77,88,89,90,95,99,101],[2,69],{12:$Vr,23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),o($V31,[2,70],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,87:$VI}),o($V41,[2,71],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,76:$Vx,78:$Vz,87:$VI}),o($V41,[2,72],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,76:$Vx,78:$Vz,87:$VI}),o($V41,[2,73],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,76:$Vx,78:$Vz,87:$VI}),o($V41,[2,74],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,76:$Vx,78:$Vz,87:$VI}),o($V41,[2,75],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,76:$Vx,78:$Vz,87:$VI}),o($V41,[2,76],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,76:$Vx,78:$Vz,87:$VI}),o($V51,[2,77],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,76:$Vx,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,87:$VI}),o($V51,[2,78],{12:$Vr,23:$Vs,74:$Vv,75:$Vw,76:$Vx,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,87:$VI}),o([5,7,11,14,20,25,26,39,52,55,59,67,69,71,77,86,88,89,90,95,99,101],[2,79],{12:$Vr,23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VI}),o($V61,[2,80],{12:$Vr,23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),o($V61,[2,81],{12:$Vr,23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),o([5,7,11,14,20,25,26,39,52,54,55,59,67,69,71,77,86,88,89,90,95,99,101],[2,83],{12:$Vr,23:$Vs,64:$Vu,74:$Vv,75:$Vw,76:$Vx,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,87:$VI}),{12:$Vr,14:[1,158],23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($VX,$VM,{96:72,98:159,2:$VL,99:$VN}),o($V$,[2,106]),o($V$,[2,107]),{11:$VR,25:$VS,78:$VT,95:$VU,97:88,100:139,101:$VV,102:$VW},o($VJ,[2,89]),{12:[1,160]},o($VQ,[2,96]),o($VX,$VM,{96:72,98:161,2:$VL,99:$VN}),o($VQ,[2,100]),o($VX,$VM,{96:72,98:162,2:$VL,99:$VN}),o($V11,[2,116]),{14:[1,163]},o($V11,[2,113]),o($V11,[2,118]),o($V11,[2,119]),{12:[1,164]},o($V11,[2,121]),o($VX,$VM,{96:72,98:165,2:$VL,99:$VN}),o($V7,[2,33]),o($VZ,[2,24]),{25:$V71,57:166,58:167},o([23,52,54,55,59,64,74,75,76,77,79,80,81,82,83,84,85,86,87],$V9,{92:33,94:34,45:169,49:170,48:171,47:172,11:$Va,12:[1,173],25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),{44:[2,27]},{11:$VO,25:$VP,49:175,70:174,78:$Ve,92:33,94:34,95:$Vi,99:$Vj,101:$Vk},o($V7,[2,47]),{12:[1,176]},{12:[1,177]},o($Vm,$V9,{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,49:25,92:33,94:34,48:45,4:46,65:178,61:179,7:$V0,11:$Va,12:$Vb,25:$Vc,26:$Vn,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($VJ,[2,91]),o($VQ,[2,108]),o($Vp,$V9,{49:25,92:33,94:34,48:180,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($VQ,[2,98]),o($VQ,[2,101]),o($V11,[2,112]),{104:[1,181]},o($VQ,[2,103]),o([5,7,11,12,20,25,26,39,52,54,55,59,64,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,99,101],[2,41],{23:[1,182]}),o($V7,[2,43]),o([5,7,12,20,23,26,39,52,54,55,59,64,67,69,71,74,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90],[2,45],{92:33,94:34,49:183,11:$VO,25:$VP,78:$Ve,95:$Vi,99:$Vj,101:$Vk}),o($VZ,[2,26]),o([12,23,52,54,55,59,64,74,75,76,77,78,79,80,81,82,83,84,85,86,87],[2,30]),o([52,55,59],[2,31],{12:$Vr,23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI}),o($VZ,[2,32]),o($Vp,$V9,{49:25,92:33,94:34,48:184,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),{14:[1,185],23:[1,186]},o($V81,[2,62]),o($Vp,$V9,{92:33,94:34,70:174,48:180,49:187,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),{13:188,24:189,25:$V91},o([5,12,20,23,54,55,64,74,75,76,77,78,79,80,81,82,83,84,85,86,87,99],[2,53],{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,49:25,92:33,94:34,48:45,4:46,61:192,7:$V0,11:$Va,25:$Vc,26:$Vn,39:$V2,52:$V3,59:$V4,67:$V5,69:[1,191],71:$V6,88:$Vf,89:$Vg,90:$Vh,95:$Vi,101:$Vk}),o($V7,[2,57]),{12:$Vr,14:[1,193],23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($V11,[2,120]),{25:$V71,58:194},o($V7,[2,44]),{12:$Vr,14:$V01,23:[1,195],54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},o($V7,[2,60]),{11:$VO,25:$VP,49:196,78:$Ve,92:33,94:34,95:$Vi,99:$Vj,101:$Vk},o([12,14,23,54,64,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$VK),{14:[1,197],23:[1,198]},o($V81,[2,6]),{15:[1,199]},o($Vm,$V9,{32:3,33:4,6:5,35:7,36:8,37:9,38:10,49:25,92:33,94:34,48:45,4:46,61:179,65:200,34:201,7:$V0,11:$Va,12:$Vb,25:$Vc,26:$Vn,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V7,[2,56]),o($VJ,[2,90]),o($V7,[2,42]),o($Vp,$V9,{49:25,92:33,94:34,48:202,11:$Va,12:$Vb,25:$Vc,26:$Vd,78:$Ve,88:$Vf,89:$Vg,90:$Vh,95:$Vi,99:$Vj,101:$Vk}),o($V81,[2,61]),{15:[1,203]},{24:204,25:$V91},{16:[1,205]},o([5,12,20,23,54,55,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,99],[2,54],{32:3,33:4,6:5,34:6,35:7,36:8,37:9,38:10,49:25,92:33,94:34,48:45,4:46,61:192,7:$V0,11:$Va,25:$Vc,26:$Vn,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6,88:$Vf,89:$Vg,90:$Vh,95:$Vi,101:$Vk}),o($V7,[2,55]),{12:$Vr,14:[1,206],23:$Vs,54:$Vt,64:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI},{16:[1,207]},o($V81,[2,5]),{10:[1,208]},o($VZ,[2,29]),{10:[1,209]},{17:210,27:$Va1,28:$Vb1,29:$Vc1,30:$Vd1,31:$Ve1},{17:216,27:$Va1,28:$Vb1,29:$Vc1,30:$Vd1,31:$Ve1},o($V81,$Vf1,{18:217,22:$Vg1}),o($Vh1,[2,9]),o($Vh1,[2,10]),o($Vh1,[2,11]),o($Vh1,[2,12]),o($Vh1,[2,13]),{18:219,19:$Vf1,22:$Vg1},o($V81,[2,7]),o([14,19,23],[2,3]),{19:[1,220]},{4:221,6:5,7:$V0,26:$V1,32:3,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6},{6:5,7:$V0,20:[1,222],26:$V1,32:19,33:4,34:6,35:7,36:8,37:9,38:10,39:$V2,52:$V3,59:$V4,67:$V5,71:$V6},{21:[1,223]},o($V7,[2,2])],
defaultActions: {18:[2,1],51:[2,8],152:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Tree } = require('./Simbolos/Tree');
    const { Tipo, tipos, esEntero } = require('./Varios/Tipo');
    const { Primitivo }  = require('./Expresiones/Primitivo');
    const { Error } = require('./Varios/Error');
    const { Identificador } = require('./Expresiones/identificador');
    //const {Vector} = require('../Expresiones/Vector');
    //const {Lista} = require('../Expresiones/Lista');
    //Instrucciones
    const {Print} = require('./Instrucciones/Print');
    const {Declaracion} = require('./Instrucciones/Declaracion');
  // // const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');
    //const {DeclaracionLista} = require('../Instrucciones/DeclaracionLista');
    //const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {AsignacionVector} = require('../Instrucciones/AsignacionVector');
   // const {AsignacionLista} = require('../Instrucciones/AsignacionLista');
    /*const {AddLista} = require('../Instrucciones/AddLista');
    
    const {Switch} = require('../Instrucciones/Switch');
    const {Case} = require('../Instrucciones/Case');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');
    const {LlamadaMetodo} = require('../Instrucciones/LlamadaMetodo');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Retorno} = require('../Instrucciones/Retorno');
    *///Expresion
    const { DeclaracionMetodo } = require('./Instrucciones/DeclaracionMetodo');
    const { LlamadaMetodo } = require('./Instrucciones/LlamadaMetodo');
    const { If } = require('./Instrucciones/If');
    const { Retorno } = require('./Instrucciones/Retorno');
    const { Aritmetica } = require('./Expresiones/Aritmetica');
    const { Relacional } = require('./Expresiones/Relacional');
    const { Logico } = require('./Expresiones/Logico');
    const { NodoX } = require('./Expresiones/NodoX');
    const { EjecucionXpath } = require('./Arbol/Ejecucion');
    /*const {Logico} = require('../Expresiones/Logico');
    const {Ternario} = require('../Expresiones/Ternario');
    const {Casteo} = require('../Expresiones/Casteo');
    const {InDecrement} = require('../Expresiones/InDecrement');
    const {Length} = require('../Expresiones/Length');
    const {ToLower} = require('../Expresiones/ToLower');
    const {ToUpper} = require('../Expresiones/ToUpper');
    const {Truncate} = require('../Expresiones/Truncate');
    const {Round} = require('../Expresiones/Round');
    const {TypeOf} = require('../Expresiones/TypeOf');
    const {ToString} = require('../Expresiones/ToString');
    const {ToCharArray} = require('../Expresiones/ToCharArray');*/
    const { AnalizadorASCXML } = require('../analizadorXML/index');
    const { xpathBusqueda } = require('../analizadorXML/Instrucciones/Busqueda/xpathBusqueda');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "tk_decimal";
break;
case 1:return "tk_entero";
break;
case 2:return "tk_node";
break;
case 3:return "tk_child";
break;
case 4:return "tk_let";
break;
case 5:return "tk_descendant";
break;
case 6:return "tk_descendatOr"
break;
case 7:return "tk_ancestor";
break;
case 8:return "tk_ancestorOr";
break;
case 9:return "tk_attribute";
break;
case 10:return "tk_following";
break;
case 11:return "tk_followingSi"
break;
case 12:return "tk_parent"
break;
case 13:return "tk_preceding"
break;
case 14:return "tk_precedingSi"
break;
case 15:return "tk_self"
break;
case 16:return "tk_text"
break;
case 17:return "tk_position"
break;
case 18:return "tk_last"
break;
case 19:return "tk_div"
break;
case 20:return "tk_and"
break;
case 21:return "tk_or"
break;
case 22:return "tk_mod"
break;
case 23:console.log(yy_.yytext+"--"); return "tk_for";
break;
case 24:console.log(yy_.yytext+"--"); return "tk_in";
break;
case 25:console.log(yy_.yytext+"--"); return "tk_where";
break;
case 26:console.log(yy_.yytext+"--"); return "tk_order";
break;
case 27:console.log(yy_.yytext+"--"); return "tk_by";
break;
case 28:console.log(yy_.yytext+"--"); return "tk_return";
break;
case 29:console.log(yy_.yytext+"--");return "tk_if";
break;
case 30:console.log(yy_.yytext+"--");return "tk_else";
break;
case 31:console.log(yy_.yytext+"--");return "tk_then";
break;
case 32:console.log(yy_.yytext+"--");return "tk_int";
break;
case 33:console.log(yy_.yytext+"--");return "tk_integer";
break;
case 34:console.log(yy_.yytext+"--");return "tk_string";
break;
case 35:console.log(yy_.yytext+"--");return "tk_DECIMAL";
break;
case 36:console.log(yy_.yytext+"--");return "tk_double";
break;
case 37:console.log(yy_.yytext+"--");return "tk_declare";
break;
case 38:console.log(yy_.yytext+"--");return "tk_function";
break;
case 39:console.log(yy_.yytext+"--");return "tk_AS"
break;
case 40:console.log(yy_.yytext+"--");return "tk_as"
break;
case 41:console.log(yy_.yytext+"--");return "tk_xs"
break;
case 42:console.log(yy_.yytext+"--");return "tk_to"
break;
case 43:console.log(yy_.yytext+"--");return "tk_at"
break;
case 44:console.log(yy_.yytext+"--");return "tk_local";
break;
case 45:console.log(yy_.yytext+"--"); return "tk_gt"
break;
case 46:console.log(yy_.yytext+"--"); return "tk_lt"
break;
case 47:return "tk_barra"
break;
case 48:return "tk_punto"
break;
case 49:return "tk_punto_coma"
break;
case 50:return "tk_coma"
break;
case 51:return "tk_diagonal"
break;
case 52:return "tk_asterisco"
break;
case 53:return "tk_Interroga"
break;
case 54:return "tk_mas"
break;
case 55:return "tk_menos"
break;
case 56:return "tk_menorIgual"
break;
case 57:return "tk_mayorIgual"
break;
case 58:return "tk_menor"
break;
case 59:return "tk_mayor"
break;
case 60:return "tk_distinto"
break;
case 61:console.log(yy_.yytext+"--");return "tk_igualXQUERY"
break;
case 62:return "tk_dosPuntos"
break;
case 63:return "tk_igual"
break;
case 64:return "tk_llaveA"
break;
case 65:return "tk_llaveC"
break;
case 66:return "tk_arroba"
break;
case 67:console.log(yy_.yytext+"--");return "llaveA"
break;
case 68:console.log(yy_.yytext+"--");return "llaveC"
break;
case 69:return "tk_parA"
break;
case 70:return "tk_parC"
break;
case 71:return "tk_stringTexto";
break;
case 72:return "tk_stringTexto";
break;
case 73:return "tk_stringTexto";
break;
case 74:return "tk_stringTexto";
break;
case 75:return "tk_identificador";
break;
case 76:return "tk_identificadorXQUERY";
console.log("indentificador papa")

break;
case 77:return "EOF";
break;
case 78:
break;
case 79:         
    console.log('Léxico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column );

break;
}
},
rules: [/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:node\b)/,/^(?:child\b)/,/^(?:let\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:int\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:double\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:AS\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:local\b)/,/^(?:gt\b)/,/^(?:lt\b)/,/^(?:\|)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\/)/,/^(?:\*)/,/^(?:\?)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:@)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:“[^\“]*“)/,/^(?:'[^\']*')/,/^(?:‘[^\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:[$]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \t\r\n\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXquery;
exports.Parser = GramaticaXquery.Parser;
exports.parse = function () { return GramaticaXquery.parse.apply(GramaticaXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}