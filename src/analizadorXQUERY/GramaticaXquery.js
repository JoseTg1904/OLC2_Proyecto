/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,16],$V2=[1,6],$V3=[1,15],$V4=[1,17],$V5=[1,18],$V6=[1,14],$V7=[1,12],$V8=[5,7,20,26,34,42,54,57,61,67,71,74],$V9=[1,27],$Va=[1,33],$Vb=[1,38],$Vc=[1,37],$Vd=[1,32],$Ve=[1,30],$Vf=[1,31],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,57],$Vk=[23,54,57,61],$Vl=[1,76],$Vm=[1,75],$Vn=[1,71],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[5,7,12,14,20,23,26,34,42,54,56,57,61,64,67,71,74,107,108,109,110,111,112,113,114,115,116,117,118,119,120],$VC=[1,79],$VD=[1,78],$VE=[1,80],$VF=[2,127],$VG=[2,136],$VH=[1,89],$VI=[1,88],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[2,134],$VN=[5,7,12,20,26,34,42,54,56,57,61,64,67,71,74,108,109,110,111,112,113,114,115,116,117,118,119,120],$VO=[5,20,57,71],$VP=[2,61],$VQ=[1,100],$VR=[2,5,7,12,14,20,23,26,34,42,54,56,57,61,64,67,71,74,78,85,107,108,109,110,111,112,113,114,115,116,117,118,119,120],$VS=[2,135],$VT=[5,7,12,14,20,23,26,34,42,54,56,57,61,64,67,71,74,78,107,108,109,110,111,112,113,114,115,116,117,118,119,120],$VU=[1,131],$VV=[1,130],$VW=[2,108],$VX=[1,133],$VY=[1,138],$VZ=[1,136],$V_=[1,139],$V$=[1,140],$V01=[1,141],$V11=[1,143],$V21=[1,144],$V31=[1,145],$V41=[1,146],$V51=[1,147],$V61=[1,148],$V71=[1,149],$V81=[1,150],$V91=[1,151],$Va1=[1,152],$Vb1=[1,153],$Vc1=[1,154],$Vd1=[1,157],$Ve1=[12,56,64,108,109,110,111,112,113,114,115,116,117,118,119,120],$Vf1=[2,47],$Vg1=[1,163],$Vh1=[5,7,14,20,23,26,34,42,54,57,61,67,71,74,107],$Vi1=[5,7,14,20,23,26,34,42,54,56,57,61,64,67,71,74,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vj1=[5,7,14,20,23,26,34,42,54,56,57,61,64,67,71,74,107,111,112,113,114,115,116,117,118,119],$Vk1=[5,7,14,20,23,26,34,42,54,56,57,61,64,67,71,74,107,111,118,119],$Vl1=[11,80,87,88,89,92,94,95,96,97,98,99,100,101,102,103,104],$Vm1=[2,82],$Vn1=[5,7,20,23,26,34,42,54,57,61,67,71,74],$Vo1=[1,226],$Vp1=[1,234],$Vq1=[1,232],$Vr1=[1,233],$Vs1=[1,235],$Vt1=[14,23],$Vu1=[1,267],$Vv1=[1,268],$Vw1=[1,269],$Vx1=[1,270],$Vy1=[1,271],$Vz1=[2,4],$VA1=[1,274],$VB1=[14,19,22,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO_XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FUNCION":6,"tk_declare":7,"tk_function":8,"MENU_LOCAL":9,"tk_dosPuntos":10,"tk_identificador":11,"tk_parA":12,"LISTA_DECLARACION_FUNCION":13,"tk_parC":14,"tk_as":15,"tk_xs":16,"TIPO_DATO":17,"MENU_INTERROGA":18,"llaveA":19,"llaveC":20,"tk_punto_coma":21,"tk_Interroga":22,"tk_coma":23,"DECLARACION_FUNCION":24,"tk_identificadorXQUERY":25,"tk_local":26,"tk_int":27,"tk_string":28,"tk_double":29,"tk_DECIMAL":30,"tk_integer":31,"INSTRUCCION":32,"DECLARACION_GLOBAL":33,"ComentarioM":34,"IF":35,"FOR":36,"LLAMADA_FUNCION":37,"WHERE":38,"RETURN_CICLO":39,"XPATH":40,"INICIO_XPATH":41,"tk_for":42,"DECLARACIONES_FOR":43,"OPCIONES_FOR":44,"DECLARACION_FOR":45,"OPCION_AT":46,"tk_in":47,"FOR_REC":48,"tk_at":49,"EXPRESION":50,"CORDERNADA":51,"OPCION_FOR":52,"ORDER":53,"tk_where":54,"CONDITIONES_WHERE":55,"tk_and":56,"tk_order":57,"tk_by":58,"LISTA_ORDER":59,"ORDER_":60,"tk_return":61,"LISTA_ASIGNACION":62,"ASIGNACION_SIMPLE":63,"tk_igual":64,"valor_if":65,"TK":66,"tk_if":67,"CONDICION":68,"tk_then":69,"ELSE":70,"tk_else":71,"VALOR":72,"OPCIONES_CONDICION":73,"tk_let":74,"tk_igualXQUERY":75,"LISTA_ID":76,"INICIO":77,"tk_barra":78,"INICIALES":79,"tk_punto":80,"DIAGONALES":81,"DERIVADOSLIMITADO":82,"DERIVACIONDIAGONAL":83,"PREDICATE":84,"tk_diagonal":85,"DERIVADOS":86,"tk_asterisco":87,"tk_node":88,"tk_arroba":89,"ATRIBUTO":90,"AXES":91,"tk_child":92,"NODETEST":93,"tk_descendant":94,"tk_descendatOr":95,"tk_ancestor":96,"tk_ancestorOr":97,"tk_attribute":98,"tk_following":99,"tk_followingSi":100,"tk_parent":101,"tk_preceding":102,"tk_precedingSi":103,"tk_self":104,"tk_text":105,"tk_llaveA":106,"tk_llaveC":107,"tk_mas":108,"tk_menos":109,"tk_div":110,"tk_mod":111,"tk_menor":112,"tk_lt":113,"tk_gt":114,"tk_mayor":115,"tk_menorIgual":116,"tk_mayorIgual":117,"tk_distinto":118,"tk_or":119,"tk_to":120,"tk_entero":121,"tk_decimal":122,"tk_position":123,"tk_last":124,"tk_stringTexto":125,"OPCION_IDQ":126,"tk_ParC":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_declare",8:"tk_function",10:"tk_dosPuntos",11:"tk_identificador",12:"tk_parA",14:"tk_parC",15:"tk_as",16:"tk_xs",19:"llaveA",20:"llaveC",21:"tk_punto_coma",22:"tk_Interroga",23:"tk_coma",25:"tk_identificadorXQUERY",26:"tk_local",27:"tk_int",28:"tk_string",29:"tk_double",30:"tk_DECIMAL",31:"tk_integer",34:"ComentarioM",42:"tk_for",47:"tk_in",49:"tk_at",54:"tk_where",56:"tk_and",57:"tk_order",58:"tk_by",61:"tk_return",64:"tk_igual",66:"TK",67:"tk_if",69:"tk_then",71:"tk_else",72:"VALOR",74:"tk_let",75:"tk_igualXQUERY",78:"tk_barra",80:"tk_punto",85:"tk_diagonal",87:"tk_asterisco",88:"tk_node",89:"tk_arroba",92:"tk_child",94:"tk_descendant",95:"tk_descendatOr",96:"tk_ancestor",97:"tk_ancestorOr",98:"tk_attribute",99:"tk_following",100:"tk_followingSi",101:"tk_parent",102:"tk_preceding",103:"tk_precedingSi",104:"tk_self",105:"tk_text",106:"tk_llaveA",107:"tk_llaveC",108:"tk_mas",109:"tk_menos",110:"tk_div",111:"tk_mod",112:"tk_menor",113:"tk_lt",114:"tk_gt",115:"tk_mayor",116:"tk_menorIgual",117:"tk_mayorIgual",118:"tk_distinto",119:"tk_or",120:"tk_to",121:"tk_entero",122:"tk_decimal",123:"tk_position",124:"tk_last",125:"tk_stringTexto",127:"tk_ParC"},
productions_: [0,[3,2],[6,17],[18,1],[18,0],[13,3],[13,1],[24,6],[9,1],[17,1],[17,1],[17,1],[17,1],[17,1],[4,2],[4,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[40,1],[36,3],[43,3],[43,1],[45,4],[46,2],[46,0],[48,1],[48,1],[48,1],[44,2],[44,1],[52,1],[52,1],[52,1],[38,2],[55,3],[55,1],[53,3],[59,3],[59,1],[60,2],[60,1],[39,3],[39,2],[39,2],[62,3],[62,1],[63,3],[63,4],[35,5],[70,2],[70,2],[70,0],[65,1],[65,1],[65,1],[65,0],[37,4],[68,3],[73,1],[73,2],[33,4],[76,3],[76,1],[41,1],[77,3],[77,1],[79,4],[79,3],[79,3],[79,4],[79,3],[79,5],[81,1],[81,2],[81,2],[83,3],[83,0],[82,2],[82,2],[82,4],[82,2],[82,1],[86,1],[86,2],[86,1],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[93,2],[93,4],[93,2],[93,3],[84,3],[84,0],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,1],[50,1],[50,2],[50,1],[50,3],[50,3],[50,1],[50,2],[50,3],[50,4],[50,1],[126,1],[126,0],[51,5],[90,1],[90,1],[90,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 66:
console.log($$[$0-2]+"--val"+$$[$0]) 
break;
}
},
table: [{3:1,4:2,6:5,7:$V0,26:$V1,32:3,33:4,34:$V2,35:7,36:8,37:9,38:10,39:11,42:$V3,54:$V4,61:$V5,67:$V6,74:$V7},{1:[3]},{5:[1,19],6:5,7:$V0,26:$V1,32:20,33:4,34:$V2,35:7,36:8,37:9,38:10,39:11,42:$V3,54:$V4,61:$V5,67:$V6,74:$V7},o($V8,[2,15]),o($V8,[2,16]),o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),o($V8,[2,20]),o($V8,[2,21]),o($V8,[2,22]),o($V8,[2,23]),{25:[1,21]},{8:[1,22]},{12:[1,24],68:23},{25:$V9,43:25,45:26},{10:[1,28]},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:29,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{4:41,6:5,7:$V0,11:$Va,12:$Vb,25:[1,40],26:$V1,32:3,33:4,34:$V2,35:7,36:8,37:43,38:10,39:11,42:$V3,50:42,54:$V4,61:$V5,67:$V6,74:$V7,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{1:[2,1]},o($V8,[2,14]),{75:[1,44]},{9:45,26:[1,46]},{69:[1,47]},{11:$Va,12:$Vb,25:[1,50],26:$V1,37:39,50:49,73:48,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{23:[1,52],38:54,39:56,44:51,52:53,53:55,54:$V4,57:$Vj,61:$V5},o($Vk,[2,27]),{46:58,47:[2,30],49:[1,59]},{11:[1,60]},o($V8,[2,39],{12:$Vl,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA}),o($VB,[2,124]),o($VB,[2,125]),{11:$VC,87:$VD,88:$VE,90:77},o($VB,$VF),{12:[1,81]},{12:[1,82]},o($VB,[2,130]),o($VB,$VG,{126:83,40:84,41:85,77:86,79:87,11:$VH,80:$VI,85:$VJ,87:$VK,88:$VL}),{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:93,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},o($VB,$VM),o($VN,$VG,{126:83,41:85,77:86,79:87,40:94,11:$VH,80:$VI,85:$VJ,87:$VK,88:$VL}),o($VO,[2,48],{33:4,6:5,35:7,36:8,37:9,38:10,39:11,32:20,7:$V0,26:$V1,34:$V2,42:$V3,54:$V4,61:$V5,67:$V6,74:$V7}),o($V8,[2,49],{12:$Vl,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA}),o($VN,$VM),{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:95,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{10:[1,96]},{10:[2,8]},o($VO,$VP,{33:4,6:5,35:7,36:8,38:10,39:11,37:43,65:97,50:98,32:99,7:$V0,11:$Va,12:$Vb,25:$Vc,26:$V1,34:$V2,42:$V3,54:$V4,61:$V5,67:$V6,72:$VQ,74:$V7,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi}),{14:[1,101]},{12:$Vl,14:[2,64],56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},o([12,14,56,64,108,109,110,111,112,113,114,115,116,117,118,119,120],$VG,{126:83,41:85,77:86,79:87,40:102,11:$VH,80:$VI,85:$VJ,87:$VK,88:$VL}),o([5,7,20,26,34,42,67,71,74],[2,25],{38:54,53:55,39:56,52:103,54:$V4,57:$Vj,61:$V5}),{25:$V9,45:104},o($V8,[2,35]),o($V8,[2,36]),o($V8,[2,37]),o($V8,[2,38]),{58:[1,105]},{47:[1,106]},{25:[1,107]},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:108,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:109,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:110,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:111,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:112,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:113,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:114,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:115,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:116,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:117,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:118,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:119,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:120,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:121,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:122,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:123,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:124,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},o($VB,[2,126]),o($VR,[2,138]),o($VR,[2,139]),{12:[1,125]},{14:[1,126]},{14:[1,127]},o($VB,[2,131]),o($VB,$VS),o($VB,[2,24]),o($VB,[2,69],{78:[1,128]}),o($VT,[2,71]),{2:$VU,81:129,85:$VV},o($VR,$VW,{84:132,106:$VX}),{11:$VY,80:$VZ,82:137,85:[1,135],86:134,87:$V_,88:$V$,89:$V01,91:142,92:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1},o($VR,$VW,{84:155,106:$VX}),{12:[1,156]},{12:$Vl,14:$Vd1,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},o($Ve1,$VS,{5:$Vf1,7:$Vf1,20:$Vf1,26:$Vf1,34:$Vf1,42:$Vf1,54:$Vf1,57:$Vf1,61:$Vf1,67:$Vf1,71:$Vf1,74:$Vf1}),o($V8,[2,66],{12:$Vl,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA}),{11:[1,158]},o([5,7,20,26,34,42,54,57,61,67,74],[2,57],{70:159,71:[1,160]}),o($V8,[2,58],{12:$Vl,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA}),o($V8,[2,59]),o($V8,[2,60]),{69:[2,63]},o($Ve1,$VS,{14:[2,65]}),o($V8,[2,34]),o($Vk,[2,26]),{25:$Vg1,59:161,60:162},{11:[1,168],12:[1,169],25:$Vc,26:$V1,37:39,40:165,41:85,48:164,50:166,51:167,77:86,79:87,80:$VI,85:$VJ,87:$VK,88:$VL,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},{47:[2,29]},o($Vh1,[2,62],{12:$Vl,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA}),o($Vi1,[2,109],{12:$Vl,120:$VA}),o($Vi1,[2,110],{12:$Vl,120:$VA}),o([5,7,14,20,23,26,34,42,54,56,57,61,64,67,71,74,107,110,111,112,113,114,115,116,117,118,119],[2,111],{12:$Vl,108:$Vo,109:$Vp,120:$VA}),o([5,7,14,20,23,26,34,42,54,57,61,67,71,74,107,111],[2,112],{12:$Vl,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA}),o($Vj1,[2,113],{12:$Vl,108:$Vo,109:$Vp,110:$Vq,120:$VA}),o($Vj1,[2,114],{12:$Vl,108:$Vo,109:$Vp,110:$Vq,120:$VA}),o($Vj1,[2,115],{12:$Vl,108:$Vo,109:$Vp,110:$Vq,120:$VA}),o($Vj1,[2,116],{12:$Vl,108:$Vo,109:$Vp,110:$Vq,120:$VA}),o($Vj1,[2,117],{12:$Vl,108:$Vo,109:$Vp,110:$Vq,120:$VA}),o($Vj1,[2,118],{12:$Vl,108:$Vo,109:$Vp,110:$Vq,120:$VA}),o($Vk1,[2,119],{12:$Vl,108:$Vo,109:$Vp,110:$Vq,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,120:$VA}),o($Vk1,[2,120],{12:$Vl,108:$Vo,109:$Vp,110:$Vq,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,120:$VA}),o([5,7,14,20,23,26,34,42,54,57,61,67,71,74,107,111,119],[2,121],{12:$Vl,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,120:$VA}),o($Vh1,[2,122],{12:$Vl,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA}),o([5,7,14,20,23,26,34,42,54,56,57,61,67,71,74,107,111,119],[2,123],{12:$Vl,64:$Vn,108:$Vo,109:$Vp,110:$Vq,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,120:$VA}),{12:$Vl,14:[1,170],56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},{127:[1,171]},o($VB,[2,128]),o($VB,[2,129]),{11:$VH,79:172,80:$VI,85:$VJ,87:$VK,88:$VL},{11:$VY,82:173,87:$V_,88:$V$,89:$V01,91:142,92:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1},o($Vl1,[2,78],{85:[1,174]}),{85:[1,175]},o($VT,$Vm1,{83:176,81:177,2:$VU,85:$VV}),{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:178,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},o($VT,$Vm1,{81:177,83:179,2:$VU,85:$VV}),{11:$VY,80:$VZ,82:137,86:180,87:$V_,88:$V$,89:$V01,91:142,92:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1},o($VR,[2,88],{80:[1,181]}),o($VR,[2,90]),o($VR,$VW,{84:182,106:$VX}),o($VR,$VW,{84:183,106:$VX}),{12:[1,184]},{11:$VC,87:$VD,88:$VE,90:185},o($VR,[2,87]),{10:[1,186]},{10:[1,187]},{10:[1,188]},{10:[1,189]},{10:[1,190]},{10:[1,191]},{10:[1,192]},{10:[1,193]},{10:[1,194]},{10:[1,195]},{10:[1,196]},{10:[1,197]},o($VT,$Vm1,{81:177,83:198,2:$VU,85:$VV}),{14:[1,199]},o($VB,[2,132]),{12:[1,200]},o($V8,[2,54]),o($VO,$VP,{33:4,6:5,36:8,38:10,39:11,37:43,50:98,32:99,65:201,35:202,7:$V0,11:$Va,12:$Vb,25:$Vc,26:$V1,34:$V2,42:$V3,54:$V4,61:$V5,67:$V6,72:$VQ,74:$V7,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi}),o($V8,[2,42],{23:[1,203]}),o($Vn1,[2,44]),o($Vn1,[2,46],{41:85,77:86,79:87,40:204,11:$VH,80:$VI,85:$VJ,87:$VK,88:$VL}),o($Vk,[2,28]),o($Vk,[2,31]),o($Vk,[2,32],{12:$Vl,56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA}),o($Vk,[2,33]),o([12,23,54,56,57,61,64,108,109,110,111,112,113,114,115,116,117,118,119,120],$VF,{84:132,2:$VW,78:$VW,85:$VW,106:$VX}),{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:205,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},o($VB,[2,133]),o($VR,[2,140]),o($VT,[2,70]),o($VT,$Vm1,{81:177,83:206,2:$VU,85:$VV}),o($Vl1,[2,79]),o($Vl1,[2,80]),o($VT,[2,73]),{11:$VY,80:$VZ,82:137,86:207,87:$V_,88:$V$,89:$V01,91:142,92:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1},{12:$Vl,56:$Vm,64:$Vn,107:[1,208],108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},o($VT,[2,74]),o($VT,$Vm1,{81:177,83:209,2:$VU,85:$VV}),o($VR,[2,89]),o($VR,[2,83]),o($VR,[2,84]),{14:[1,210]},o($VR,[2,86]),{10:[1,211]},{10:[1,212]},{10:[1,213]},{10:[1,214]},{10:[1,215]},{10:[1,216]},{10:[1,217]},{10:[1,218]},{10:[1,219]},{10:[1,220]},{10:[1,221]},{10:[1,222]},o($VT,[2,76]),o($VR,$VW,{84:223,106:$VX}),{13:224,24:225,25:$Vo1},o($V8,[2,55]),o($V8,[2,56]),{25:$Vg1,60:227},o($Vn1,[2,45]),{12:$Vl,14:$Vd1,23:[1,228],56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},o($VT,[2,72]),o($VT,$Vm1,{81:177,83:229,2:$VU,85:$VV}),o($VR,[2,107]),o($VT,[2,75]),o($VR,$VW,{84:230,106:$VX}),{11:$Vp1,87:$Vq1,88:$Vr1,93:231,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:236,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:237,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:238,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:239,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:240,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:241,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:242,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:243,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:244,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:245,105:$Vs1},{11:$Vp1,87:$Vq1,88:$Vr1,93:246,105:$Vs1},o($VT,$Vm1,{81:177,83:247,2:$VU,85:$VV}),{14:[1,248],23:[1,249]},o($Vt1,[2,6]),{15:[1,250]},o($Vn1,[2,43]),{11:$Va,12:$Vb,25:$Vc,26:$V1,37:39,50:251,89:$Vd,121:$Ve,122:$Vf,123:$Vg,124:$Vh,125:$Vi},o($VT,[2,81]),o($VR,[2,85]),o($VR,[2,91]),o($VR,$VW,{84:252,106:$VX}),{12:[1,253]},o($VR,$VW,{84:254,106:$VX}),{12:[1,255]},o($VR,[2,92]),o($VR,[2,93]),o($VR,[2,94]),o($VR,[2,95]),o($VR,[2,96]),o($VR,[2,97]),o($VR,[2,98]),o($VR,[2,99]),o($VR,[2,100]),o($VR,[2,101]),o($VR,[2,102]),o($VT,[2,77]),{15:[1,256]},{24:257,25:$Vo1},{16:[1,258]},{12:$Vl,14:[1,259],56:$Vm,64:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv,116:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},o($VR,[2,103]),{14:[1,260]},o($VR,[2,105]),{14:[1,261]},{16:[1,262]},o($Vt1,[2,5]),{10:[1,263]},o($Vk,[2,137]),o($VR,$VW,{84:264,106:$VX}),o($VR,[2,106]),{10:[1,265]},{17:266,27:$Vu1,28:$Vv1,29:$Vw1,30:$Vx1,31:$Vy1},o($VR,[2,104]),{17:272,27:$Vu1,28:$Vv1,29:$Vw1,30:$Vx1,31:$Vy1},o($Vt1,$Vz1,{18:273,22:$VA1}),o($VB1,[2,9]),o($VB1,[2,10]),o($VB1,[2,11]),o($VB1,[2,12]),o($VB1,[2,13]),{18:275,19:$Vz1,22:$VA1},o($Vt1,[2,7]),o([14,19,23],[2,3]),{19:[1,276]},{4:277,6:5,7:$V0,26:$V1,32:3,33:4,34:$V2,35:7,36:8,37:9,38:10,39:11,42:$V3,54:$V4,61:$V5,67:$V6,74:$V7},{6:5,7:$V0,20:[1,278],26:$V1,32:20,33:4,34:$V2,35:7,36:8,37:9,38:10,39:11,42:$V3,54:$V4,61:$V5,67:$V6,74:$V7},{21:[1,279]},o($V8,[2,2])],
defaultActions: {19:[2,1],46:[2,8],101:[2,63],107:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 34
break;
case 2:return "tk_node";
break;
case 3:return "tk_for";
break;
case 4:return "tk_in";
break;
case 5:return "tk_where";
break;
case 6:return "tk_order";
break;
case 7:return "tk_by";
break;
case 8:return "tk_return";
break;
case 9:return "tk_if";
break;
case 10:return "tk_else";
break;
case 11:return "tk_then";
break;
case 12:return "tk_return";
break;
case 13:return "tk_and";
break;
case 14:return "tk_let";
break;
case 15:return "tk_int";
break;
case 16:return "tk_integer";
break;
case 17:return "tk_string";
break;
case 18:return "tk_DECIMAL";
break;
case 19:return "tk_double";
break;
case 20:return "tk_declare";
break;
case 21:return "tk_function";
break;
case 22:return "tk_AS"
break;
case 23:return "tk_as"
break;
case 24:return "tk_xs"
break;
case 25:return "tk_to"
break;
case 26:return "tk_at"
break;
case 27:return "tk_local";
break;
case 28:return "tk_child";
break;
case 29:return "tk_descendant";
break;
case 30:return "tk_descendatOr"
break;
case 31:return "tk_ancestor";
break;
case 32:return "tk_ancestorOr";
break;
case 33:return "tk_attribute";
break;
case 34:return "tk_following";
break;
case 35:return "tk_followingSi"
break;
case 36:return "tk_parent"
break;
case 37:return "tk_preceding"
break;
case 38:return "tk_precedingSi"
break;
case 39:return "tk_self"
break;
case 40:return "tk_text"
break;
case 41:return "tk_position"
break;
case 42:return "tk_last"
break;
case 43:return "tk_div"
break;
case 44:return "tk_and"
break;
case 45:return "tk_or"
break;
case 46:return "tk_mod"
break;
case 47:return "tk_barra"
break;
case 48:return "llaveA"
break;
case 49:return "llaveC"
break;
case 50:return "tk_punto_coma"
break;
case 51:return "tk_punto"
break;
case 52:return "tk_coma"
break;
case 53:return "tk_diagonal"
break;
case 54:return "tk_asterisco"
break;
case 55:return "tk_Interroga"
break;
case 56:return "tk_mas"
break;
case 57:return "tk_menos"
break;
case 58:return "tk_menorIgual"
break;
case 59:return "tk_mayorIgual"
break;
case 60: return "tk_gt"
break;
case 61: return "tk_lt"
break;
case 62:return "tk_menor"
break;
case 63:return "tk_mayor"
break;
case 64:return "tk_distinto"
break;
case 65:return "tk_igualXQUERY"
break;
case 66:return "tk_dosPuntos"
break;
case 67:return "tk_igual"
break;
case 68:return "tk_llaveA"
break;
case 69:return "tk_llaveC"
break;
case 70:return "tk_arroba"
break;
case 71:return "tk_parA"
break;
case 72:return "tk_parC"
break;
case 73:return "tk_stringTexto";
break;
case 74:return "tk_stringTexto";
break;
case 75:return "tk_stringTexto";
break;
case 76:return "tk_stringTexto";
break;
case 77:return "tk_decimal";
break;
case 78:return "tk_entero";
break;
case 79:return "tk_identificador";
console.log("identificador normal")

break;
case 80:return "tk_identificadorXQUERY";
console.log("indentificador papa")

break;
case 81:return 'valor';
break;
case 82:return "EOF";
break;
case 83:         
    console.log('Léxico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column );

break;
}
},
rules: [/^(?:[\s+\r\t\f])/,/^(?:[(][:][^:]*[:]+([^()*][^)]*[:]+)*[)])/,/^(?:node\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:return\b)/,/^(?:and\b)/,/^(?:let\b)/,/^(?:int\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:double\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:AS\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:local\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:\|)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:\.)/,/^(?:,)/,/^(?:\/)/,/^(?:\*)/,/^(?:\?)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:gt\b)/,/^(?:lt\b)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:@)/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:“[^\“]*“)/,/^(?:'[^\']*')/,/^(?:‘[^\‘]*‘)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:[$]([a-zA-Z0-9_])*)/,/^(?:[^<]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"Comentario":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXquery;
exports.Parser = GramaticaXquery.Parser;
exports.parse = function () { return GramaticaXquery.parse.apply(GramaticaXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}