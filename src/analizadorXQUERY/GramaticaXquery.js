/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,14],$V2=[1,13],$V3=[1,15],$V4=[1,12],$V5=[1,10],$V6=[5,7,20,26,52,59,65,70],$V7=[1,26],$V8=[1,28],$V9=[1,27],$Va=[1,29],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[23,72],$Vf=[1,49],$Vg=[1,46],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[1,41],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,47],$Vr=[1,48],$Vs=[5,7,14,20,23,26,52,54,59,62,65,67,70,73,74,75,76,77,78,79,80,81,82,83],$Vt=[5,7,14,20,23,26,52,54,59,62,65,67,70,75,76,77,78,79,80,81,82,83],$Vu=[5,7,14,20,23,26,52,54,59,62,65,67,70,76,78,79,80,81,82,83],$Vv=[5,7,14,20,23,26,52,54,59,62,65,67,70,76,82,83],$Vw=[1,81],$Vx=[1,85],$Vy=[1,83],$Vz=[1,80],$VA=[1,82],$VB=[1,84],$VC=[14,23],$VD=[14,23,89],$VE=[1,95],$VF=[1,94],$VG=[2,99],$VH=[1,102],$VI=[1,106],$VJ=[1,103],$VK=[1,100],$VL=[1,104],$VM=[1,105],$VN=[1,112],$VO=[11,25,77,91,97,98],$VP=[2,14,23,89,95],$VQ=[1,152],$VR=[1,153],$VS=[1,154],$VT=[1,155],$VU=[1,156],$VV=[2,4],$VW=[1,159],$VX=[14,19,22,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO_XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FUNCION":6,"tk_declare":7,"tk_function":8,"MENU_LOCAL":9,"tk_dosPuntos":10,"tk_identificador":11,"tk_parA":12,"LISTA_DECLARACION_FUNCION":13,"tk_parC":14,"tk_as":15,"tk_xs":16,"TIPO_DATO":17,"MENU_INTERROGA":18,"llaveA":19,"llaveC":20,"tk_punto_coma":21,"tk_Interroga":22,"tk_coma":23,"DECLARACION_FUNCION":24,"tk_identificadorXQUERY":25,"tk_local":26,"tk_int":27,"tk_string":28,"tk_double":29,"tk_DECIMAL":30,"tk_integer":31,"INSTRUCCION":32,"DECLARACION_GLOBAL":33,"IF":34,"WHERE":35,"LLAMADA_FUNCION":36,"RETURN_CICLO":37,"FOR":38,"tk_for":39,"DECLARACIONES_FOR":40,"OPCIONES_FOR":41,"DECLARACION_FOR":42,"OPCION_AT":43,"tk_in":44,"FOR_REC":45,"tk_at":46,"CORDERNADA":47,"EXP_XQUERY":48,"XPATH":49,"OPCION_FOR":50,"ORDER":51,"tk_where":52,"CONDITIONES_WHERE":53,"tk_and":54,"tk_order":55,"tk_by":56,"LISTA_ORDER":57,"ORDER_":58,"tk_return":59,"LISTA_ASIGNACION":60,"ASIGNACION_SIMPLE":61,"tk_igual":62,"valores_if":63,"TK":64,"tk_if":65,"tk_then":66,"tk_else":67,"Parametros_llamada":68,"Parametros_funcion":69,"tk_let":70,"LISTA_ID":71,"tk_igualXQUERY":72,"tk_menos":73,"tk_mas":74,"tk_div":75,"tk_mod":76,"tk_asterisco":77,"tk_menor":78,"tk_mayor":79,"tk_menorIgual":80,"tk_mayorIgual":81,"tk_distinto":82,"tk_or":83,"tk_entero":84,"tk_decimal":85,"tk_stringTexto":86,"OPCION_IDQ":87,"INICIO":88,"tk_barra":89,"INICIALES":90,"tk_punto":91,"DIAGONALES":92,"DERIVADOSLIMITADO":93,"DERIVACIONDIAGONAL":94,"tk_diagonal":95,"DERIVADOS":96,"tk_node":97,"tk_arroba":98,"ATRIBUTO":99,"tk_ParC":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_declare",8:"tk_function",10:"tk_dosPuntos",11:"tk_identificador",12:"tk_parA",14:"tk_parC",15:"tk_as",16:"tk_xs",19:"llaveA",20:"llaveC",21:"tk_punto_coma",22:"tk_Interroga",23:"tk_coma",25:"tk_identificadorXQUERY",26:"tk_local",27:"tk_int",28:"tk_string",29:"tk_double",30:"tk_DECIMAL",31:"tk_integer",39:"tk_for",44:"tk_in",46:"tk_at",52:"tk_where",54:"tk_and",55:"tk_order",56:"tk_by",59:"tk_return",62:"tk_igual",64:"TK",65:"tk_if",66:"tk_then",67:"tk_else",70:"tk_let",72:"tk_igualXQUERY",73:"tk_menos",74:"tk_mas",75:"tk_div",76:"tk_mod",77:"tk_asterisco",78:"tk_menor",79:"tk_mayor",80:"tk_menorIgual",81:"tk_mayorIgual",82:"tk_distinto",83:"tk_or",84:"tk_entero",85:"tk_decimal",86:"tk_stringTexto",89:"tk_barra",91:"tk_punto",95:"tk_diagonal",97:"tk_node",98:"tk_arroba",100:"tk_ParC"},
productions_: [0,[3,2],[6,17],[18,1],[18,0],[13,3],[13,1],[24,6],[9,1],[17,1],[17,1],[17,1],[17,1],[17,1],[4,2],[4,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[38,3],[40,3],[40,1],[42,4],[43,2],[43,0],[47,5],[45,1],[45,1],[45,1],[41,2],[41,1],[50,1],[50,1],[50,1],[35,2],[53,3],[53,1],[51,3],[57,3],[57,1],[58,2],[58,1],[37,2],[60,3],[60,1],[61,3],[61,4],[34,6],[34,8],[34,8],[63,2],[63,1],[36,6],[68,3],[68,1],[69,3],[69,1],[33,4],[71,3],[71,1],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,1],[48,1],[48,1],[48,1],[48,3],[48,6],[87,1],[87,0],[49,1],[88,3],[88,1],[90,4],[90,2],[90,3],[90,4],[90,2],[90,4],[90,2],[92,1],[92,2],[92,2],[94,3],[94,0],[93,1],[93,1],[93,3],[93,2],[93,1],[96,1],[96,2],[96,1],[99,1],[99,1],[99,3],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return new Tree($$[$0-1]); 
    
break;
case 2:

            this.$ = new DeclaracionMetodo($$[$0-5], $$[$0-12], $$[$0-10], $$[$0-2], _$[$0-16].first_line, _$[$0-16].first_column);
        
break;
case 3: case 95:

            this.$ = $$[$0]
        
break;
case 4:
 
            this.$ = ''
        
break;
case 5:
 
            this.$.push($$[$0]);
        
break;
case 6: case 57: case 59: case 87:

            this.$ = [$$[$0]]
        
break;
case 7:

            this.$ = new Declaracion($$[$0-1], $$[$0-5], null, _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 8:
this.$=$$[$0];
break;
case 9: case 13:
this.$ = new Tipo(tipos.ENTERO);
break;
case 10:
this.$ = new Tipo(tipos.STRING);
break;
case 11: case 12:
this.$ = new Tipo(tipos.DECIMAL);
break;
case 14:
 this.$.push($$[$0]); 
break;
case 15:
 this.$ = [$$[$0]] 
break;
case 16: case 17: case 18: case 19: case 20: case 21:
this.$=$$[$0]
break;
case 45:

            this.$ = new Retorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
        
break;
case 50:

            this.$ = new If($$[$0-3], 
                    [new Retorno($$[$0], _$[$0-5].first_line, _$[$0-5].first_column)], 
                    [], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 51:

            this.$ = new If($$[$0-5], 
                    [new Retorno($$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column)], 
                    [new Retorno($$[$0], _$[$0-7].first_line, _$[$0-7].first_column)], 
                    _$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 52:

            this.$ = new If($$[$0-5], 
                [new Retorno($$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column)], 
                [$$[$0]], 
                _$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 53:

            this.$.push($$[$0]);
        
break;
case 54:
 
            this.$ = [$$[$0]]
        
break;
case 55:

            this.$ = new Print(new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column), _$[$0-5].first_line, _$[$0-5].first_column)
        
break;
case 56:
 
            this.$.push($$[$0]); 
        
break;
case 58: case 86:

            this.$.push($$[$0])
        
break;
case 60:

            this.$ = new Declaracion(new Tipo(tipos.VARIABLE), $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 61:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];  
break;
case 62:
this.$ = $$[$0]
break;
case 63:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 64:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 65:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 66:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 67:

            this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 68:

            this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 69:

            this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 70:

            this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 71:

            this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 72:

            this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 73:

            this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 74:

            this.$ = new Logico($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 75:

            this.$ = new Logico($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 76: case 77:

            this.$ = new Primitivo(new Tipo(esEntero(Number($$[$0]))), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
        
break;
case 78:

            this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 79: case 80:

            this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 81:

            this.$ = $$[$0-1]
        
break;
case 82:

            this.$ = new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 83:
 this.$ = $$[$0]
break;
case 84:
this.$ = []
break;
case 85:

            console.log($$[$0])
            let analizador = new AnalizadorASCXML();
            let buscador = new xpathBusqueda();
            let ejecu = new EjecucionXpath($$[$0], "");

            let ret = analizador.ejecutarCodigo(localStorage.getItem("xml"));
            let tabla = ret.objetos;
            let query = ejecu.ejecutarArbol();

            if(query[0] !== "/" && query[0] !== "//"){
                buscador.getNodesByFilters("1", query, tabla)
            }else{
                buscador.getNodesByFilters("2", query, tabla)
            }

            let retorno = buscador.returnListObjects()
            let valor = retorno[0].texto;
            let tipoR;

            if (valor.match(/^[0-9]+$/)){
                tipoR = new Tipo(esEntero(valor))
                valor = parseInt(valor)
            }else if (valor.match(/^[0-9]+[.][0-9]+$/)){
                tipoR = new Tipo(esEntero(valor))
                valor = parseInt(valor)
            }else{
                tipoR = new Tipo(tipos.STRING)
            }

            this.$ = new Primitivo(tipoR, valor, _$[$0].first_line, _$[$0].first_column);
        
break;
case 88:

            this.$ = new NodoX("", ".", [new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]])]);
        
break;
case 89: case 92:

            this.$ = new NodoX("", $$[$0-1], [...$$[$0]]);
        
break;
case 90:

            this.$ = new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]]);
        
break;
case 91:

            this.$ = new NodoX("//", $$[$0-1].val, [...$$[$0]]);
        
break;
case 93:

            this.$ = new NodoX("", "node()", [...$$[$0]]);
        
break;
case 94:

            $$[$0-1] = $$[$0-1].substring(1, $$[$0-1].length)
            this.$ = new NodoX("", $$[$0-1], [...$$[$0]]);
        
break;
case 96:

            this.$ = "//"
        
break;
case 98:

            this.$ = new Array();
            this.$.push(new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]])); 
        
break;
case 99:

            this.$ = [];
        
break;
case 100: case 101:

            this.$ = {val: $$[$0], pre: null};
        
break;
case 102:

            this.$ = {val: "node()", pre: null}
        
break;
case 103:

            this.$ = {val: $$[$0-1] + "" + $$[$0], pre: null};
        
break;
case 104:

            $$[$0] = $$[$0].substring(1, $$[$0].length)
            this.$ = {val: $$[$0], pre: null}
        
break;
case 105:

            this.$ = {val: $$[$0], pre: null}; 
        
break;
case 106:

            this.$ = {val: "..", pre: null}; 
        
break;
case 107:

            this.$ = $$[$0]; 
        
break;
case 108: case 109:

            this.$ = $$[$0];
        
break;
case 110:

            this.$ = "node()"
        
break;
case 111:

            $$[$0] = $$[$0].substring(1, $$[$0].length)
            this.$ = $$[$0]
        
break;
}
},
table: [{3:1,4:2,6:5,7:$V0,26:$V1,32:3,33:4,34:6,35:7,36:8,37:9,52:$V2,59:$V3,65:$V4,70:$V5},{1:[3]},{5:[1,16],6:5,7:$V0,26:$V1,32:17,33:4,34:6,35:7,36:8,37:9,52:$V2,59:$V3,65:$V4,70:$V5},o($V6,[2,15]),o($V6,[2,16]),o($V6,[2,17]),o($V6,[2,18]),o($V6,[2,19]),o($V6,[2,20]),o($V6,[2,21]),{25:[1,19],71:18},{8:[1,20]},{12:[1,21]},{11:$V7,12:$V8,25:$V9,26:$Va,48:22,84:$Vb,85:$Vc,86:$Vd},{10:[1,30]},{11:$V7,12:$V8,25:$V9,26:$Va,48:31,84:$Vb,85:$Vc,86:$Vd},{1:[2,1]},o($V6,[2,14]),{23:[1,33],72:[1,32]},o($Ve,[2,62]),{9:34,26:[1,35]},{11:$V7,12:$V8,25:$V9,26:$Va,48:36,84:$Vb,85:$Vc,86:$Vd},o($V6,[2,37],{54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr}),o($Vs,[2,76]),o($Vs,[2,77]),o($Vs,[2,78]),o($Vs,[2,79]),o($Vs,[2,80]),{11:$V7,12:$V8,25:$V9,26:$Va,48:50,84:$Vb,85:$Vc,86:$Vd},{10:[1,51]},{11:[1,52]},o($V6,[2,45],{54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr}),{11:$V7,12:$V8,25:$V9,26:$Va,48:53,84:$Vb,85:$Vc,86:$Vd},{25:[1,54]},{10:[1,55]},{10:[2,8]},{14:[1,56],54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr},{11:$V7,12:$V8,25:$V9,26:$Va,48:57,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:58,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:59,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:60,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:61,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:62,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:63,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:64,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:65,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:66,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:67,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:68,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:69,84:$Vb,85:$Vc,86:$Vd},{14:[1,70],54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr},{11:[1,71]},{12:[1,72]},o($V6,[2,60],{54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr}),o($Ve,[2,61]),{11:[1,73]},{66:[1,74]},o($Vs,[2,63]),o($Vs,[2,64]),o($Vt,[2,65],{73:$Vh,74:$Vi}),o([5,7,14,20,23,26,52,59,65,67,70,76],[2,66],{54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr}),o($Vt,[2,67],{73:$Vh,74:$Vi}),o($Vu,[2,68],{73:$Vh,74:$Vi,75:$Vj,77:$Vl}),o($Vu,[2,69],{73:$Vh,74:$Vi,75:$Vj,77:$Vl}),o($Vu,[2,70],{73:$Vh,74:$Vi,75:$Vj,77:$Vl}),o($Vu,[2,71],{73:$Vh,74:$Vi,75:$Vj,77:$Vl}),o($Vv,[2,72],{73:$Vh,74:$Vi,75:$Vj,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),o($Vv,[2,73],{73:$Vh,74:$Vi,75:$Vj,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),o([5,7,14,20,23,26,52,59,65,67,70,76,83],[2,74],{54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq}),o([5,7,14,20,23,26,52,54,59,65,67,70,76,83],[2,75],{62:$Vg,73:$Vh,74:$Vi,75:$Vj,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq}),o($Vs,[2,81]),{12:[1,75]},{11:$Vw,25:$Vx,49:77,68:76,77:$Vy,88:78,90:79,91:$Vz,95:$VA,97:$VB},{12:[1,86]},{11:$V7,12:$V8,25:$V9,26:$Va,48:87,84:$Vb,85:$Vc,86:$Vd},{11:$V7,12:$V8,25:$V9,26:$Va,48:89,69:88,84:$Vb,85:$Vc,86:$Vd},{14:[1,90],23:[1,91]},o($VC,[2,57]),o($VC,[2,85],{89:[1,92]}),o($VD,[2,87]),{2:$VE,92:93,95:$VF},o($VD,$VG,{94:96,92:97,2:$VE,95:$VF}),{11:$VH,25:$VI,77:$VJ,91:$VK,93:101,95:[1,99],96:98,97:$VL,98:$VM},o($VD,$VG,{92:97,94:107,2:$VE,95:$VF}),{12:[1,108]},o($VD,$VG,{92:97,94:109,2:$VE,95:$VF}),{13:110,24:111,25:$VN},o($V6,[2,50],{54:$Vf,62:$Vg,67:[1,113],73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr}),{14:[1,114],23:[1,115]},o($VC,[2,59],{54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr}),o($V6,[2,55]),{11:$Vw,25:$Vx,49:116,77:$Vy,88:78,90:79,91:$Vz,95:$VA,97:$VB},{11:$Vw,25:$Vx,77:$Vy,90:117,91:$Vz,95:$VA,97:$VB},{11:$VH,25:$VI,77:$VJ,93:118,97:$VL,98:$VM},o($VO,[2,95],{95:[1,119]}),{95:[1,120]},o($VD,[2,89]),{11:$VH,25:$VI,77:$VJ,91:$VK,93:101,96:121,97:$VL,98:$VM},o($VD,$VG,{92:97,94:122,2:$VE,95:$VF}),{11:$VH,25:$VI,77:$VJ,91:$VK,93:101,96:123,97:$VL,98:$VM},o($VP,[2,105],{91:[1,124]}),o($VP,[2,107]),o($VP,[2,100]),o($VP,[2,101]),{12:[1,125]},{11:[1,128],25:[1,130],77:[1,127],97:[1,129],99:126},o($VP,[2,104]),o($VD,[2,92]),{14:[1,131]},o($VD,[2,94]),{14:[1,132],23:[1,133]},o($VC,[2,6]),{15:[1,134]},{11:$V7,12:$V8,25:$V9,26:$Va,34:136,48:135,65:$V4,84:$Vb,85:$Vc,86:$Vd},o($Vs,[2,82]),{11:$V7,12:$V8,25:$V9,26:$Va,48:137,84:$Vb,85:$Vc,86:$Vd},o($VC,[2,56]),o($VD,[2,86]),o($VD,$VG,{92:97,94:138,2:$VE,95:$VF}),o($VO,[2,96]),o($VO,[2,97]),o($VD,$VG,{92:97,94:139,2:$VE,95:$VF}),o($VD,[2,90]),o($VD,$VG,{92:97,94:140,2:$VE,95:$VF}),o($VP,[2,106]),{14:[1,141]},o($VP,[2,103]),o($VP,[2,108]),o($VP,[2,109]),{12:[1,142]},o($VP,[2,111]),o($VD,$VG,{92:97,94:143,2:$VE,95:$VF}),{15:[1,144]},{24:145,25:$VN},{16:[1,146]},o($V6,[2,51],{54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr}),o($V6,[2,52]),o($VC,[2,58],{54:$Vf,62:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq,83:$Vr}),o($VD,[2,88]),o($VD,[2,98]),o($VD,[2,91]),o($VP,[2,102]),{100:[1,147]},o($VD,[2,93]),{16:[1,148]},o($VC,[2,5]),{10:[1,149]},o($VP,[2,110]),{10:[1,150]},{17:151,27:$VQ,28:$VR,29:$VS,30:$VT,31:$VU},{17:157,27:$VQ,28:$VR,29:$VS,30:$VT,31:$VU},o($VC,$VV,{18:158,22:$VW}),o($VX,[2,9]),o($VX,[2,10]),o($VX,[2,11]),o($VX,[2,12]),o($VX,[2,13]),{18:160,19:$VV,22:$VW},o($VC,[2,7]),o([14,19,23],[2,3]),{19:[1,161]},{4:162,6:5,7:$V0,26:$V1,32:3,33:4,34:6,35:7,36:8,37:9,52:$V2,59:$V3,65:$V4,70:$V5},{6:5,7:$V0,20:[1,163],26:$V1,32:17,33:4,34:6,35:7,36:8,37:9,52:$V2,59:$V3,65:$V4,70:$V5},{21:[1,164]},o($V6,[2,2])],
defaultActions: {16:[2,1],35:[2,8]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Tree } = require('./Simbolos/Tree');
    const { Tipo, tipos, esEntero } = require('./Varios/Tipo');
    const { Primitivo }  = require('./Expresiones/Primitivo');
    const { Error } = require('./Varios/Error');
    const { Identificador } = require('./Expresiones/identificador');
    //const {Vector} = require('../Expresiones/Vector');
    //const {Lista} = require('../Expresiones/Lista');
    //Instrucciones
    const {Print} = require('./Instrucciones/Print');
    const {Declaracion} = require('./Instrucciones/Declaracion');
  // // const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');
    //const {DeclaracionLista} = require('../Instrucciones/DeclaracionLista');
    //const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {AsignacionVector} = require('../Instrucciones/AsignacionVector');
   // const {AsignacionLista} = require('../Instrucciones/AsignacionLista');
    /*const {AddLista} = require('../Instrucciones/AddLista');
    
    const {Switch} = require('../Instrucciones/Switch');
    const {Case} = require('../Instrucciones/Case');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');
    const {LlamadaMetodo} = require('../Instrucciones/LlamadaMetodo');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Retorno} = require('../Instrucciones/Retorno');
    *///Expresion
    const { DeclaracionMetodo } = require('./Instrucciones/DeclaracionMetodo');
    const { LlamadaMetodo } = require('./Instrucciones/LlamadaMetodo');
    const { If } = require('./Instrucciones/If');
    const { Retorno } = require('./Instrucciones/Retorno');
    const { Aritmetica } = require('./Expresiones/Aritmetica');
    const { Relacional } = require('./Expresiones/Relacional');
    const { Logico } = require('./Expresiones/Logico');
    const { NodoX } = require('./Expresiones/NodoX');
    const { EjecucionXpath } = require('./Arbol/Ejecucion');
    /*const {Logico} = require('../Expresiones/Logico');
    const {Ternario} = require('../Expresiones/Ternario');
    const {Casteo} = require('../Expresiones/Casteo');
    const {InDecrement} = require('../Expresiones/InDecrement');
    const {Length} = require('../Expresiones/Length');
    const {ToLower} = require('../Expresiones/ToLower');
    const {ToUpper} = require('../Expresiones/ToUpper');
    const {Truncate} = require('../Expresiones/Truncate');
    const {Round} = require('../Expresiones/Round');
    const {TypeOf} = require('../Expresiones/TypeOf');
    const {ToString} = require('../Expresiones/ToString');
    const {ToCharArray} = require('../Expresiones/ToCharArray');*/
    const { AnalizadorASCXML } = require('../analizadorXML/index');
    const { xpathBusqueda } = require('../analizadorXML/Instrucciones/Busqueda/xpathBusqueda');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return "tk_decimal";
break;
case 6:return "tk_entero";
break;
case 7:return "tk_node";
break;
case 8:return "tk_child";
break;
case 9:return "tk_let";
break;
case 10:return "tk_descendant";
break;
case 11:return "tk_descendatOr"
break;
case 12:return "tk_ancestor";
break;
case 13:return "tk_ancestorOr";
break;
case 14:return "tk_attribute";
break;
case 15:return "tk_following";
break;
case 16:return "tk_followingSi"
break;
case 17:return "tk_parent"
break;
case 18:return "tk_preceding"
break;
case 19:return "tk_precedingSi"
break;
case 20:return "tk_self"
break;
case 21:return "tk_text"
break;
case 22:return "tk_position"
break;
case 23:return "tk_last"
break;
case 24:return "tk_div"
break;
case 25:return "tk_and"
break;
case 26:return "tk_or"
break;
case 27:return "tk_mod"
break;
case 28:return "tk_for";
break;
case 29: return "tk_in";
break;
case 30: return "tk_where";
break;
case 31: return "tk_order";
break;
case 32: return "tk_by";
break;
case 33: return "tk_return";
break;
case 34:return "tk_if";
break;
case 35:return "tk_else";
break;
case 36:return "tk_then";
break;
case 37:return "tk_int";
break;
case 38:return "tk_integer";
break;
case 39:return "tk_string";
break;
case 40:return "tk_DECIMAL";
break;
case 41:return "tk_double";
break;
case 42:return "tk_declare";
break;
case 43:return "tk_function";
break;
case 44:return "tk_AS"
break;
case 45:return "tk_as"
break;
case 46:return "tk_xs"
break;
case 47:return "tk_to"
break;
case 48:return "tk_at"
break;
case 49:return "tk_local";
break;
case 50: return "tk_mayor"
break;
case 51: return "tk_menor"
break;
case 52:return "tk_igual"
break;
case 53:return "tk_distinto"
break;
case 54:return "tk_menorIgual"
break;
case 55:return "tk_mayorIgual"
break;
case 56:return "tk_barra"
break;
case 57:return "tk_punto"
break;
case 58:return "tk_punto_coma"
break;
case 59:return "tk_coma"
break;
case 60:return "tk_diagonal"
break;
case 61:return "tk_asterisco"
break;
case 62:return "tk_Interroga"
break;
case 63:return "tk_mas"
break;
case 64:return "tk_menos"
break;
case 65:return "tk_menorIgual"
break;
case 66:return "tk_mayorIgual"
break;
case 67:return "tk_menor"
break;
case 68:return "tk_mayor"
break;
case 69:return "tk_distinto"
break;
case 70:return "tk_igualXQUERY"
break;
case 71:return "tk_dosPuntos"
break;
case 72:return "tk_igual"
break;
case 73:return "tk_llaveA"
break;
case 74:return "tk_llaveC"
break;
case 75:return "tk_arroba"
break;
case 76:return "llaveA"
break;
case 77:return "llaveC"
break;
case 78:return "tk_parA"
break;
case 79:return "tk_parC"
break;
case 80:return "tk_stringTexto";
break;
case 81:return "tk_stringTexto";
break;
case 82:return "tk_stringTexto";
break;
case 83:return "tk_stringTexto";
break;
case 84:return "tk_identificador";
break;
case 85:return "tk_identificadorXQUERY";
console.log("indentificador papa")

break;
case 86:return "EOF";
break;
case 87:
break;
case 88:         
    console.log('Léxico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column );

break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\(:)/,/^(?::\))/,/^(?:.)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:node\b)/,/^(?:child\b)/,/^(?:let\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:int\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:double\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:AS\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:local\b)/,/^(?:gt\b)/,/^(?:lt\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:le\b)/,/^(?:ge\b)/,/^(?:\|)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\/)/,/^(?:\*)/,/^(?:\?)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:@)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:“[^\“]*“)/,/^(?:'[^\']*')/,/^(?:‘[^\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:[$]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \t\r\n\f])/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXquery;
exports.Parser = GramaticaXquery.Parser;
exports.parse = function () { return GramaticaXquery.parse.apply(GramaticaXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}