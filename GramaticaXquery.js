/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,15],$V2=[1,6],$V3=[1,10],$V4=[1,14],$V5=[1,13],$V6=[1,11],$V7=[5,7,20,26,34,38,41,51,59],$V8=[5,7,20,26,34,38,41,51,56,59],$V9=[1,32],$Va=[1,37],$Vb=[1,36],$Vc=[1,35],$Vd=[1,30],$Ve=[1,29],$Vf=[1,31],$Vg=[1,33],$Vh=[1,34],$Vi=[1,46],$Vj=[1,57],$Vk=[1,60],$Vl=[1,54],$Vm=[1,52],$Vn=[1,53],$Vo=[1,55],$Vp=[1,56],$Vq=[1,58],$Vr=[1,59],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[5,7,14,20,26,34,38,41,51,56,59,65,66,84,104,105,106,107,108,109,110,111,112,113,114,115,116],$Vz=[1,69],$VA=[1,68],$VB=[1,70],$VC=[1,79],$VD=[1,80],$VE=[1,78],$VF=[1,81],$VG=[1,82],$VH=[5,7,20,26,34,38,41,51,56,59,65],$VI=[1,85],$VJ=[2,5,7,14,20,26,34,38,41,46,47,50,51,56,59,65,66,68,76,84,104,105,106,107,108,109,110,111,112,113,114,115,116],$VK=[47,50],$VL=[5,7,20,26,34,38,41,46,47,50,51,56,59],$VM=[5,7,20,26,34,38,41,46,47,50,51,56,59,76],$VN=[1,114],$VO=[1,113],$VP=[2,5,7,20,26,34,38,41,46,47,50,51,56,59,68,76],$VQ=[2,95],$VR=[1,116],$VS=[1,121],$VT=[1,119],$VU=[1,122],$VV=[1,123],$VW=[1,124],$VX=[1,126],$VY=[1,127],$VZ=[1,128],$V_=[1,129],$V$=[1,130],$V01=[1,131],$V11=[1,132],$V21=[1,133],$V31=[1,134],$V41=[1,135],$V51=[1,136],$V61=[1,137],$V71=[5,7,14,20,26,34,38,41,51,56,59,65,66,84,104,107,108,109,110,111,112,113,114,115,116],$V81=[5,7,14,20,26,34,38,41,51,56,59,65,66,104,108,109,110,111,112,113,114,115,116],$V91=[5,7,14,20,26,34,38,41,51,56,59,104,108,113,114,115,116],$Va1=[11,78,84,85,86,89,91,92,93,94,95,96,97,98,99,100,101],$Vb1=[2,69],$Vc1=[1,181],$Vd1=[1,183],$Ve1=[1,180],$Vf1=[1,182],$Vg1=[1,184],$Vh1=[1,185],$Vi1=[1,189],$Vj1=[11,19,65,71,72,73,74],$Vk1=[14,23],$Vl1=[1,229],$Vm1=[1,227],$Vn1=[1,228],$Vo1=[1,230],$Vp1=[1,266],$Vq1=[1,267],$Vr1=[1,268],$Vs1=[1,269],$Vt1=[1,270],$Vu1=[2,4],$Vv1=[1,274],$Vw1=[14,19,22,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO_XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FUNCION":6,"tk_declare":7,"tk_function":8,"MENU_LOCAL":9,"tk_dosPuntos":10,"tk_identificador":11,"tk_parA":12,"LISTA_DECLARACION_FUNCION":13,"tk_parC":14,"tk_as":15,"tk_xs":16,"TIPO_DATO":17,"MENU_INTERROGA":18,"llaveA":19,"llaveC":20,"tk_punto_coma":21,"tk_Interroga":22,"tk_coma":23,"DECLARACION_FUNCION":24,"tk_identificadorXQUERY":25,"tk_local":26,"tk_int":27,"tk_string":28,"tk_double":29,"tk_DECIMAL":30,"tk_integer":31,"INSTRUCCION":32,"DECLARACION_GLOBAL":33,"ComentarioM":34,"IF":35,"FOR":36,"LLAMADA_FUNCION":37,"ST":38,"XPATH":39,"INICIO_XPATH":40,"tk_for":41,"tk_in":42,"WHERE":43,"ORDER":44,"RETURN_CICLO":45,"tk_where":46,"tk_order":47,"tk_by":48,"TK":49,"tk_return":50,"tk_if":51,"CONDICION":52,"tk_then":53,"valor_if":54,"ELSE":55,"tk_else":56,"EXPRESION":57,"EXPRESIONQUERY":58,"tk_let":59,"tk_igualXQUERY":60,"LISTA_ID":61,"START_XML":62,"RAICES":63,"OBJETO":64,"tk_menor":65,"tk_mayor":66,"OBJETOS":67,"tk_diagonal":68,"LISTA_ID_OBJETO":69,"Listavalor":70,"tk_stringTexto":71,"tk_decimal":72,"tk_entero":73,"valor":74,"INICIO":75,"tk_barra":76,"INICIALES":77,"tk_punto":78,"DIAGONALES":79,"DERIVADOSLIMITADO":80,"DERIVACIONDIAGONAL":81,"PREDICATE":82,"DERIVADOS":83,"tk_asterisco":84,"tk_node":85,"tk_arroba":86,"ATRIBUTO":87,"AXES":88,"tk_child":89,"NODETEST":90,"tk_descendant":91,"tk_descendatOr":92,"tk_ancestor":93,"tk_ancestorOr":94,"tk_attribute":95,"tk_following":96,"tk_followingSi":97,"tk_parent":98,"tk_preceding":99,"tk_precedingSi":100,"tk_self":101,"tk_text":102,"tk_llaveA":103,"tk_llaveC":104,"tk_mas":105,"tk_menos":106,"tk_div":107,"tk_mod":108,"tk_lt":109,"tk_gt":110,"tk_menorIgual":111,"tk_mayorIgual":112,"tk_igual":113,"tk_distinto":114,"tk_or":115,"tk_and":116,"tk_position":117,"tk_last":118,"tk_ParC":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_declare",8:"tk_function",10:"tk_dosPuntos",11:"tk_identificador",12:"tk_parA",14:"tk_parC",15:"tk_as",16:"tk_xs",19:"llaveA",20:"llaveC",21:"tk_punto_coma",22:"tk_Interroga",23:"tk_coma",25:"tk_identificadorXQUERY",26:"tk_local",27:"tk_int",28:"tk_string",29:"tk_double",30:"tk_DECIMAL",31:"tk_integer",34:"ComentarioM",38:"ST",41:"tk_for",42:"tk_in",46:"tk_where",47:"tk_order",48:"tk_by",49:"TK",50:"tk_return",51:"tk_if",53:"tk_then",56:"tk_else",59:"tk_let",60:"tk_igualXQUERY",65:"tk_menor",66:"tk_mayor",68:"tk_diagonal",71:"tk_stringTexto",72:"tk_decimal",73:"tk_entero",74:"valor",76:"tk_barra",78:"tk_punto",84:"tk_asterisco",85:"tk_node",86:"tk_arroba",89:"tk_child",91:"tk_descendant",92:"tk_descendatOr",93:"tk_ancestor",94:"tk_ancestorOr",95:"tk_attribute",96:"tk_following",97:"tk_followingSi",98:"tk_parent",99:"tk_preceding",100:"tk_precedingSi",101:"tk_self",102:"tk_text",103:"tk_llaveA",104:"tk_llaveC",105:"tk_mas",106:"tk_menos",107:"tk_div",108:"tk_mod",109:"tk_lt",110:"tk_gt",111:"tk_menorIgual",112:"tk_mayorIgual",113:"tk_igual",114:"tk_distinto",115:"tk_or",116:"tk_and",117:"tk_position",118:"tk_last",119:"tk_ParC"},
productions_: [0,[3,2],[6,17],[18,1],[18,0],[13,3],[13,1],[24,6],[9,1],[17,1],[17,1],[17,1],[17,1],[17,1],[4,2],[4,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[39,1],[36,7],[43,3],[43,0],[44,5],[44,0],[45,3],[35,5],[55,4],[55,0],[54,1],[54,1],[37,4],[52,3],[33,4],[61,3],[61,1],[62,1],[63,2],[63,1],[64,8],[64,8],[64,4],[69,2],[69,1],[67,2],[67,1],[70,1],[70,1],[70,1],[70,3],[70,1],[70,1],[40,1],[75,3],[75,1],[77,4],[77,3],[77,3],[77,4],[77,3],[77,5],[79,1],[79,2],[79,2],[81,3],[81,0],[80,2],[80,2],[80,4],[80,2],[80,1],[83,1],[83,2],[83,1],[88,4],[88,4],[88,4],[88,4],[88,4],[88,4],[88,4],[88,4],[88,4],[88,4],[88,4],[88,4],[90,2],[90,4],[90,2],[90,3],[82,3],[82,0],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,1],[57,1],[57,2],[57,1],[57,3],[57,3],[57,1],[57,1],[57,3],[58,1],[58,1],[58,1],[87,1],[87,1],[87,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 37:
console.log($$[$0-2]+"--val"+$$[$0]) 
break;
case 44:
console.log($$[$0-1])
break;
case 46:
 this.$ = $$[$0-1] + "" + $$[$0]; 
break;
case 47:
 this.$ = $$[$0]; 
break;
case 50: case 51: case 52:
this.$=$$[$0]
break;
}
},
table: [{3:1,4:2,6:5,7:$V0,26:$V1,32:3,33:4,34:$V2,35:7,36:8,37:9,38:$V3,41:$V4,51:$V5,59:$V6},{1:[3]},{5:[1,16],6:5,7:$V0,26:$V1,32:17,33:4,34:$V2,35:7,36:8,37:9,38:$V3,41:$V4,51:$V5,59:$V6},o($V7,[2,15]),o($V8,[2,16]),o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),o($V8,[2,20]),o($V8,[2,21]),o($V8,[2,22]),{25:[1,18]},{8:[1,19]},{12:[1,21],52:20},{25:[1,22]},{10:[1,23]},{1:[2,1]},o($V7,[2,14]),{60:[1,24]},{9:25,26:[1,26]},{53:[1,27]},{11:$V9,12:$Va,25:$Vb,57:28,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{42:[1,38]},{11:[1,39]},{11:$V9,12:$Va,25:$Vb,26:$V1,37:42,57:41,58:40,62:43,63:44,64:45,65:$Vi,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{10:[1,47]},{10:[2,8]},{6:5,7:$V0,11:$V9,12:$Va,25:$Vb,26:$V1,32:50,33:4,34:$V2,35:7,36:8,37:9,38:$V3,41:$V4,51:$V5,54:48,57:49,59:$V6,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{14:[1,51],65:$Vj,66:$Vk,84:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},o($Vy,[2,111]),o($Vy,[2,112]),{11:$Vz,84:$VA,85:$VB,87:67},o($Vy,[2,114]),{12:[1,71]},{12:[1,72]},o($Vy,[2,117]),o($Vy,[2,118]),{11:$V9,12:$Va,25:$Vb,57:73,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$VC,39:74,40:75,68:$VD,75:76,77:77,78:$VE,84:$VF,85:$VG},{11:$V9,12:$Va,25:$Vb,26:$V1,37:42,57:41,58:83,62:43,63:44,64:45,65:$Vi,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},o($V8,[2,37]),o($V8,[2,120],{65:$Vj,66:$Vk,84:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx}),o($V8,[2,121]),o($V8,[2,122]),o($V8,[2,40],{64:84,65:$Vi}),o($VH,[2,42]),{11:$VI,68:[1,86]},{11:[1,87]},o($V7,[2,32],{55:88,56:[1,89]}),o($V8,[2,33],{65:$Vj,66:$Vk,84:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx}),o($V8,[2,34]),{53:[2,36]},{11:$V9,12:$Va,25:$Vb,57:90,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:91,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:92,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:93,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:94,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:95,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:96,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:97,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:98,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:99,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:100,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:101,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:102,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:103,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},{11:$V9,12:$Va,25:$Vb,57:104,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},o($Vy,[2,113]),o($VJ,[2,123]),o($VJ,[2,124]),{12:[1,105]},{14:[1,106]},{14:[1,107]},{14:[1,108],65:$Vj,66:$Vk,84:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},o($VK,[2,26],{43:109,46:[1,110]}),o($VL,[2,23]),o($VL,[2,56],{76:[1,111]}),o($VM,[2,58]),{2:$VN,68:$VO,79:112},o($VP,$VQ,{82:115,103:$VR}),{11:$VS,68:[1,118],78:$VT,80:120,83:117,84:$VU,85:$VV,86:$VW,88:125,89:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:$V11,97:$V21,98:$V31,99:$V41,100:$V51,101:$V61},o($VP,$VQ,{82:138,103:$VR}),{12:[1,139]},o($V8,[2,35]),o($VH,[2,41]),{66:[1,140]},{11:[1,141]},{12:[1,142]},o($V8,[2,30]),{35:143,51:$V5},o($Vy,[2,96]),o($Vy,[2,97]),o($V71,[2,98],{105:$Vm,106:$Vn}),o($V71,[2,99],{105:$Vm,106:$Vn}),o([5,7,14,20,26,34,38,41,51,56,59,104,108],[2,100],{65:$Vj,66:$Vk,84:$Vl,105:$Vm,106:$Vn,107:$Vo,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx}),o($V81,[2,101],{84:$Vl,105:$Vm,106:$Vn,107:$Vo}),o($V81,[2,102],{84:$Vl,105:$Vm,106:$Vn,107:$Vo}),o($V81,[2,103],{84:$Vl,105:$Vm,106:$Vn,107:$Vo}),o($V81,[2,104],{84:$Vl,105:$Vm,106:$Vn,107:$Vo}),o($V81,[2,105],{84:$Vl,105:$Vm,106:$Vn,107:$Vo}),o($V81,[2,106],{84:$Vl,105:$Vm,106:$Vn,107:$Vo}),o($V91,[2,107],{65:$Vj,66:$Vk,84:$Vl,105:$Vm,106:$Vn,107:$Vo,109:$Vq,110:$Vr,111:$Vs,112:$Vt}),o($V91,[2,108],{65:$Vj,66:$Vk,84:$Vl,105:$Vm,106:$Vn,107:$Vo,109:$Vq,110:$Vr,111:$Vs,112:$Vt}),o([5,7,14,20,26,34,38,41,51,56,59,104,108,115],[2,109],{65:$Vj,66:$Vk,84:$Vl,105:$Vm,106:$Vn,107:$Vo,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,116:$Vx}),o([5,7,14,20,26,34,38,41,51,56,59,104,108,115,116],[2,110],{65:$Vj,66:$Vk,84:$Vl,105:$Vm,106:$Vn,107:$Vo,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv}),{119:[1,144]},o($Vy,[2,115]),o($Vy,[2,116]),o($Vy,[2,119]),{44:145,47:[1,146],50:[2,28]},{25:[1,147]},{11:$VC,68:$VD,77:148,78:$VE,84:$VF,85:$VG},{11:$VS,80:149,84:$VU,85:$VV,86:$VW,88:125,89:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:$V11,97:$V21,98:$V31,99:$V41,100:$V51,101:$V61},o($Va1,[2,65],{68:[1,150]}),{68:[1,151]},o($VM,$Vb1,{81:152,79:153,2:$VN,68:$VO}),{11:$V9,12:$Va,25:$Vb,57:154,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},o($VM,$Vb1,{79:153,81:155,2:$VN,68:$VO}),{11:$VS,78:$VT,80:120,83:156,84:$VU,85:$VV,86:$VW,88:125,89:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:$V11,97:$V21,98:$V31,99:$V41,100:$V51,101:$V61},o($VP,[2,75],{78:[1,157]}),o($VP,[2,77]),o($VP,$VQ,{82:158,103:$VR}),o($VP,$VQ,{82:159,103:$VR}),{12:[1,160]},{11:$Vz,84:$VA,85:$VB,87:161},o($VP,[2,74]),{10:[1,162]},{10:[1,163]},{10:[1,164]},{10:[1,165]},{10:[1,166]},{10:[1,167]},{10:[1,168]},{10:[1,169]},{10:[1,170]},{10:[1,171]},{10:[1,172]},{10:[1,173]},o($VM,$Vb1,{79:153,81:174,2:$VN,68:$VO}),{14:[1,175]},{11:$Vc1,19:$Vd1,64:178,65:$Vi,67:176,69:177,70:179,71:$Ve1,72:$Vf1,73:$Vg1,74:$Vh1},{66:[1,186]},{13:187,24:188,25:$Vi1},{56:[1,190]},o($VJ,[2,125]),{45:191,50:[1,192]},{48:[1,193]},{11:$VC,39:194,40:75,68:$VD,75:76,77:77,78:$VE,84:$VF,85:$VG},o($VM,[2,57]),o($VM,$Vb1,{79:153,81:195,2:$VN,68:$VO}),o($Va1,[2,66]),o($Va1,[2,67]),o($VM,[2,60]),{11:$VS,78:$VT,80:120,83:196,84:$VU,85:$VV,86:$VW,88:125,89:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:$V11,97:$V21,98:$V31,99:$V41,100:$V51,101:$V61},{65:$Vj,66:$Vk,84:$Vl,104:[1,197],105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,114:$Vv,115:$Vw,116:$Vx},o($VM,[2,61]),o($VM,$Vb1,{79:153,81:198,2:$VN,68:$VO}),o($VP,[2,76]),o($VP,[2,70]),o($VP,[2,71]),{14:[1,199]},o($VP,[2,73]),{10:[1,200]},{10:[1,201]},{10:[1,202]},{10:[1,203]},{10:[1,204]},{10:[1,205]},{10:[1,206]},{10:[1,207]},{10:[1,208]},{10:[1,209]},{10:[1,210]},{10:[1,211]},o($VM,[2,63]),o($VP,$VQ,{82:212,103:$VR}),{64:214,65:[1,213]},{11:$Vc1,19:$Vd1,65:[1,215],70:216,71:$Ve1,72:$Vf1,73:$Vg1,74:$Vh1},{65:[2,49]},o($Vj1,[2,47]),o($Vj1,[2,50]),o($Vj1,[2,51]),o($Vj1,[2,52]),{4:217,6:5,7:$V0,26:$V1,32:3,33:4,34:$V2,35:7,36:8,37:9,38:$V3,41:$V4,51:$V5,59:$V6},o($Vj1,[2,54]),o($Vj1,[2,55]),o($VH,[2,45]),{14:[1,218],23:[1,219]},o($Vk1,[2,6]),{15:[1,220]},{6:5,7:$V0,11:$V9,12:$Va,25:$Vb,26:$V1,32:50,33:4,34:$V2,35:7,36:8,37:9,38:$V3,41:$V4,51:$V5,54:221,57:49,59:$V6,71:$Vc,72:$Vd,73:$Ve,86:$Vf,117:$Vg,118:$Vh},o($V8,[2,24]),{25:[1,222]},{49:[1,223]},o($VK,[2,25]),o($VM,[2,59]),o($VM,$Vb1,{79:153,81:224,2:$VN,68:$VO}),o($VP,[2,94]),o($VM,[2,62]),o($VP,$VQ,{82:225,103:$VR}),{11:$Vl1,84:$Vm1,85:$Vn1,90:226,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:231,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:232,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:233,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:234,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:235,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:236,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:237,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:238,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:239,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:240,102:$Vo1},{11:$Vl1,84:$Vm1,85:$Vn1,90:241,102:$Vo1},o($VM,$Vb1,{79:153,81:242,2:$VN,68:$VO}),{11:$VI,68:[1,243]},{65:[2,48]},{68:[1,244]},o($Vj1,[2,46]),{6:5,7:$V0,20:[1,245],26:$V1,32:17,33:4,34:$V2,35:7,36:8,37:9,38:$V3,41:$V4,51:$V5,59:$V6},{15:[1,246]},{24:247,25:$Vi1},{16:[1,248]},o($V8,[2,31]),{11:$VC,39:249,40:75,68:$VD,75:76,77:77,78:$VE,84:$VF,85:$VG},{25:[1,250]},o($VM,[2,68]),o($VP,[2,72]),o($VP,[2,78]),o($VP,$VQ,{82:251,103:$VR}),{12:[1,252]},o($VP,$VQ,{82:253,103:$VR}),{12:[1,254]},o($VP,[2,79]),o($VP,[2,80]),o($VP,[2,81]),o($VP,[2,82]),o($VP,[2,83]),o($VP,[2,84]),o($VP,[2,85]),o($VP,[2,86]),o($VP,[2,87]),o($VP,[2,88]),o($VP,[2,89]),o($VM,[2,64]),{11:[1,255]},{11:[1,256]},o($Vj1,[2,53]),{16:[1,257]},o($Vk1,[2,5]),{10:[1,258]},o($V8,[2,29]),{11:$VC,39:259,40:75,68:$VD,75:76,77:77,78:$VE,84:$VF,85:$VG},o($VP,[2,90]),{14:[1,260]},o($VP,[2,92]),{14:[1,261]},{66:[1,262]},{66:[1,263]},{10:[1,264]},{17:265,27:$Vp1,28:$Vq1,29:$Vr1,30:$Vs1,31:$Vt1},{50:[2,27]},o($VP,$VQ,{82:271,103:$VR}),o($VP,[2,93]),o($VH,[2,43]),o($VH,[2,44]),{17:272,27:$Vp1,28:$Vq1,29:$Vr1,30:$Vs1,31:$Vt1},o($Vk1,$Vu1,{18:273,22:$Vv1}),o($Vw1,[2,9]),o($Vw1,[2,10]),o($Vw1,[2,11]),o($Vw1,[2,12]),o($Vw1,[2,13]),o($VP,[2,91]),{18:275,19:$Vu1,22:$Vv1},o($Vk1,[2,7]),o([14,19,23],[2,3]),{19:[1,276]},{4:277,6:5,7:$V0,26:$V1,32:3,33:4,34:$V2,35:7,36:8,37:9,38:$V3,41:$V4,51:$V5,59:$V6},{6:5,7:$V0,20:[1,278],26:$V1,32:17,33:4,34:$V2,35:7,36:8,37:9,38:$V3,41:$V4,51:$V5,59:$V6},{21:[1,279]},o($V8,[2,2])],
defaultActions: {16:[2,1],26:[2,8],51:[2,36],178:[2,49],214:[2,48],259:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 34
break;
case 2:return "tk_node";
break;
case 3:return "tk_for";
break;
case 4:return "tk_in";
break;
case 5:return "tk_where";
break;
case 6:return "tk_order";
break;
case 7:return "tk_by";
break;
case 8:return "tk_return";
break;
case 9:return "tk_if";
break;
case 10:return "tk_else";
break;
case 11:return "tk_then";
break;
case 12:return "tk_return";
break;
case 13:return "tk_and";
break;
case 14:return "tk_let";
break;
case 15:return "tk_int";
break;
case 16:return "tk_integer";
break;
case 17:return "tk_string";
break;
case 18:return "tk_DECIMAL";
break;
case 19:return "tk_double";
break;
case 20:return "tk_declare";
break;
case 21:return "tk_function";
break;
case 22:return "tk_AS"
break;
case 23:return "tk_as"
break;
case 24:return "tk_xs"
break;
case 25:return "tk_local";
break;
case 26:return "tk_child";
break;
case 27:return "tk_descendant";
break;
case 28:return "tk_descendatOr"
break;
case 29:return "tk_ancestor";
break;
case 30:return "tk_ancestorOr";
break;
case 31:return "tk_attribute";
break;
case 32:return "tk_following";
break;
case 33:return "tk_followingSi"
break;
case 34:return "tk_parent"
break;
case 35:return "tk_preceding"
break;
case 36:return "tk_precedingSi"
break;
case 37:return "tk_self"
break;
case 38:return "tk_text"
break;
case 39:return "tk_position"
break;
case 40:return "tk_last"
break;
case 41:return "tk_div"
break;
case 42:return "tk_and"
break;
case 43:return "tk_or"
break;
case 44:return "tk_mod"
break;
case 45:return "tk_barra"
break;
case 46:return "llaveA"
break;
case 47:return "llaveC"
break;
case 48:return "tk_punto_coma"
break;
case 49:return "tk_punto"
break;
case 50:return "tk_coma"
break;
case 51:return "tk_diagonal"
break;
case 52:return "tk_asterisco"
break;
case 53:return "tk_Interroga"
break;
case 54:return "tk_mas"
break;
case 55:return "tk_menos"
break;
case 56:return "tk_menorIgual"
break;
case 57:return "tk_mayorIgual"
break;
case 58: return "tk_gt"
break;
case 59: return "tk_lt"
break;
case 60:return "tk_menor"
break;
case 61:return "tk_mayor"
break;
case 62:return "tk_distinto"
break;
case 63:return "tk_igualXQUERY"
break;
case 64:return "tk_dosPuntos"
break;
case 65:return "tk_igual"
break;
case 66:return "tk_llaveA"
break;
case 67:return "tk_llaveC"
break;
case 68:return "tk_arroba"
break;
case 69:return "tk_parA"
break;
case 70:return "tk_parC"
break;
case 71:return "tk_stringTexto";
break;
case 72:return "tk_stringTexto";
break;
case 73:return "tk_stringTexto";
break;
case 74:return "tk_stringTexto";
break;
case 75:return "tk_decimal";
break;
case 76:return "tk_entero";
break;
case 77:return "tk_identificador";
console.log("identificador normal")

break;
case 78:return "tk_identificadorXQUERY";
console.log("indentificador papa")

break;
case 79:return 74;
break;
case 80:return "EOF";
break;
case 81:         
    console.log('Léxico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column );

break;
}
},
rules: [/^(?:[\s+\r\t\f])/,/^(?:[(][:][^:]*[:]+([^()*][^)]*[:]+)*[)])/,/^(?:node\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:return\b)/,/^(?:and\b)/,/^(?:let\b)/,/^(?:int\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:double\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:AS\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:local\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:\|)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:\.)/,/^(?:,)/,/^(?:\/)/,/^(?:\*)/,/^(?:\?)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:gt\b)/,/^(?:lt\b)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:@)/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:“[^\“]*“)/,/^(?:'[^\']*')/,/^(?:‘[^\‘]*‘)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:[$]([a-zA-Z0-9_])*)/,/^(?:[^<]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"Comentario":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXquery;
exports.Parser = GramaticaXquery.Parser;
exports.parse = function () { return GramaticaXquery.parse.apply(GramaticaXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}